
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ee6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  00005ee6  00005f7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800124  00800124  0000603e  2**0
                  ALLOC
  3 .stab         00006fcc  00000000  00000000  00006040  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004218  00000000  00000000  0000d00c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00011224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00011364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000114d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001311d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00014008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00014db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000151a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_1>
       8:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_2>
       c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 34       	cpi	r26, 0x4D	; 77
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <main>
      8a:	0c 94 71 2f 	jmp	0x5ee2	; 0x5ee2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 56 2f 	jmp	0x5eac	; 0x5eac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 46 2f 	jmp	0x5e8c	; 0x5e8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 62 2f 	jmp	0x5ec4	; 0x5ec4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 46 2f 	jmp	0x5e8c	; 0x5e8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 62 2f 	jmp	0x5ec4	; 0x5ec4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 56 2f 	jmp	0x5eac	; 0x5eac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 46 2f 	jmp	0x5e8c	; 0x5e8c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 62 2f 	jmp	0x5ec4	; 0x5ec4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 46 2f 	jmp	0x5e8c	; 0x5e8c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 62 2f 	jmp	0x5ec4	; 0x5ec4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 46 2f 	jmp	0x5e8c	; 0x5e8c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 62 2f 	jmp	0x5ec4	; 0x5ec4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 66 2f 	jmp	0x5ecc	; 0x5ecc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_initPin+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	b1 f0       	breq	.+44     	; 0xb8e <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
     b62:	ea 81       	ldd	r30, Y+2	; 0x02
     b64:	fb 81       	ldd	r31, Y+3	; 0x03
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	9b 81       	ldd	r25, Y+3	; 0x03
     b6c:	62 2f       	mov	r22, r18
     b6e:	0e 94 d0 05 	call	0xba0	; 0xba0 <GPIO_changePinDir>
     b72:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	88 23       	and	r24, r24
     b78:	61 f4       	brne	.+24     	; 0xb92 <GPIO_initPin+0x4c>
			ret =
     b7a:	ea 81       	ldd	r30, Y+2	; 0x02
     b7c:	fb 81       	ldd	r31, Y+3	; 0x03
     b7e:	23 81       	ldd	r18, Z+3	; 0x03
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	9b 81       	ldd	r25, Y+3	; 0x03
     b84:	62 2f       	mov	r22, r18
     b86:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     b92:	89 81       	ldd	r24, Y+1	; 0x01
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <GPIO_changePinDir+0x6>
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <GPIO_changePinDir+0x8>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <GPIO_changePinDir+0xa>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	9b 83       	std	Y+3, r25	; 0x03
     bb0:	8a 83       	std	Y+2, r24	; 0x02
     bb2:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <GPIO_changePinDir+0x22>
     bc0:	68 c0       	rjmp	.+208    	; 0xc92 <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3e 83       	std	Y+6, r19	; 0x06
     bca:	2d 83       	std	Y+5, r18	; 0x05
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	31 f0       	breq	.+12     	; 0xbe0 <GPIO_changePinDir+0x40>
     bd4:	2d 81       	ldd	r18, Y+5	; 0x05
     bd6:	3e 81       	ldd	r19, Y+6	; 0x06
     bd8:	21 30       	cpi	r18, 0x01	; 1
     bda:	31 05       	cpc	r19, r1
     bdc:	71 f1       	breq	.+92     	; 0xc3a <GPIO_changePinDir+0x9a>
     bde:	5b c0       	rjmp	.+182    	; 0xc96 <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     be0:	ea 81       	ldd	r30, Y+2	; 0x02
     be2:	fb 81       	ldd	r31, Y+3	; 0x03
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	fc 01       	movw	r30, r24
     bf0:	e8 59       	subi	r30, 0x98	; 152
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	a0 81       	ld	r26, Z
     bf6:	b1 81       	ldd	r27, Z+1	; 0x01
     bf8:	ea 81       	ldd	r30, Y+2	; 0x02
     bfa:	fb 81       	ldd	r31, Y+3	; 0x03
     bfc:	80 81       	ld	r24, Z
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	fc 01       	movw	r30, r24
     c08:	e8 59       	subi	r30, 0x98	; 152
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	01 90       	ld	r0, Z+
     c0e:	f0 81       	ld	r31, Z
     c10:	e0 2d       	mov	r30, r0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	ea 81       	ldd	r30, Y+2	; 0x02
     c18:	fb 81       	ldd	r31, Y+3	; 0x03
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <GPIO_changePinDir+0x8c>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <GPIO_changePinDir+0x88>
     c30:	80 95       	com	r24
     c32:	84 23       	and	r24, r20
     c34:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	2e c0       	rjmp	.+92     	; 0xc96 <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     c3a:	ea 81       	ldd	r30, Y+2	; 0x02
     c3c:	fb 81       	ldd	r31, Y+3	; 0x03
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	fc 01       	movw	r30, r24
     c4a:	e8 59       	subi	r30, 0x98	; 152
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	a0 81       	ld	r26, Z
     c50:	b1 81       	ldd	r27, Z+1	; 0x01
     c52:	ea 81       	ldd	r30, Y+2	; 0x02
     c54:	fb 81       	ldd	r31, Y+3	; 0x03
     c56:	80 81       	ld	r24, Z
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	fc 01       	movw	r30, r24
     c62:	e8 59       	subi	r30, 0x98	; 152
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	01 90       	ld	r0, Z+
     c68:	f0 81       	ld	r31, Z
     c6a:	e0 2d       	mov	r30, r0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	ea 81       	ldd	r30, Y+2	; 0x02
     c72:	fb 81       	ldd	r31, Y+3	; 0x03
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <GPIO_changePinDir+0xe6>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <GPIO_changePinDir+0xe2>
     c8a:	84 2b       	or	r24, r20
     c8c:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     c8e:	19 82       	std	Y+1, r1	; 0x01
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
}
     c98:	26 96       	adiw	r28, 0x06	; 6
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <GPIO_writePinLogic+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <GPIO_writePinLogic+0x8>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <GPIO_writePinLogic+0xa>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	9b 83       	std	Y+3, r25	; 0x03
     cba:	8a 83       	std	Y+2, r24	; 0x02
     cbc:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	09 f4       	brne	.+2      	; 0xccc <GPIO_writePinLogic+0x22>
     cca:	68 c0       	rjmp	.+208    	; 0xd9c <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3e 83       	std	Y+6, r19	; 0x06
     cd4:	2d 83       	std	Y+5, r18	; 0x05
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	9e 81       	ldd	r25, Y+6	; 0x06
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	31 f0       	breq	.+12     	; 0xcea <GPIO_writePinLogic+0x40>
     cde:	2d 81       	ldd	r18, Y+5	; 0x05
     ce0:	3e 81       	ldd	r19, Y+6	; 0x06
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	31 05       	cpc	r19, r1
     ce6:	71 f1       	breq	.+92     	; 0xd44 <GPIO_writePinLogic+0x9a>
     ce8:	5b c0       	rjmp	.+182    	; 0xda0 <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     cea:	ea 81       	ldd	r30, Y+2	; 0x02
     cec:	fb 81       	ldd	r31, Y+3	; 0x03
     cee:	80 81       	ld	r24, Z
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	fc 01       	movw	r30, r24
     cfa:	e0 59       	subi	r30, 0x90	; 144
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	a0 81       	ld	r26, Z
     d00:	b1 81       	ldd	r27, Z+1	; 0x01
     d02:	ea 81       	ldd	r30, Y+2	; 0x02
     d04:	fb 81       	ldd	r31, Y+3	; 0x03
     d06:	80 81       	ld	r24, Z
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	fc 01       	movw	r30, r24
     d12:	e0 59       	subi	r30, 0x90	; 144
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	01 90       	ld	r0, Z+
     d18:	f0 81       	ld	r31, Z
     d1a:	e0 2d       	mov	r30, r0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	ea 81       	ldd	r30, Y+2	; 0x02
     d22:	fb 81       	ldd	r31, Y+3	; 0x03
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <GPIO_writePinLogic+0x8c>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <GPIO_writePinLogic+0x88>
     d3a:	80 95       	com	r24
     d3c:	84 23       	and	r24, r20
     d3e:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	2e c0       	rjmp	.+92     	; 0xda0 <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
     d44:	ea 81       	ldd	r30, Y+2	; 0x02
     d46:	fb 81       	ldd	r31, Y+3	; 0x03
     d48:	80 81       	ld	r24, Z
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	fc 01       	movw	r30, r24
     d54:	e0 59       	subi	r30, 0x90	; 144
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	a0 81       	ld	r26, Z
     d5a:	b1 81       	ldd	r27, Z+1	; 0x01
     d5c:	ea 81       	ldd	r30, Y+2	; 0x02
     d5e:	fb 81       	ldd	r31, Y+3	; 0x03
     d60:	80 81       	ld	r24, Z
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	fc 01       	movw	r30, r24
     d6c:	e0 59       	subi	r30, 0x90	; 144
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	01 90       	ld	r0, Z+
     d72:	f0 81       	ld	r31, Z
     d74:	e0 2d       	mov	r30, r0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	ea 81       	ldd	r30, Y+2	; 0x02
     d7c:	fb 81       	ldd	r31, Y+3	; 0x03
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_writePinLogic+0xe6>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <GPIO_writePinLogic+0xe2>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     d98:	19 82       	std	Y+1, r1	; 0x01
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
}
     da2:	26 96       	adiw	r28, 0x06	; 6
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <GPIO_readPinLogic+0x6>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <GPIO_readPinLogic+0x8>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9b 83       	std	Y+3, r25	; 0x03
     dc4:	8a 83       	std	Y+2, r24	; 0x02
     dc6:	7d 83       	std	Y+5, r23	; 0x05
     dc8:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	11 f1       	breq	.+68     	; 0xe1a <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 81       	ld	r24, Z
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	fc 01       	movw	r30, r24
     de6:	e8 58       	subi	r30, 0x88	; 136
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	01 90       	ld	r0, Z+
     dec:	f0 81       	ld	r31, Z
     dee:	e0 2d       	mov	r30, r0
     df0:	80 81       	ld	r24, Z
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ea 81       	ldd	r30, Y+2	; 0x02
     df8:	fb 81       	ldd	r31, Y+3	; 0x03
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_readPinLogic+0x54>
     e04:	55 95       	asr	r21
     e06:	47 95       	ror	r20
     e08:	8a 95       	dec	r24
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_readPinLogic+0x50>
     e0c:	ca 01       	movw	r24, r20
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	ec 81       	ldd	r30, Y+4	; 0x04
     e12:	fd 81       	ldd	r31, Y+5	; 0x05
     e14:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPIO_togglePinLogic+0x6>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f1       	breq	.+88     	; 0xea4 <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
     e4c:	ea 81       	ldd	r30, Y+2	; 0x02
     e4e:	fb 81       	ldd	r31, Y+3	; 0x03
     e50:	80 81       	ld	r24, Z
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	fc 01       	movw	r30, r24
     e5c:	e0 59       	subi	r30, 0x90	; 144
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	a0 81       	ld	r26, Z
     e62:	b1 81       	ldd	r27, Z+1	; 0x01
     e64:	ea 81       	ldd	r30, Y+2	; 0x02
     e66:	fb 81       	ldd	r31, Y+3	; 0x03
     e68:	80 81       	ld	r24, Z
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	fc 01       	movw	r30, r24
     e74:	e0 59       	subi	r30, 0x90	; 144
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	01 90       	ld	r0, Z+
     e7a:	f0 81       	ld	r31, Z
     e7c:	e0 2d       	mov	r30, r0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	ea 81       	ldd	r30, Y+2	; 0x02
     e84:	fb 81       	ldd	r31, Y+3	; 0x03
     e86:	81 81       	ldd	r24, Z+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_togglePinLogic+0x68>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_togglePinLogic+0x64>
     e9c:	84 27       	eor	r24, r20
     e9e:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	28 97       	sbiw	r28, 0x08	; 8
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
     ece:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	38 87       	std	Y+8, r19	; 0x08
     edc:	2f 83       	std	Y+7, r18	; 0x07
     ede:	8f 81       	ldd	r24, Y+7	; 0x07
     ee0:	98 85       	ldd	r25, Y+8	; 0x08
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	31 f0       	breq	.+12     	; 0xef2 <GPIO_initPort+0x3c>
     ee6:	2f 81       	ldd	r18, Y+7	; 0x07
     ee8:	38 85       	ldd	r19, Y+8	; 0x08
     eea:	21 30       	cpi	r18, 0x01	; 1
     eec:	31 05       	cpc	r19, r1
     eee:	79 f0       	breq	.+30     	; 0xf0e <GPIO_initPort+0x58>
     ef0:	1c c0       	rjmp	.+56     	; 0xf2a <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	fc 01       	movw	r30, r24
     efe:	e8 59       	subi	r30, 0x98	; 152
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	01 90       	ld	r0, Z+
     f04:	f0 81       	ld	r31, Z
     f06:	e0 2d       	mov	r30, r0
     f08:	10 82       	st	Z, r1
		ret = GPIO_OK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	fc 01       	movw	r30, r24
     f1a:	e8 59       	subi	r30, 0x98	; 152
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	01 90       	ld	r0, Z+
     f20:	f0 81       	ld	r31, Z
     f22:	e0 2d       	mov	r30, r0
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	80 83       	st	Z, r24
		ret = GPIO_OK;
     f28:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	31 f0       	breq	.+12     	; 0xf48 <GPIO_initPort+0x92>
     f3c:	2d 81       	ldd	r18, Y+5	; 0x05
     f3e:	3e 81       	ldd	r19, Y+6	; 0x06
     f40:	21 30       	cpi	r18, 0x01	; 1
     f42:	31 05       	cpc	r19, r1
     f44:	79 f0       	breq	.+30     	; 0xf64 <GPIO_initPort+0xae>
     f46:	1c c0       	rjmp	.+56     	; 0xf80 <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	e0 59       	subi	r30, 0x90	; 144
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	01 90       	ld	r0, Z+
     f5a:	f0 81       	ld	r31, Z
     f5c:	e0 2d       	mov	r30, r0
     f5e:	10 82       	st	Z, r1
		ret = GPIO_OK;
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	fc 01       	movw	r30, r24
     f70:	e0 59       	subi	r30, 0x90	; 144
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	01 90       	ld	r0, Z+
     f76:	f0 81       	ld	r31, Z
     f78:	e0 2d       	mov	r30, r0
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	80 83       	st	Z, r24
		ret = GPIO_OK;
     f7e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
}
     f82:	28 96       	adiw	r28, 0x08	; 8
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <GPIO_changePortDir+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <GPIO_changePortDir+0x8>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	8a 83       	std	Y+2, r24	; 0x02
     fa4:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3d 83       	std	Y+5, r19	; 0x05
     fb2:	2c 83       	std	Y+4, r18	; 0x04
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	31 f0       	breq	.+12     	; 0xfc8 <GPIO_changePortDir+0x34>
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	21 30       	cpi	r18, 0x01	; 1
     fc2:	31 05       	cpc	r19, r1
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <GPIO_changePortDir+0x50>
     fc6:	1c c0       	rjmp	.+56     	; 0x1000 <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	e8 59       	subi	r30, 0x98	; 152
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	01 90       	ld	r0, Z+
     fda:	f0 81       	ld	r31, Z
     fdc:	e0 2d       	mov	r30, r0
     fde:	10 82       	st	Z, r1
		ret = GPIO_OK;
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	0e c0       	rjmp	.+28     	; 0x1000 <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	fc 01       	movw	r30, r24
     ff0:	e8 59       	subi	r30, 0x98	; 152
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	01 90       	ld	r0, Z+
     ff6:	f0 81       	ld	r31, Z
     ff8:	e0 2d       	mov	r30, r0
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 83       	st	Z, r24
		ret = GPIO_OK;
     ffe:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <GPIO_writePortLogic+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <GPIO_writePortLogic+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	31 f0       	breq	.+12     	; 0x1046 <GPIO_writePortLogic+0x34>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	21 30       	cpi	r18, 0x01	; 1
    1040:	31 05       	cpc	r19, r1
    1042:	79 f0       	breq	.+30     	; 0x1062 <GPIO_writePortLogic+0x50>
    1044:	1c c0       	rjmp	.+56     	; 0x107e <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	fc 01       	movw	r30, r24
    1052:	e0 59       	subi	r30, 0x90	; 144
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	01 90       	ld	r0, Z+
    1058:	f0 81       	ld	r31, Z
    105a:	e0 2d       	mov	r30, r0
    105c:	10 82       	st	Z, r1
		ret = GPIO_OK;
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	0e c0       	rjmp	.+28     	; 0x107e <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	fc 01       	movw	r30, r24
    106e:	e0 59       	subi	r30, 0x90	; 144
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	01 90       	ld	r0, Z+
    1074:	f0 81       	ld	r31, Z
    1076:	e0 2d       	mov	r30, r0
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	80 83       	st	Z, r24
		ret = GPIO_OK;
    107c:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_readPortLogic+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_readPortLogic+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	8a 83       	std	Y+2, r24	; 0x02
    109e:	7c 83       	std	Y+4, r23	; 0x04
    10a0:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	fc 01       	movw	r30, r24
    10b2:	e8 58       	subi	r30, 0x88	; 136
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	80 81       	ld	r24, Z
    10be:	eb 81       	ldd	r30, Y+3	; 0x03
    10c0:	fc 81       	ldd	r31, Y+4	; 0x04
    10c2:	80 83       	st	Z, r24
	ret = GPIO_OK;
    10c4:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_togglePortLogic+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	fc 01       	movw	r30, r24
    10f2:	e8 59       	subi	r30, 0x98	; 152
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	a0 81       	ld	r26, Z
    10f8:	b1 81       	ldd	r27, Z+1	; 0x01
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	e8 59       	subi	r30, 0x98	; 152
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	01 90       	ld	r0, Z+
    110c:	f0 81       	ld	r31, Z
    110e:	e0 2d       	mov	r30, r0
    1110:	20 81       	ld	r18, Z
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	fc 01       	movw	r30, r24
    111e:	e8 59       	subi	r30, 0x98	; 152
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	01 90       	ld	r0, Z+
    1124:	f0 81       	ld	r31, Z
    1126:	e0 2d       	mov	r30, r0
    1128:	80 81       	ld	r24, Z
    112a:	82 27       	eor	r24, r18
    112c:	8c 93       	st	X, r24
	ret = GPIO_OK;
    112e:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <GPIO_set4msbValue+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <GPIO_set4msbValue+0x8>
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_OK;
    114e:	19 82       	std	Y+1, r1	; 0x01
	switch(copyPortName)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	3d 83       	std	Y+5, r19	; 0x05
    1158:	2c 83       	std	Y+4, r18	; 0x04
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	79 f1       	breq	.+94     	; 0x11c2 <GPIO_set4msbValue+0x86>
    1164:	2c 81       	ldd	r18, Y+4	; 0x04
    1166:	3d 81       	ldd	r19, Y+5	; 0x05
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	2c f4       	brge	.+10     	; 0x1178 <GPIO_set4msbValue+0x3c>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	69 f0       	breq	.+26     	; 0x1190 <GPIO_set4msbValue+0x54>
    1176:	6f c0       	rjmp	.+222    	; 0x1256 <GPIO_set4msbValue+0x11a>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	c9 f1       	breq	.+114    	; 0x11f4 <GPIO_set4msbValue+0xb8>
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	91 05       	cpc	r25, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <GPIO_set4msbValue+0x52>
    118c:	4c c0       	rjmp	.+152    	; 0x1226 <GPIO_set4msbValue+0xea>
    118e:	63 c0       	rjmp	.+198    	; 0x1256 <GPIO_set4msbValue+0x11a>
	{
	case GPIO_PORTA:
		PORTA_REG &= 0x0F;
    1190:	ab e3       	ldi	r26, 0x3B	; 59
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	eb e3       	ldi	r30, 0x3B	; 59
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8f 70       	andi	r24, 0x0F	; 15
    119c:	8c 93       	st	X, r24
		PORTA_REG |= value<<4;
    119e:	ab e3       	ldi	r26, 0x3B	; 59
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	eb e3       	ldi	r30, 0x3B	; 59
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	28 2f       	mov	r18, r24
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	82 95       	swap	r24
    11b2:	92 95       	swap	r25
    11b4:	90 7f       	andi	r25, 0xF0	; 240
    11b6:	98 27       	eor	r25, r24
    11b8:	80 7f       	andi	r24, 0xF0	; 240
    11ba:	98 27       	eor	r25, r24
    11bc:	82 2b       	or	r24, r18
    11be:	8c 93       	st	X, r24
    11c0:	4a c0       	rjmp	.+148    	; 0x1256 <GPIO_set4msbValue+0x11a>
		break;
	case GPIO_PORTB:
		PORTB_REG &= 0x0F;
    11c2:	a8 e3       	ldi	r26, 0x38	; 56
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e3       	ldi	r30, 0x38	; 56
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 70       	andi	r24, 0x0F	; 15
    11ce:	8c 93       	st	X, r24
		PORTB_REG |= value<<4;
    11d0:	a8 e3       	ldi	r26, 0x38	; 56
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e8 e3       	ldi	r30, 0x38	; 56
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	82 95       	swap	r24
    11e4:	92 95       	swap	r25
    11e6:	90 7f       	andi	r25, 0xF0	; 240
    11e8:	98 27       	eor	r25, r24
    11ea:	80 7f       	andi	r24, 0xF0	; 240
    11ec:	98 27       	eor	r25, r24
    11ee:	82 2b       	or	r24, r18
    11f0:	8c 93       	st	X, r24
    11f2:	31 c0       	rjmp	.+98     	; 0x1256 <GPIO_set4msbValue+0x11a>
		break;
	case GPIO_PORTC:
		PORTC_REG &= 0x0F;
    11f4:	a5 e3       	ldi	r26, 0x35	; 53
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e3       	ldi	r30, 0x35	; 53
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 70       	andi	r24, 0x0F	; 15
    1200:	8c 93       	st	X, r24
		PORTC_REG |= value<<4;
    1202:	a5 e3       	ldi	r26, 0x35	; 53
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e3       	ldi	r30, 0x35	; 53
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	28 2f       	mov	r18, r24
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	82 95       	swap	r24
    1216:	92 95       	swap	r25
    1218:	90 7f       	andi	r25, 0xF0	; 240
    121a:	98 27       	eor	r25, r24
    121c:	80 7f       	andi	r24, 0xF0	; 240
    121e:	98 27       	eor	r25, r24
    1220:	82 2b       	or	r24, r18
    1222:	8c 93       	st	X, r24
    1224:	18 c0       	rjmp	.+48     	; 0x1256 <GPIO_set4msbValue+0x11a>
		break;
	case GPIO_PORTD:
		PORTD_REG &= 0x0F;
    1226:	a2 e3       	ldi	r26, 0x32	; 50
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e2 e3       	ldi	r30, 0x32	; 50
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8f 70       	andi	r24, 0x0F	; 15
    1232:	8c 93       	st	X, r24
		PORTD_REG |= value<<4;
    1234:	a2 e3       	ldi	r26, 0x32	; 50
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e2 e3       	ldi	r30, 0x32	; 50
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	28 2f       	mov	r18, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	82 95       	swap	r24
    1248:	92 95       	swap	r25
    124a:	90 7f       	andi	r25, 0xF0	; 240
    124c:	98 27       	eor	r25, r24
    124e:	80 7f       	andi	r24, 0xF0	; 240
    1250:	98 27       	eor	r25, r24
    1252:	82 2b       	or	r24, r18
    1254:	8c 93       	st	X, r24
		break;
	}
	return gpioRet;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <MGI_vGIE>:
/*************************************************************************/

#include "gi_interface.h"

void MGI_vGIE(void)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,I_BIT);
    1270:	af e5       	ldi	r26, 0x5F	; 95
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ef e5       	ldi	r30, 0x5F	; 95
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	8c 93       	st	X, r24
}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <MGI_vGID>:

void MGI_vGID(void)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,I_BIT);
    128c:	af e5       	ldi	r26, 0x5F	; 95
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ef e5       	ldi	r30, 0x5F	; 95
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	8f 77       	andi	r24, 0x7F	; 127
    1298:	8c 93       	st	X, r24
}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <exti0SetHandlerToAction>:
static void(*ptr_exti0IsrAction)(void) = PTR_NULL;
static void(*ptr_exti1IsrAction)(void) = PTR_NULL;
static void(*ptr_exti2IsrAction)(void) = PTR_NULL;

static EN_MEXTI_systemState_t exti0SetHandlerToAction(void(*ptr_Handler)(void))
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <exti0SetHandlerToAction+0x6>
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	9b 83       	std	Y+3, r25	; 0x03
    12ae:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ptr_Handler)
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	41 f0       	breq	.+16     	; 0x12cc <exti0SetHandlerToAction+0x2c>
	{
		ptr_exti0IsrAction = ptr_Handler;
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	9b 81       	ldd	r25, Y+3	; 0x03
    12c0:	90 93 25 01 	sts	0x0125, r25
    12c4:	80 93 24 01 	sts	0x0124, r24
		extiRet = MEXTI_OK;
    12c8:	19 82       	std	Y+1, r1	; 0x01
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <exti0SetHandlerToAction+0x30>
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <exti1SetHandlerToAction>:

static EN_MEXTI_systemState_t exti1SetHandlerToAction(void(*ptr_Handler)(void))
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <exti1SetHandlerToAction+0x6>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	9b 83       	std	Y+3, r25	; 0x03
    12ec:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ptr_Handler)
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	41 f0       	breq	.+16     	; 0x130a <exti1SetHandlerToAction+0x2c>
	{
		ptr_exti1IsrAction = ptr_Handler;
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	90 93 27 01 	sts	0x0127, r25
    1302:	80 93 26 01 	sts	0x0126, r24
		extiRet = MEXTI_OK;
    1306:	19 82       	std	Y+1, r1	; 0x01
    1308:	02 c0       	rjmp	.+4      	; 0x130e <exti1SetHandlerToAction+0x30>
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <exti2SetHandlerToAction>:

static EN_MEXTI_systemState_t exti2SetHandlerToAction(void(*ptr_Handler)(void))
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <exti2SetHandlerToAction+0x6>
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	9b 83       	std	Y+3, r25	; 0x03
    132a:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ptr_Handler)
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	9b 81       	ldd	r25, Y+3	; 0x03
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	41 f0       	breq	.+16     	; 0x1348 <exti2SetHandlerToAction+0x2c>
	{
		ptr_exti2IsrAction = ptr_Handler;
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	90 93 29 01 	sts	0x0129, r25
    1340:	80 93 28 01 	sts	0x0128, r24
		extiRet = MEXTI_OK;
    1344:	19 82       	std	Y+1, r1	; 0x01
    1346:	02 c0       	rjmp	.+4      	; 0x134c <exti2SetHandlerToAction+0x30>
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <MEXTI_initExti>:



EN_MEXTI_systemState_t MEXTI_initExti(ST_MEXTI_cfg_t const *ST_ptrExtiCfgInstance)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	00 d0       	rcall	.+0      	; 0x1360 <MEXTI_initExti+0x6>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <MEXTI_initExti+0x8>
    1362:	0f 92       	push	r0
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9b 83       	std	Y+3, r25	; 0x03
    136a:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrExtiCfgInstance)
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	9b 81       	ldd	r25, Y+3	; 0x03
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	09 f4       	brne	.+2      	; 0x137a <MEXTI_initExti+0x20>
    1378:	2b c1       	rjmp	.+598    	; 0x15d0 <MEXTI_initExti+0x276>
	{
		switch(ST_ptrExtiCfgInstance->numberOfExti)
    137a:	ea 81       	ldd	r30, Y+2	; 0x02
    137c:	fb 81       	ldd	r31, Y+3	; 0x03
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3d 83       	std	Y+5, r19	; 0x05
    1386:	2c 83       	std	Y+4, r18	; 0x04
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <MEXTI_initExti+0x3a>
    1392:	7e c0       	rjmp	.+252    	; 0x1490 <MEXTI_initExti+0x136>
    1394:	2c 81       	ldd	r18, Y+4	; 0x04
    1396:	3d 81       	ldd	r19, Y+5	; 0x05
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <MEXTI_initExti+0x46>
    139e:	eb c0       	rjmp	.+470    	; 0x1576 <MEXTI_initExti+0x21c>
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	09 f0       	breq	.+2      	; 0x13aa <MEXTI_initExti+0x50>
    13a8:	15 c1       	rjmp	.+554    	; 0x15d4 <MEXTI_initExti+0x27a>
		{
		case MEXTI_EXTI0_INTERRUPT:
		{

			if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_LOW_LEVEL_SENSE_CONTROL)
    13aa:	ea 81       	ldd	r30, Y+2	; 0x02
    13ac:	fb 81       	ldd	r31, Y+3	; 0x03
    13ae:	83 81       	ldd	r24, Z+3	; 0x03
    13b0:	88 23       	and	r24, r24
    13b2:	b9 f4       	brne	.+46     	; 0x13e2 <MEXTI_initExti+0x88>
			{
				CLR_BIT(GICR_REG,INT0_BIT);
    13b4:	ab e5       	ldi	r26, 0x5B	; 91
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	eb e5       	ldi	r30, 0x5B	; 91
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 7b       	andi	r24, 0xBF	; 191
    13c0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC01_BIT);
    13c2:	a5 e5       	ldi	r26, 0x55	; 85
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e5       	ldi	r30, 0x55	; 85
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC00_BIT);
    13d0:	a5 e5       	ldi	r26, 0x55	; 85
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e5       	ldi	r30, 0x55	; 85
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8e 7f       	andi	r24, 0xFE	; 254
    13dc:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    13de:	19 82       	std	Y+1, r1	; 0x01
    13e0:	f9 c0       	rjmp	.+498    	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_ANY_LOGICAL_SENSE_CONTROL)
    13e2:	ea 81       	ldd	r30, Y+2	; 0x02
    13e4:	fb 81       	ldd	r31, Y+3	; 0x03
    13e6:	83 81       	ldd	r24, Z+3	; 0x03
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	b9 f4       	brne	.+46     	; 0x141a <MEXTI_initExti+0xc0>
			{
				CLR_BIT(GICR_REG,INT0_BIT);
    13ec:	ab e5       	ldi	r26, 0x5B	; 91
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	eb e5       	ldi	r30, 0x5B	; 91
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 7b       	andi	r24, 0xBF	; 191
    13f8:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC01_BIT);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8d 7f       	andi	r24, 0xFD	; 253
    1406:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC00_BIT);
    1408:	a5 e5       	ldi	r26, 0x55	; 85
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e5       	ldi	r30, 0x55	; 85
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    1416:	19 82       	std	Y+1, r1	; 0x01
    1418:	dd c0       	rjmp	.+442    	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_FALLING_EDGE_SENSE_CONTROL)
    141a:	ea 81       	ldd	r30, Y+2	; 0x02
    141c:	fb 81       	ldd	r31, Y+3	; 0x03
    141e:	83 81       	ldd	r24, Z+3	; 0x03
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	b9 f4       	brne	.+46     	; 0x1452 <MEXTI_initExti+0xf8>
			{
				CLR_BIT(GICR_REG,INT0_BIT);
    1424:	ab e5       	ldi	r26, 0x5B	; 91
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e5       	ldi	r30, 0x5B	; 91
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 7b       	andi	r24, 0xBF	; 191
    1430:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC01_BIT);
    1432:	a5 e5       	ldi	r26, 0x55	; 85
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e5       	ldi	r30, 0x55	; 85
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	82 60       	ori	r24, 0x02	; 2
    143e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC00_BIT);
    1440:	a5 e5       	ldi	r26, 0x55	; 85
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e5       	ldi	r30, 0x55	; 85
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8e 7f       	andi	r24, 0xFE	; 254
    144c:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    144e:	19 82       	std	Y+1, r1	; 0x01
    1450:	c1 c0       	rjmp	.+386    	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_RISING_EDGE_SENSE_CONTROL)
    1452:	ea 81       	ldd	r30, Y+2	; 0x02
    1454:	fb 81       	ldd	r31, Y+3	; 0x03
    1456:	83 81       	ldd	r24, Z+3	; 0x03
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	b9 f4       	brne	.+46     	; 0x148a <MEXTI_initExti+0x130>
			{
				CLR_BIT(GICR_REG,INT0_BIT);
    145c:	ab e5       	ldi	r26, 0x5B	; 91
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	eb e5       	ldi	r30, 0x5B	; 91
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8f 7b       	andi	r24, 0xBF	; 191
    1468:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC01_BIT);
    146a:	a5 e5       	ldi	r26, 0x55	; 85
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e5       	ldi	r30, 0x55	; 85
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	82 60       	ori	r24, 0x02	; 2
    1476:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC00_BIT);
    1478:	a5 e5       	ldi	r26, 0x55	; 85
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e5       	ldi	r30, 0x55	; 85
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	81 60       	ori	r24, 0x01	; 1
    1484:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    1486:	19 82       	std	Y+1, r1	; 0x01
    1488:	a5 c0       	rjmp	.+330    	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else
			{
				extiRet = MEXTI_INVALID_PARAMTER;
    148a:	83 e0       	ldi	r24, 0x03	; 3
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	a2 c0       	rjmp	.+324    	; 0x15d4 <MEXTI_initExti+0x27a>
			break;
		}
		case MEXTI_EXTI1_INTERRUPT:
		{

			if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_LOW_LEVEL_SENSE_CONTROL)
    1490:	ea 81       	ldd	r30, Y+2	; 0x02
    1492:	fb 81       	ldd	r31, Y+3	; 0x03
    1494:	83 81       	ldd	r24, Z+3	; 0x03
    1496:	88 23       	and	r24, r24
    1498:	b9 f4       	brne	.+46     	; 0x14c8 <MEXTI_initExti+0x16e>
			{
				CLR_BIT(GICR_REG,INT1_BIT);
    149a:	ab e5       	ldi	r26, 0x5B	; 91
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	eb e5       	ldi	r30, 0x5B	; 91
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 77       	andi	r24, 0x7F	; 127
    14a6:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC11_BIT);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	87 7f       	andi	r24, 0xF7	; 247
    14b4:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC10_BIT);
    14b6:	a5 e5       	ldi	r26, 0x55	; 85
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e5       	ldi	r30, 0x55	; 85
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8b 7f       	andi	r24, 0xFB	; 251
    14c2:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    14c4:	19 82       	std	Y+1, r1	; 0x01
    14c6:	86 c0       	rjmp	.+268    	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_ANY_LOGICAL_SENSE_CONTROL)
    14c8:	ea 81       	ldd	r30, Y+2	; 0x02
    14ca:	fb 81       	ldd	r31, Y+3	; 0x03
    14cc:	83 81       	ldd	r24, Z+3	; 0x03
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	b9 f4       	brne	.+46     	; 0x1500 <MEXTI_initExti+0x1a6>
			{
				CLR_BIT(GICR_REG,INT1_BIT);
    14d2:	ab e5       	ldi	r26, 0x5B	; 91
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	eb e5       	ldi	r30, 0x5B	; 91
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8f 77       	andi	r24, 0x7F	; 127
    14de:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC11_BIT);
    14e0:	a5 e5       	ldi	r26, 0x55	; 85
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e5       	ldi	r30, 0x55	; 85
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	87 7f       	andi	r24, 0xF7	; 247
    14ec:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC10_BIT);
    14ee:	a5 e5       	ldi	r26, 0x55	; 85
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e5 e5       	ldi	r30, 0x55	; 85
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    14fc:	19 82       	std	Y+1, r1	; 0x01
    14fe:	6a c0       	rjmp	.+212    	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_FALLING_EDGE_SENSE_CONTROL)
    1500:	ea 81       	ldd	r30, Y+2	; 0x02
    1502:	fb 81       	ldd	r31, Y+3	; 0x03
    1504:	83 81       	ldd	r24, Z+3	; 0x03
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	b9 f4       	brne	.+46     	; 0x1538 <MEXTI_initExti+0x1de>
			{
				CLR_BIT(GICR_REG,INT1_BIT);
    150a:	ab e5       	ldi	r26, 0x5B	; 91
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	eb e5       	ldi	r30, 0x5B	; 91
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 77       	andi	r24, 0x7F	; 127
    1516:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC11_BIT);
    1518:	a5 e5       	ldi	r26, 0x55	; 85
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e5       	ldi	r30, 0x55	; 85
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	88 60       	ori	r24, 0x08	; 8
    1524:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC10_BIT);
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8b 7f       	andi	r24, 0xFB	; 251
    1532:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    1534:	19 82       	std	Y+1, r1	; 0x01
    1536:	4e c0       	rjmp	.+156    	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_RISING_EDGE_SENSE_CONTROL)
    1538:	ea 81       	ldd	r30, Y+2	; 0x02
    153a:	fb 81       	ldd	r31, Y+3	; 0x03
    153c:	83 81       	ldd	r24, Z+3	; 0x03
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	b9 f4       	brne	.+46     	; 0x1570 <MEXTI_initExti+0x216>
			{
				CLR_BIT(GICR_REG,INT1_BIT);
    1542:	ab e5       	ldi	r26, 0x5B	; 91
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	eb e5       	ldi	r30, 0x5B	; 91
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8f 77       	andi	r24, 0x7F	; 127
    154e:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC11_BIT);
    1550:	a5 e5       	ldi	r26, 0x55	; 85
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e5 e5       	ldi	r30, 0x55	; 85
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	88 60       	ori	r24, 0x08	; 8
    155c:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC10_BIT);
    155e:	a5 e5       	ldi	r26, 0x55	; 85
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 e5       	ldi	r30, 0x55	; 85
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	84 60       	ori	r24, 0x04	; 4
    156a:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    156c:	19 82       	std	Y+1, r1	; 0x01
    156e:	32 c0       	rjmp	.+100    	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else
			{
				extiRet = MEXTI_INVALID_PARAMTER;
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	2f c0       	rjmp	.+94     	; 0x15d4 <MEXTI_initExti+0x27a>
		}

		case MEXTI_EXTI2_INTERRUPT:
		{

			if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_FALLING_EDGE_SENSE_CONTROL)
    1576:	ea 81       	ldd	r30, Y+2	; 0x02
    1578:	fb 81       	ldd	r31, Y+3	; 0x03
    157a:	83 81       	ldd	r24, Z+3	; 0x03
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	81 f4       	brne	.+32     	; 0x15a0 <MEXTI_initExti+0x246>
			{
				CLR_BIT(GICR_REG,INT2_BIT);
    1580:	ab e5       	ldi	r26, 0x5B	; 91
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e5       	ldi	r30, 0x5B	; 91
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8f 7d       	andi	r24, 0xDF	; 223
    158c:	8c 93       	st	X, r24
				CLR_BIT(MCUCSR_REG,ISC2_BIT);
    158e:	a4 e5       	ldi	r26, 0x54	; 84
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e4 e5       	ldi	r30, 0x54	; 84
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8f 7b       	andi	r24, 0xBF	; 191
    159a:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    159c:	19 82       	std	Y+1, r1	; 0x01
    159e:	1a c0       	rjmp	.+52     	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_RISING_EDGE_SENSE_CONTROL)
    15a0:	ea 81       	ldd	r30, Y+2	; 0x02
    15a2:	fb 81       	ldd	r31, Y+3	; 0x03
    15a4:	83 81       	ldd	r24, Z+3	; 0x03
    15a6:	83 30       	cpi	r24, 0x03	; 3
    15a8:	81 f4       	brne	.+32     	; 0x15ca <MEXTI_initExti+0x270>
			{
				SET_BIT(GICR_REG,INT2_BIT);
    15aa:	ab e5       	ldi	r26, 0x5B	; 91
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb e5       	ldi	r30, 0x5B	; 91
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	80 62       	ori	r24, 0x20	; 32
    15b6:	8c 93       	st	X, r24
				SET_BIT(MCUCSR_REG,ISC2_BIT);
    15b8:	a4 e5       	ldi	r26, 0x54	; 84
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e4 e5       	ldi	r30, 0x54	; 84
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	80 64       	ori	r24, 0x40	; 64
    15c4:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <MEXTI_initExti+0x27a>
			}
			else
			{
				extiRet = MEXTI_INVALID_PARAMTER;
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <MEXTI_initExti+0x27a>
		}
		}
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <MEXTI_enableExti>:

EN_MEXTI_systemState_t MEXTI_enableExti(ST_MEXTI_cfg_t const *ST_ptrExtiCfgInstance)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <MEXTI_enableExti+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <MEXTI_enableExti+0x8>
    15ee:	0f 92       	push	r0
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	9b 83       	std	Y+3, r25	; 0x03
    15f6:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrExtiCfgInstance)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	09 f4       	brne	.+2      	; 0x1606 <MEXTI_enableExti+0x20>
    1604:	42 c0       	rjmp	.+132    	; 0x168a <MEXTI_enableExti+0xa4>
	{
		switch(ST_ptrExtiCfgInstance->numberOfExti)
    1606:	ea 81       	ldd	r30, Y+2	; 0x02
    1608:	fb 81       	ldd	r31, Y+3	; 0x03
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3d 83       	std	Y+5, r19	; 0x05
    1612:	2c 83       	std	Y+4, r18	; 0x04
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	91 05       	cpc	r25, r1
    161c:	c1 f0       	breq	.+48     	; 0x164e <MEXTI_enableExti+0x68>
    161e:	2c 81       	ldd	r18, Y+4	; 0x04
    1620:	3d 81       	ldd	r19, Y+5	; 0x05
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	11 f1       	breq	.+68     	; 0x166c <MEXTI_enableExti+0x86>
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	79 f5       	brne	.+94     	; 0x168e <MEXTI_enableExti+0xa8>
		{
		case MEXTI_EXTI0_INTERRUPT:
		{
			SET_BIT(GICR_REG,INT0_BIT);
    1630:	ab e5       	ldi	r26, 0x5B	; 91
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	eb e5       	ldi	r30, 0x5B	; 91
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 64       	ori	r24, 0x40	; 64
    163c:	8c 93       	st	X, r24
			extiRet = exti0SetHandlerToAction(ST_ptrExtiCfgInstance->MEXTI_ptrCallbackHandler);
    163e:	ea 81       	ldd	r30, Y+2	; 0x02
    1640:	fb 81       	ldd	r31, Y+3	; 0x03
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	0e 94 50 09 	call	0x12a0	; 0x12a0 <exti0SetHandlerToAction>
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	20 c0       	rjmp	.+64     	; 0x168e <MEXTI_enableExti+0xa8>
			break;
		}
		case MEXTI_EXTI1_INTERRUPT:
		{
			SET_BIT(GICR_REG,INT1_BIT);
    164e:	ab e5       	ldi	r26, 0x5B	; 91
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	eb e5       	ldi	r30, 0x5B	; 91
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 68       	ori	r24, 0x80	; 128
    165a:	8c 93       	st	X, r24
			extiRet = exti1SetHandlerToAction(ST_ptrExtiCfgInstance->MEXTI_ptrCallbackHandler);
    165c:	ea 81       	ldd	r30, Y+2	; 0x02
    165e:	fb 81       	ldd	r31, Y+3	; 0x03
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	0e 94 6f 09 	call	0x12de	; 0x12de <exti1SetHandlerToAction>
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	11 c0       	rjmp	.+34     	; 0x168e <MEXTI_enableExti+0xa8>
			break;
		}
		case MEXTI_EXTI2_INTERRUPT:
		{
			SET_BIT(GICR_REG,INT2_BIT);
    166c:	ab e5       	ldi	r26, 0x5B	; 91
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	eb e5       	ldi	r30, 0x5B	; 91
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 62       	ori	r24, 0x20	; 32
    1678:	8c 93       	st	X, r24
			extiRet = exti2SetHandlerToAction(ST_ptrExtiCfgInstance->MEXTI_ptrCallbackHandler);
    167a:	ea 81       	ldd	r30, Y+2	; 0x02
    167c:	fb 81       	ldd	r31, Y+3	; 0x03
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	0e 94 8e 09 	call	0x131c	; 0x131c <exti2SetHandlerToAction>
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	02 c0       	rjmp	.+4      	; 0x168e <MEXTI_enableExti+0xa8>
		}
		}
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	89 83       	std	Y+1, r24	; 0x01
	}
	return extiRet;
    168e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <MEXTI_disableExti>:

EN_MEXTI_systemState_t MEXTI_disableExti(ST_MEXTI_cfg_t const *ST_ptrExtiCfgInstance)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <MEXTI_disableExti+0x6>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <MEXTI_disableExti+0x8>
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	9b 83       	std	Y+3, r25	; 0x03
    16b0:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrExtiCfgInstance)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	81 f1       	breq	.+96     	; 0x171e <MEXTI_disableExti+0x7e>
	{
		switch(ST_ptrExtiCfgInstance->numberOfExti)
    16be:	ea 81       	ldd	r30, Y+2	; 0x02
    16c0:	fb 81       	ldd	r31, Y+3	; 0x03
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3d 83       	std	Y+5, r19	; 0x05
    16ca:	2c 83       	std	Y+4, r18	; 0x04
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	9d 81       	ldd	r25, Y+5	; 0x05
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	91 05       	cpc	r25, r1
    16d4:	91 f0       	breq	.+36     	; 0x16fa <MEXTI_disableExti+0x5a>
    16d6:	2c 81       	ldd	r18, Y+4	; 0x04
    16d8:	3d 81       	ldd	r19, Y+5	; 0x05
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	b1 f0       	breq	.+44     	; 0x170c <MEXTI_disableExti+0x6c>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	e9 f4       	brne	.+58     	; 0x1722 <MEXTI_disableExti+0x82>
		{
		case MEXTI_EXTI0_INTERRUPT:
		{
			CLR_BIT(GICR_REG,INT0_BIT);
    16e8:	ab e5       	ldi	r26, 0x5B	; 91
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	eb e5       	ldi	r30, 0x5B	; 91
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 7b       	andi	r24, 0xBF	; 191
    16f4:	8c 93       	st	X, r24
			extiRet = MEXTI_OK;
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	14 c0       	rjmp	.+40     	; 0x1722 <MEXTI_disableExti+0x82>
			break;
		}
		case MEXTI_EXTI1_INTERRUPT:
		{
			CLR_BIT(GICR_REG,INT1_BIT);
    16fa:	ab e5       	ldi	r26, 0x5B	; 91
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	eb e5       	ldi	r30, 0x5B	; 91
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 77       	andi	r24, 0x7F	; 127
    1706:	8c 93       	st	X, r24
			extiRet = MEXTI_OK;
    1708:	19 82       	std	Y+1, r1	; 0x01
    170a:	0b c0       	rjmp	.+22     	; 0x1722 <MEXTI_disableExti+0x82>
			break;
		}
		case MEXTI_EXTI2_INTERRUPT:
		{
			CLR_BIT(GICR_REG,INT2_BIT);
    170c:	ab e5       	ldi	r26, 0x5B	; 91
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	eb e5       	ldi	r30, 0x5B	; 91
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8f 7d       	andi	r24, 0xDF	; 223
    1718:	8c 93       	st	X, r24
			extiRet = MEXTI_OK;
    171a:	19 82       	std	Y+1, r1	; 0x01
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <MEXTI_disableExti+0x82>
		}
		}
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    1722:	89 81       	ldd	r24, Y+1	; 0x01
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <__vector_1>:


ISR(EXT_INT_0)
{
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	0f 92       	push	r0
    173c:	11 24       	eor	r1, r1
    173e:	2f 93       	push	r18
    1740:	3f 93       	push	r19
    1742:	4f 93       	push	r20
    1744:	5f 93       	push	r21
    1746:	6f 93       	push	r22
    1748:	7f 93       	push	r23
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	ef 93       	push	r30
    1754:	ff 93       	push	r31
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	ptr_exti0IsrAction();
    175e:	e0 91 24 01 	lds	r30, 0x0124
    1762:	f0 91 25 01 	lds	r31, 0x0125
    1766:	09 95       	icall
}
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	bf 91       	pop	r27
    1772:	af 91       	pop	r26
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	7f 91       	pop	r23
    177a:	6f 91       	pop	r22
    177c:	5f 91       	pop	r21
    177e:	4f 91       	pop	r20
    1780:	3f 91       	pop	r19
    1782:	2f 91       	pop	r18
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <__vector_2>:

ISR(EXT_INT_1)
{
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	4f 93       	push	r20
    179e:	5f 93       	push	r21
    17a0:	6f 93       	push	r22
    17a2:	7f 93       	push	r23
    17a4:	8f 93       	push	r24
    17a6:	9f 93       	push	r25
    17a8:	af 93       	push	r26
    17aa:	bf 93       	push	r27
    17ac:	ef 93       	push	r30
    17ae:	ff 93       	push	r31
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
	ptr_exti1IsrAction();
    17b8:	e0 91 26 01 	lds	r30, 0x0126
    17bc:	f0 91 27 01 	lds	r31, 0x0127
    17c0:	09 95       	icall
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <__vector_3>:

ISR(EXT_INT_2)
{
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	4f 93       	push	r20
    17f8:	5f 93       	push	r21
    17fa:	6f 93       	push	r22
    17fc:	7f 93       	push	r23
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
    1802:	af 93       	push	r26
    1804:	bf 93       	push	r27
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	ptr_exti2IsrAction();
    1812:	e0 91 28 01 	lds	r30, 0x0128
    1816:	f0 91 29 01 	lds	r31, 0x0129
    181a:	09 95       	icall
}
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <SSD_int>:
    {GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW}};

EN_SSD_systemState_t SSD_int(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	c4 54       	subi	r28, 0x44	; 68
    184c:	d0 40       	sbci	r29, 0x00	; 0
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	fe 01       	movw	r30, r28
    185a:	ed 5b       	subi	r30, 0xBD	; 189
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    186a:	fe 01       	movw	r30, r28
    186c:	ed 5b       	subi	r30, 0xBD	; 189
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	09 f4       	brne	.+2      	; 0x187a <SSD_int+0x38>
    1878:	d2 c1       	rjmp	.+932    	; 0x1c1e <SSD_int+0x3dc>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    187a:	fe 01       	movw	r30, r28
    187c:	ed 5b       	subi	r30, 0xBD	; 189
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	01 90       	ld	r0, Z+
    1882:	f0 81       	ld	r31, Z
    1884:	e0 2d       	mov	r30, r0
    1886:	80 81       	ld	r24, Z
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	09 f0       	breq	.+2      	; 0x188e <SSD_int+0x4c>
    188c:	df c0       	rjmp	.+446    	; 0x1a4c <SSD_int+0x20a>

      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
    188e:	fe 01       	movw	r30, r28
    1890:	ed 5b       	subi	r30, 0xBD	; 189
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	01 90       	ld	r0, Z+
    1896:	f0 81       	ld	r31, Z
    1898:	e0 2d       	mov	r30, r0
    189a:	97 85       	ldd	r25, Z+15	; 0x0f
    189c:	fe 01       	movw	r30, r28
    189e:	ed 5b       	subi	r30, 0xBD	; 189
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	01 90       	ld	r0, Z+
    18a4:	f0 81       	ld	r31, Z
    18a6:	e0 2d       	mov	r30, r0
    18a8:	80 89       	ldd	r24, Z+16	; 0x10
    18aa:	9b 83       	std	Y+3, r25	; 0x03
    18ac:	8c 83       	std	Y+4, r24	; 0x04
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    18b6:	fe 01       	movw	r30, r28
    18b8:	ed 5b       	subi	r30, 0xBD	; 189
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	01 90       	ld	r0, Z+
    18be:	f0 81       	ld	r31, Z
    18c0:	e0 2d       	mov	r30, r0
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	fe 01       	movw	r30, r28
    18c6:	ed 5b       	subi	r30, 0xBD	; 189
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	01 90       	ld	r0, Z+
    18cc:	f0 81       	ld	r31, Z
    18ce:	e0 2d       	mov	r30, r0
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	9f 83       	std	Y+7, r25	; 0x07
    18d4:	88 87       	std	Y+8, r24	; 0x08
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 87       	std	Y+9, r24	; 0x09
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    18de:	fe 01       	movw	r30, r28
    18e0:	ed 5b       	subi	r30, 0xBD	; 189
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	01 90       	ld	r0, Z+
    18e6:	f0 81       	ld	r31, Z
    18e8:	e0 2d       	mov	r30, r0
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	fe 01       	movw	r30, r28
    18ee:	ed 5b       	subi	r30, 0xBD	; 189
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	01 90       	ld	r0, Z+
    18f4:	f0 81       	ld	r31, Z
    18f6:	e0 2d       	mov	r30, r0
    18f8:	84 81       	ldd	r24, Z+4	; 0x04
    18fa:	9b 87       	std	Y+11, r25	; 0x0b
    18fc:	8c 87       	std	Y+12, r24	; 0x0c
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8d 87       	std	Y+13, r24	; 0x0d
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    1906:	fe 01       	movw	r30, r28
    1908:	ed 5b       	subi	r30, 0xBD	; 189
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	01 90       	ld	r0, Z+
    190e:	f0 81       	ld	r31, Z
    1910:	e0 2d       	mov	r30, r0
    1912:	95 81       	ldd	r25, Z+5	; 0x05
    1914:	fe 01       	movw	r30, r28
    1916:	ed 5b       	subi	r30, 0xBD	; 189
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	01 90       	ld	r0, Z+
    191c:	f0 81       	ld	r31, Z
    191e:	e0 2d       	mov	r30, r0
    1920:	86 81       	ldd	r24, Z+6	; 0x06
    1922:	9f 87       	std	Y+15, r25	; 0x0f
    1924:	88 8b       	std	Y+16, r24	; 0x10
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	89 8b       	std	Y+17, r24	; 0x11
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    192e:	fe 01       	movw	r30, r28
    1930:	ed 5b       	subi	r30, 0xBD	; 189
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	01 90       	ld	r0, Z+
    1936:	f0 81       	ld	r31, Z
    1938:	e0 2d       	mov	r30, r0
    193a:	97 81       	ldd	r25, Z+7	; 0x07
    193c:	fe 01       	movw	r30, r28
    193e:	ed 5b       	subi	r30, 0xBD	; 189
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	01 90       	ld	r0, Z+
    1944:	f0 81       	ld	r31, Z
    1946:	e0 2d       	mov	r30, r0
    1948:	80 85       	ldd	r24, Z+8	; 0x08
    194a:	9b 8b       	std	Y+19, r25	; 0x13
    194c:	8c 8b       	std	Y+20, r24	; 0x14
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	8d 8b       	std	Y+21, r24	; 0x15
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    1956:	fe 01       	movw	r30, r28
    1958:	ed 5b       	subi	r30, 0xBD	; 189
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	01 90       	ld	r0, Z+
    195e:	f0 81       	ld	r31, Z
    1960:	e0 2d       	mov	r30, r0
    1962:	91 85       	ldd	r25, Z+9	; 0x09
    1964:	fe 01       	movw	r30, r28
    1966:	ed 5b       	subi	r30, 0xBD	; 189
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	01 90       	ld	r0, Z+
    196c:	f0 81       	ld	r31, Z
    196e:	e0 2d       	mov	r30, r0
    1970:	82 85       	ldd	r24, Z+10	; 0x0a
    1972:	9f 8b       	std	Y+23, r25	; 0x17
    1974:	88 8f       	std	Y+24, r24	; 0x18
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	89 8f       	std	Y+25, r24	; 0x19
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    197e:	fe 01       	movw	r30, r28
    1980:	ed 5b       	subi	r30, 0xBD	; 189
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	01 90       	ld	r0, Z+
    1986:	f0 81       	ld	r31, Z
    1988:	e0 2d       	mov	r30, r0
    198a:	93 85       	ldd	r25, Z+11	; 0x0b
    198c:	fe 01       	movw	r30, r28
    198e:	ed 5b       	subi	r30, 0xBD	; 189
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	01 90       	ld	r0, Z+
    1994:	f0 81       	ld	r31, Z
    1996:	e0 2d       	mov	r30, r0
    1998:	84 85       	ldd	r24, Z+12	; 0x0c
    199a:	9b 8f       	std	Y+27, r25	; 0x1b
    199c:	8c 8f       	std	Y+28, r24	; 0x1c
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	8d 8f       	std	Y+29, r24	; 0x1d
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	8e 8f       	std	Y+30, r24	; 0x1e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    19a6:	fe 01       	movw	r30, r28
    19a8:	ed 5b       	subi	r30, 0xBD	; 189
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	01 90       	ld	r0, Z+
    19ae:	f0 81       	ld	r31, Z
    19b0:	e0 2d       	mov	r30, r0
    19b2:	95 85       	ldd	r25, Z+13	; 0x0d
    19b4:	fe 01       	movw	r30, r28
    19b6:	ed 5b       	subi	r30, 0xBD	; 189
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	01 90       	ld	r0, Z+
    19bc:	f0 81       	ld	r31, Z
    19be:	e0 2d       	mov	r30, r0
    19c0:	86 85       	ldd	r24, Z+14	; 0x0e
    19c2:	9f 8f       	std	Y+31, r25	; 0x1f
    19c4:	88 a3       	std	Y+32, r24	; 0x20
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	89 a3       	std	Y+33, r24	; 0x21
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	8a a3       	std	Y+34, r24	; 0x22

      gpioRet = GPIO_initPin(&pinCom);
    19ce:	ce 01       	movw	r24, r28
    19d0:	03 96       	adiw	r24, 0x03	; 3
    19d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    19d6:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	88 23       	and	r24, r24
    19dc:	29 f4       	brne	.+10     	; 0x19e8 <SSD_int+0x1a6>
        gpioRet = GPIO_initPin(&pinA);
    19de:	ce 01       	movw	r24, r28
    19e0:	07 96       	adiw	r24, 0x07	; 7
    19e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    19e6:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	88 23       	and	r24, r24
    19ec:	21 f4       	brne	.+8      	; 0x19f6 <SSD_int+0x1b4>
        GPIO_initPin(&pinB);
    19ee:	ce 01       	movw	r24, r28
    19f0:	0b 96       	adiw	r24, 0x0b	; 11
    19f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	88 23       	and	r24, r24
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <SSD_int+0x1c2>
        GPIO_initPin(&pinC);
    19fc:	ce 01       	movw	r24, r28
    19fe:	0f 96       	adiw	r24, 0x0f	; 15
    1a00:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	88 23       	and	r24, r24
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <SSD_int+0x1d0>
        GPIO_initPin(&pinD);
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	43 96       	adiw	r24, 0x13	; 19
    1a0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	88 23       	and	r24, r24
    1a16:	21 f4       	brne	.+8      	; 0x1a20 <SSD_int+0x1de>
        GPIO_initPin(&pinE);
    1a18:	ce 01       	movw	r24, r28
    1a1a:	47 96       	adiw	r24, 0x17	; 23
    1a1c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	88 23       	and	r24, r24
    1a24:	21 f4       	brne	.+8      	; 0x1a2e <SSD_int+0x1ec>
        GPIO_initPin(&pinF);
    1a26:	ce 01       	movw	r24, r28
    1a28:	4b 96       	adiw	r24, 0x1b	; 27
    1a2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	88 23       	and	r24, r24
    1a32:	21 f4       	brne	.+8      	; 0x1a3c <SSD_int+0x1fa>
        GPIO_initPin(&pinG);
    1a34:	ce 01       	movw	r24, r28
    1a36:	4f 96       	adiw	r24, 0x1f	; 31
    1a38:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	88 23       	and	r24, r24
    1a40:	11 f4       	brne	.+4      	; 0x1a46 <SSD_int+0x204>
        ssdRet = SSD_OK;
    1a42:	1a 82       	std	Y+2, r1	; 0x02
    1a44:	ee c0       	rjmp	.+476    	; 0x1c22 <SSD_int+0x3e0>
      } else {
        ssdRet = SSD_NOK;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	8a 83       	std	Y+2, r24	; 0x02
    1a4a:	eb c0       	rjmp	.+470    	; 0x1c22 <SSD_int+0x3e0>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	ed 5b       	subi	r30, 0xBD	; 189
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	01 90       	ld	r0, Z+
    1a54:	f0 81       	ld	r31, Z
    1a56:	e0 2d       	mov	r30, r0
    1a58:	80 81       	ld	r24, Z
    1a5a:	88 23       	and	r24, r24
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <SSD_int+0x21e>
    1a5e:	e1 c0       	rjmp	.+450    	; 0x1c22 <SSD_int+0x3e0>
      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
    1a60:	fe 01       	movw	r30, r28
    1a62:	ed 5b       	subi	r30, 0xBD	; 189
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	01 90       	ld	r0, Z+
    1a68:	f0 81       	ld	r31, Z
    1a6a:	e0 2d       	mov	r30, r0
    1a6c:	97 85       	ldd	r25, Z+15	; 0x0f
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ed 5b       	subi	r30, 0xBD	; 189
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	01 90       	ld	r0, Z+
    1a76:	f0 81       	ld	r31, Z
    1a78:	e0 2d       	mov	r30, r0
    1a7a:	80 89       	ldd	r24, Z+16	; 0x10
    1a7c:	9b a3       	std	Y+35, r25	; 0x23
    1a7e:	8c a3       	std	Y+36, r24	; 0x24
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	8d a3       	std	Y+37, r24	; 0x25
    1a84:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    1a86:	fe 01       	movw	r30, r28
    1a88:	ed 5b       	subi	r30, 0xBD	; 189
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	01 90       	ld	r0, Z+
    1a8e:	f0 81       	ld	r31, Z
    1a90:	e0 2d       	mov	r30, r0
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	fe 01       	movw	r30, r28
    1a96:	ed 5b       	subi	r30, 0xBD	; 189
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	01 90       	ld	r0, Z+
    1a9c:	f0 81       	ld	r31, Z
    1a9e:	e0 2d       	mov	r30, r0
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	9f a3       	std	Y+39, r25	; 0x27
    1aa4:	88 a7       	std	Y+40, r24	; 0x28
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 a7       	std	Y+41, r24	; 0x29
    1aaa:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    1aac:	fe 01       	movw	r30, r28
    1aae:	ed 5b       	subi	r30, 0xBD	; 189
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	f0 81       	ld	r31, Z
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	fe 01       	movw	r30, r28
    1abc:	ed 5b       	subi	r30, 0xBD	; 189
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	f0 81       	ld	r31, Z
    1ac4:	e0 2d       	mov	r30, r0
    1ac6:	84 81       	ldd	r24, Z+4	; 0x04
    1ac8:	9b a7       	std	Y+43, r25	; 0x2b
    1aca:	8c a7       	std	Y+44, r24	; 0x2c
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	8d a7       	std	Y+45, r24	; 0x2d
    1ad0:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ed 5b       	subi	r30, 0xBD	; 189
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	01 90       	ld	r0, Z+
    1ada:	f0 81       	ld	r31, Z
    1adc:	e0 2d       	mov	r30, r0
    1ade:	95 81       	ldd	r25, Z+5	; 0x05
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ed 5b       	subi	r30, 0xBD	; 189
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	01 90       	ld	r0, Z+
    1ae8:	f0 81       	ld	r31, Z
    1aea:	e0 2d       	mov	r30, r0
    1aec:	86 81       	ldd	r24, Z+6	; 0x06
    1aee:	9f a7       	std	Y+47, r25	; 0x2f
    1af0:	88 ab       	std	Y+48, r24	; 0x30
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	89 ab       	std	Y+49, r24	; 0x31
    1af6:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    1af8:	fe 01       	movw	r30, r28
    1afa:	ed 5b       	subi	r30, 0xBD	; 189
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	01 90       	ld	r0, Z+
    1b00:	f0 81       	ld	r31, Z
    1b02:	e0 2d       	mov	r30, r0
    1b04:	97 81       	ldd	r25, Z+7	; 0x07
    1b06:	fe 01       	movw	r30, r28
    1b08:	ed 5b       	subi	r30, 0xBD	; 189
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	01 90       	ld	r0, Z+
    1b0e:	f0 81       	ld	r31, Z
    1b10:	e0 2d       	mov	r30, r0
    1b12:	80 85       	ldd	r24, Z+8	; 0x08
    1b14:	9b ab       	std	Y+51, r25	; 0x33
    1b16:	8c ab       	std	Y+52, r24	; 0x34
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	8d ab       	std	Y+53, r24	; 0x35
    1b1c:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    1b1e:	fe 01       	movw	r30, r28
    1b20:	ed 5b       	subi	r30, 0xBD	; 189
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	01 90       	ld	r0, Z+
    1b26:	f0 81       	ld	r31, Z
    1b28:	e0 2d       	mov	r30, r0
    1b2a:	91 85       	ldd	r25, Z+9	; 0x09
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ed 5b       	subi	r30, 0xBD	; 189
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	01 90       	ld	r0, Z+
    1b34:	f0 81       	ld	r31, Z
    1b36:	e0 2d       	mov	r30, r0
    1b38:	82 85       	ldd	r24, Z+10	; 0x0a
    1b3a:	9f ab       	std	Y+55, r25	; 0x37
    1b3c:	88 af       	std	Y+56, r24	; 0x38
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 af       	std	Y+57, r24	; 0x39
    1b42:	1a ae       	std	Y+58, r1	; 0x3a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    1b44:	fe 01       	movw	r30, r28
    1b46:	ed 5b       	subi	r30, 0xBD	; 189
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	01 90       	ld	r0, Z+
    1b4c:	f0 81       	ld	r31, Z
    1b4e:	e0 2d       	mov	r30, r0
    1b50:	93 85       	ldd	r25, Z+11	; 0x0b
    1b52:	fe 01       	movw	r30, r28
    1b54:	ed 5b       	subi	r30, 0xBD	; 189
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	01 90       	ld	r0, Z+
    1b5a:	f0 81       	ld	r31, Z
    1b5c:	e0 2d       	mov	r30, r0
    1b5e:	84 85       	ldd	r24, Z+12	; 0x0c
    1b60:	9b af       	std	Y+59, r25	; 0x3b
    1b62:	8c af       	std	Y+60, r24	; 0x3c
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	8d af       	std	Y+61, r24	; 0x3d
    1b68:	1e ae       	std	Y+62, r1	; 0x3e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	ed 5b       	subi	r30, 0xBD	; 189
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	01 90       	ld	r0, Z+
    1b72:	f0 81       	ld	r31, Z
    1b74:	e0 2d       	mov	r30, r0
    1b76:	85 85       	ldd	r24, Z+13	; 0x0d
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ed 5b       	subi	r30, 0xBD	; 189
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	01 90       	ld	r0, Z+
    1b80:	f0 81       	ld	r31, Z
    1b82:	e0 2d       	mov	r30, r0
    1b84:	96 85       	ldd	r25, Z+14	; 0x0e
    1b86:	fe 01       	movw	r30, r28
    1b88:	ff 96       	adiw	r30, 0x3f	; 63
    1b8a:	80 83       	st	Z, r24
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ff 96       	adiw	r30, 0x3f	; 63
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	fe 01       	movw	r30, r28
    1b94:	ff 96       	adiw	r30, 0x3f	; 63
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	82 83       	std	Z+2, r24	; 0x02
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ff 96       	adiw	r30, 0x3f	; 63
    1b9e:	13 82       	std	Z+3, r1	; 0x03

      gpioRet = GPIO_initPin(&pinCom);
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	83 96       	adiw	r24, 0x23	; 35
    1ba4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1ba8:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	88 23       	and	r24, r24
    1bae:	29 f4       	brne	.+10     	; 0x1bba <SSD_int+0x378>
        gpioRet = GPIO_initPin(&pinA);
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	87 96       	adiw	r24, 0x27	; 39
    1bb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1bb8:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	88 23       	and	r24, r24
    1bbe:	21 f4       	brne	.+8      	; 0x1bc8 <SSD_int+0x386>
        GPIO_initPin(&pinB);
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	8b 96       	adiw	r24, 0x2b	; 43
    1bc4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	88 23       	and	r24, r24
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <SSD_int+0x394>
        GPIO_initPin(&pinC);
    1bce:	ce 01       	movw	r24, r28
    1bd0:	8f 96       	adiw	r24, 0x2f	; 47
    1bd2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	88 23       	and	r24, r24
    1bda:	21 f4       	brne	.+8      	; 0x1be4 <SSD_int+0x3a2>
        GPIO_initPin(&pinD);
    1bdc:	ce 01       	movw	r24, r28
    1bde:	c3 96       	adiw	r24, 0x33	; 51
    1be0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	88 23       	and	r24, r24
    1be8:	21 f4       	brne	.+8      	; 0x1bf2 <SSD_int+0x3b0>
        GPIO_initPin(&pinE);
    1bea:	ce 01       	movw	r24, r28
    1bec:	c7 96       	adiw	r24, 0x37	; 55
    1bee:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	88 23       	and	r24, r24
    1bf6:	21 f4       	brne	.+8      	; 0x1c00 <SSD_int+0x3be>
        GPIO_initPin(&pinF);
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	cb 96       	adiw	r24, 0x3b	; 59
    1bfc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	88 23       	and	r24, r24
    1c04:	21 f4       	brne	.+8      	; 0x1c0e <SSD_int+0x3cc>
        GPIO_initPin(&pinG);
    1c06:	ce 01       	movw	r24, r28
    1c08:	cf 96       	adiw	r24, 0x3f	; 63
    1c0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	88 23       	and	r24, r24
    1c12:	11 f4       	brne	.+4      	; 0x1c18 <SSD_int+0x3d6>
        ssdRet = SSD_OK;
    1c14:	1a 82       	std	Y+2, r1	; 0x02
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <SSD_int+0x3e0>
      } else {
        ssdRet = SSD_NOK;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	8a 83       	std	Y+2, r24	; 0x02
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <SSD_int+0x3e0>
      }
    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c24:	cc 5b       	subi	r28, 0xBC	; 188
    1c26:	df 4f       	sbci	r29, 0xFF	; 255
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <SSD_setNumberOnSsd>:

EN_SSD_systemState_t
SSD_setNumberOnSsd(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce,
                   EN_SSD_numbers_t valueOfNumber) {
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	ed 97       	sbiw	r28, 0x3d	; 61
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	9c af       	std	Y+60, r25	; 0x3c
    1c4e:	8b af       	std	Y+59, r24	; 0x3b
    1c50:	6d af       	std	Y+61, r22	; 0x3d
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    1c5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c5c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <SSD_setNumberOnSsd+0x2c>
    1c62:	15 c2       	rjmp	.+1066   	; 0x208e <SSD_setNumberOnSsd+0x456>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    1c64:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c66:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c68:	80 81       	ld	r24, Z
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <SSD_setNumberOnSsd+0x38>
    1c6e:	08 c1       	rjmp	.+528    	; 0x1e80 <SSD_setNumberOnSsd+0x248>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    1c70:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c72:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c78:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	9b 83       	std	Y+3, r25	; 0x03
    1c7e:	8c 83       	std	Y+4, r24	; 0x04
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	8d 83       	std	Y+5, r24	; 0x05
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    1c88:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c8a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c90:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c92:	84 81       	ldd	r24, Z+4	; 0x04
    1c94:	9f 83       	std	Y+7, r25	; 0x07
    1c96:	88 87       	std	Y+8, r24	; 0x08
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	89 87       	std	Y+9, r24	; 0x09
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    1ca0:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ca2:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ca4:	95 81       	ldd	r25, Z+5	; 0x05
    1ca6:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ca8:	fc ad       	ldd	r31, Y+60	; 0x3c
    1caa:	86 81       	ldd	r24, Z+6	; 0x06
    1cac:	9b 87       	std	Y+11, r25	; 0x0b
    1cae:	8c 87       	std	Y+12, r24	; 0x0c
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	8d 87       	std	Y+13, r24	; 0x0d
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    1cb8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cba:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cbc:	97 81       	ldd	r25, Z+7	; 0x07
    1cbe:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cc0:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cc2:	80 85       	ldd	r24, Z+8	; 0x08
    1cc4:	9f 87       	std	Y+15, r25	; 0x0f
    1cc6:	88 8b       	std	Y+16, r24	; 0x10
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	89 8b       	std	Y+17, r24	; 0x11
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    1cd0:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cd2:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cd4:	91 85       	ldd	r25, Z+9	; 0x09
    1cd6:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cd8:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cda:	82 85       	ldd	r24, Z+10	; 0x0a
    1cdc:	9b 8b       	std	Y+19, r25	; 0x13
    1cde:	8c 8b       	std	Y+20, r24	; 0x14
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	8d 8b       	std	Y+21, r24	; 0x15
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    1ce8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cea:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cec:	93 85       	ldd	r25, Z+11	; 0x0b
    1cee:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cf0:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cf2:	84 85       	ldd	r24, Z+12	; 0x0c
    1cf4:	9f 8b       	std	Y+23, r25	; 0x17
    1cf6:	88 8f       	std	Y+24, r24	; 0x18
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	89 8f       	std	Y+25, r24	; 0x19
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    1d00:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d02:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d04:	95 85       	ldd	r25, Z+13	; 0x0d
    1d06:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d08:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d0a:	86 85       	ldd	r24, Z+14	; 0x0e
    1d0c:	9b 8f       	std	Y+27, r25	; 0x1b
    1d0e:	8c 8f       	std	Y+28, r24	; 0x1c
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	8d 8f       	std	Y+29, r24	; 0x1d
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	8e 8f       	std	Y+30, r24	; 0x1e

      gpioRet =
    1d18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	c9 01       	movw	r24, r18
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	82 1b       	sub	r24, r18
    1d2e:	93 0b       	sbc	r25, r19
    1d30:	fc 01       	movw	r30, r24
    1d32:	ea 53       	subi	r30, 0x3A	; 58
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	20 81       	ld	r18, Z
    1d38:	ce 01       	movw	r24, r28
    1d3a:	03 96       	adiw	r24, 0x03	; 3
    1d3c:	62 2f       	mov	r22, r18
    1d3e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1d42:	89 83       	std	Y+1, r24	; 0x01
          GPIO_writePinLogic(&pinA, arrOfNumbersForAnodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	88 23       	and	r24, r24
    1d48:	b1 f4       	brne	.+44     	; 0x1d76 <SSD_setNumberOnSsd+0x13e>
        gpioRet = GPIO_writePinLogic(&pinB,
    1d4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	c9 01       	movw	r24, r18
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	82 1b       	sub	r24, r18
    1d60:	93 0b       	sbc	r25, r19
    1d62:	fc 01       	movw	r30, r24
    1d64:	e9 53       	subi	r30, 0x39	; 57
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	20 81       	ld	r18, Z
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	07 96       	adiw	r24, 0x07	; 7
    1d6e:	62 2f       	mov	r22, r18
    1d70:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1d74:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	88 23       	and	r24, r24
    1d7a:	b1 f4       	brne	.+44     	; 0x1da8 <SSD_setNumberOnSsd+0x170>
        gpioRet = GPIO_writePinLogic(&pinC,
    1d7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	c9 01       	movw	r24, r18
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	82 1b       	sub	r24, r18
    1d92:	93 0b       	sbc	r25, r19
    1d94:	fc 01       	movw	r30, r24
    1d96:	e8 53       	subi	r30, 0x38	; 56
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	20 81       	ld	r18, Z
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	0b 96       	adiw	r24, 0x0b	; 11
    1da0:	62 2f       	mov	r22, r18
    1da2:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1da6:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 23       	and	r24, r24
    1dac:	b1 f4       	brne	.+44     	; 0x1dda <SSD_setNumberOnSsd+0x1a2>
        gpioRet = GPIO_writePinLogic(&pinD,
    1dae:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	c9 01       	movw	r24, r18
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	82 1b       	sub	r24, r18
    1dc4:	93 0b       	sbc	r25, r19
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e7 53       	subi	r30, 0x37	; 55
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	20 81       	ld	r18, Z
    1dce:	ce 01       	movw	r24, r28
    1dd0:	0f 96       	adiw	r24, 0x0f	; 15
    1dd2:	62 2f       	mov	r22, r18
    1dd4:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1dd8:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	88 23       	and	r24, r24
    1dde:	b1 f4       	brne	.+44     	; 0x1e0c <SSD_setNumberOnSsd+0x1d4>
        gpioRet = GPIO_writePinLogic(&pinE,
    1de0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	c9 01       	movw	r24, r18
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	82 1b       	sub	r24, r18
    1df6:	93 0b       	sbc	r25, r19
    1df8:	fc 01       	movw	r30, r24
    1dfa:	e6 53       	subi	r30, 0x36	; 54
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	20 81       	ld	r18, Z
    1e00:	ce 01       	movw	r24, r28
    1e02:	43 96       	adiw	r24, 0x13	; 19
    1e04:	62 2f       	mov	r22, r18
    1e06:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1e0a:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	88 23       	and	r24, r24
    1e10:	b1 f4       	brne	.+44     	; 0x1e3e <SSD_setNumberOnSsd+0x206>
        gpioRet = GPIO_writePinLogic(&pinF,
    1e12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	c9 01       	movw	r24, r18
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	82 1b       	sub	r24, r18
    1e28:	93 0b       	sbc	r25, r19
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e5 53       	subi	r30, 0x35	; 53
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	20 81       	ld	r18, Z
    1e32:	ce 01       	movw	r24, r28
    1e34:	47 96       	adiw	r24, 0x17	; 23
    1e36:	62 2f       	mov	r22, r18
    1e38:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1e3c:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	88 23       	and	r24, r24
    1e42:	b1 f4       	brne	.+44     	; 0x1e70 <SSD_setNumberOnSsd+0x238>
        gpioRet = GPIO_writePinLogic(&pinG,
    1e44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	c9 01       	movw	r24, r18
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	82 1b       	sub	r24, r18
    1e5a:	93 0b       	sbc	r25, r19
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e4 53       	subi	r30, 0x34	; 52
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	20 81       	ld	r18, Z
    1e64:	ce 01       	movw	r24, r28
    1e66:	4b 96       	adiw	r24, 0x1b	; 27
    1e68:	62 2f       	mov	r22, r18
    1e6a:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1e6e:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	88 23       	and	r24, r24
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <SSD_setNumberOnSsd+0x242>
        ssdRet = SSD_OK;
    1e76:	1a 82       	std	Y+2, r1	; 0x02
    1e78:	0c c1       	rjmp	.+536    	; 0x2092 <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	8a 83       	std	Y+2, r24	; 0x02
    1e7e:	09 c1       	rjmp	.+530    	; 0x2092 <SSD_setNumberOnSsd+0x45a>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    1e80:	eb ad       	ldd	r30, Y+59	; 0x3b
    1e82:	fc ad       	ldd	r31, Y+60	; 0x3c
    1e84:	80 81       	ld	r24, Z
    1e86:	88 23       	and	r24, r24
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <SSD_setNumberOnSsd+0x254>
    1e8a:	03 c1       	rjmp	.+518    	; 0x2092 <SSD_setNumberOnSsd+0x45a>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    1e8c:	eb ad       	ldd	r30, Y+59	; 0x3b
    1e8e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	eb ad       	ldd	r30, Y+59	; 0x3b
    1e94:	fc ad       	ldd	r31, Y+60	; 0x3c
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	9f 8f       	std	Y+31, r25	; 0x1f
    1e9a:	88 a3       	std	Y+32, r24	; 0x20
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	89 a3       	std	Y+33, r24	; 0x21
    1ea0:	1a a2       	std	Y+34, r1	; 0x22

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    1ea2:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ea4:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1eaa:	fc ad       	ldd	r31, Y+60	; 0x3c
    1eac:	84 81       	ldd	r24, Z+4	; 0x04
    1eae:	9b a3       	std	Y+35, r25	; 0x23
    1eb0:	8c a3       	std	Y+36, r24	; 0x24
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	8d a3       	std	Y+37, r24	; 0x25
    1eb6:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    1eb8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1eba:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ebc:	95 81       	ldd	r25, Z+5	; 0x05
    1ebe:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ec0:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ec2:	86 81       	ldd	r24, Z+6	; 0x06
    1ec4:	9f a3       	std	Y+39, r25	; 0x27
    1ec6:	88 a7       	std	Y+40, r24	; 0x28
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	89 a7       	std	Y+41, r24	; 0x29
    1ecc:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    1ece:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ed0:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ed2:	97 81       	ldd	r25, Z+7	; 0x07
    1ed4:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ed6:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ed8:	80 85       	ldd	r24, Z+8	; 0x08
    1eda:	9b a7       	std	Y+43, r25	; 0x2b
    1edc:	8c a7       	std	Y+44, r24	; 0x2c
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	8d a7       	std	Y+45, r24	; 0x2d
    1ee2:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    1ee4:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ee6:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ee8:	91 85       	ldd	r25, Z+9	; 0x09
    1eea:	eb ad       	ldd	r30, Y+59	; 0x3b
    1eec:	fc ad       	ldd	r31, Y+60	; 0x3c
    1eee:	82 85       	ldd	r24, Z+10	; 0x0a
    1ef0:	9f a7       	std	Y+47, r25	; 0x2f
    1ef2:	88 ab       	std	Y+48, r24	; 0x30
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	89 ab       	std	Y+49, r24	; 0x31
    1ef8:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    1efa:	eb ad       	ldd	r30, Y+59	; 0x3b
    1efc:	fc ad       	ldd	r31, Y+60	; 0x3c
    1efe:	93 85       	ldd	r25, Z+11	; 0x0b
    1f00:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f02:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f04:	84 85       	ldd	r24, Z+12	; 0x0c
    1f06:	9b ab       	std	Y+51, r25	; 0x33
    1f08:	8c ab       	std	Y+52, r24	; 0x34
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	8d ab       	std	Y+53, r24	; 0x35
    1f0e:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    1f10:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f12:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f14:	95 85       	ldd	r25, Z+13	; 0x0d
    1f16:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f18:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f1a:	86 85       	ldd	r24, Z+14	; 0x0e
    1f1c:	9f ab       	std	Y+55, r25	; 0x37
    1f1e:	88 af       	std	Y+56, r24	; 0x38
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 af       	std	Y+57, r24	; 0x39
    1f24:	1a ae       	std	Y+58, r1	; 0x3a

      gpioRet = GPIO_writePinLogic(&pinA,
    1f26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	c9 01       	movw	r24, r18
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	82 1b       	sub	r24, r18
    1f3c:	93 0b       	sbc	r25, r19
    1f3e:	fc 01       	movw	r30, r24
    1f40:	e0 58       	subi	r30, 0x80	; 128
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	20 81       	ld	r18, Z
    1f46:	ce 01       	movw	r24, r28
    1f48:	4f 96       	adiw	r24, 0x1f	; 31
    1f4a:	62 2f       	mov	r22, r18
    1f4c:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1f50:	89 83       	std	Y+1, r24	; 0x01
                                   arrOfNumbersForCathodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	88 23       	and	r24, r24
    1f56:	b1 f4       	brne	.+44     	; 0x1f84 <SSD_setNumberOnSsd+0x34c>
        gpioRet = GPIO_writePinLogic(
    1f58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	c9 01       	movw	r24, r18
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	82 1b       	sub	r24, r18
    1f6e:	93 0b       	sbc	r25, r19
    1f70:	fc 01       	movw	r30, r24
    1f72:	ef 57       	subi	r30, 0x7F	; 127
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	20 81       	ld	r18, Z
    1f78:	ce 01       	movw	r24, r28
    1f7a:	83 96       	adiw	r24, 0x23	; 35
    1f7c:	62 2f       	mov	r22, r18
    1f7e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1f82:	89 83       	std	Y+1, r24	; 0x01
            &pinB, arrOfNumbersForCathodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	88 23       	and	r24, r24
    1f88:	b1 f4       	brne	.+44     	; 0x1fb6 <SSD_setNumberOnSsd+0x37e>
        gpioRet = GPIO_writePinLogic(
    1f8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	c9 01       	movw	r24, r18
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	82 1b       	sub	r24, r18
    1fa0:	93 0b       	sbc	r25, r19
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	ee 57       	subi	r30, 0x7E	; 126
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	20 81       	ld	r18, Z
    1faa:	ce 01       	movw	r24, r28
    1fac:	87 96       	adiw	r24, 0x27	; 39
    1fae:	62 2f       	mov	r22, r18
    1fb0:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1fb4:	89 83       	std	Y+1, r24	; 0x01
            &pinC, arrOfNumbersForCathodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	88 23       	and	r24, r24
    1fba:	b1 f4       	brne	.+44     	; 0x1fe8 <SSD_setNumberOnSsd+0x3b0>
        gpioRet = GPIO_writePinLogic(
    1fbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	82 1b       	sub	r24, r18
    1fd2:	93 0b       	sbc	r25, r19
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	ed 57       	subi	r30, 0x7D	; 125
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	20 81       	ld	r18, Z
    1fdc:	ce 01       	movw	r24, r28
    1fde:	8b 96       	adiw	r24, 0x2b	; 43
    1fe0:	62 2f       	mov	r22, r18
    1fe2:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1fe6:	89 83       	std	Y+1, r24	; 0x01
            &pinD, arrOfNumbersForCathodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	88 23       	and	r24, r24
    1fec:	b1 f4       	brne	.+44     	; 0x201a <SSD_setNumberOnSsd+0x3e2>
        gpioRet = GPIO_writePinLogic(
    1fee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	c9 01       	movw	r24, r18
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	82 1b       	sub	r24, r18
    2004:	93 0b       	sbc	r25, r19
    2006:	fc 01       	movw	r30, r24
    2008:	ec 57       	subi	r30, 0x7C	; 124
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	20 81       	ld	r18, Z
    200e:	ce 01       	movw	r24, r28
    2010:	8f 96       	adiw	r24, 0x2f	; 47
    2012:	62 2f       	mov	r22, r18
    2014:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    2018:	89 83       	std	Y+1, r24	; 0x01
            &pinE, arrOfNumbersForCathodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	88 23       	and	r24, r24
    201e:	b1 f4       	brne	.+44     	; 0x204c <SSD_setNumberOnSsd+0x414>
        gpioRet = GPIO_writePinLogic(
    2020:	8d ad       	ldd	r24, Y+61	; 0x3d
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	c9 01       	movw	r24, r18
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	82 1b       	sub	r24, r18
    2036:	93 0b       	sbc	r25, r19
    2038:	fc 01       	movw	r30, r24
    203a:	eb 57       	subi	r30, 0x7B	; 123
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	20 81       	ld	r18, Z
    2040:	ce 01       	movw	r24, r28
    2042:	c3 96       	adiw	r24, 0x33	; 51
    2044:	62 2f       	mov	r22, r18
    2046:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    204a:	89 83       	std	Y+1, r24	; 0x01
            &pinF, arrOfNumbersForCathodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	88 23       	and	r24, r24
    2050:	b1 f4       	brne	.+44     	; 0x207e <SSD_setNumberOnSsd+0x446>
        gpioRet = GPIO_writePinLogic(
    2052:	8d ad       	ldd	r24, Y+61	; 0x3d
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	c9 01       	movw	r24, r18
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	82 1b       	sub	r24, r18
    2068:	93 0b       	sbc	r25, r19
    206a:	fc 01       	movw	r30, r24
    206c:	ea 57       	subi	r30, 0x7A	; 122
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	20 81       	ld	r18, Z
    2072:	ce 01       	movw	r24, r28
    2074:	c7 96       	adiw	r24, 0x37	; 55
    2076:	62 2f       	mov	r22, r18
    2078:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    207c:	89 83       	std	Y+1, r24	; 0x01
            &pinG, arrOfNumbersForCathodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	88 23       	and	r24, r24
    2082:	11 f4       	brne	.+4      	; 0x2088 <SSD_setNumberOnSsd+0x450>
        ssdRet = SSD_OK;
    2084:	1a 82       	std	Y+2, r1	; 0x02
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	8a 83       	std	Y+2, r24	; 0x02
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <SSD_setNumberOnSsd+0x45a>

    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	8a 83       	std	Y+2, r24	; 0x02
  }

  return ssdRet;
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2094:	ed 96       	adiw	r28, 0x3d	; 61
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <SSD_enableDot>:

EN_SSD_systemState_t SSD_enableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	2c 97       	sbiw	r28, 0x0c	; 12
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	9c 87       	std	Y+12, r25	; 0x0c
    20bc:	8b 87       	std	Y+11, r24	; 0x0b

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    20c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	d9 f1       	breq	.+118    	; 0x2144 <SSD_enableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    20ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    20d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    20d2:	80 81       	ld	r24, Z
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	c9 f4       	brne	.+50     	; 0x210a <SSD_enableDot+0x64>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    20d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    20da:	fc 85       	ldd	r31, Y+12	; 0x0c
    20dc:	91 89       	ldd	r25, Z+17	; 0x11
    20de:	eb 85       	ldd	r30, Y+11	; 0x0b
    20e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    20e2:	82 89       	ldd	r24, Z+18	; 0x12
    20e4:	9b 83       	std	Y+3, r25	; 0x03
    20e6:	8c 83       	std	Y+4, r24	; 0x04
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	8e 83       	std	Y+6, r24	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
    20f0:	ce 01       	movw	r24, r28
    20f2:	03 96       	adiw	r24, 0x03	; 3
    20f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    20f8:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	88 23       	and	r24, r24
    20fe:	11 f4       	brne	.+4      	; 0x2104 <SSD_enableDot+0x5e>
        ssdRet = SSD_OK;
    2100:	1a 82       	std	Y+2, r1	; 0x02
    2102:	22 c0       	rjmp	.+68     	; 0x2148 <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	1f c0       	rjmp	.+62     	; 0x2148 <SSD_enableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    210a:	eb 85       	ldd	r30, Y+11	; 0x0b
    210c:	fc 85       	ldd	r31, Y+12	; 0x0c
    210e:	80 81       	ld	r24, Z
    2110:	88 23       	and	r24, r24
    2112:	d1 f4       	brne	.+52     	; 0x2148 <SSD_enableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    2114:	eb 85       	ldd	r30, Y+11	; 0x0b
    2116:	fc 85       	ldd	r31, Y+12	; 0x0c
    2118:	91 89       	ldd	r25, Z+17	; 0x11
    211a:	eb 85       	ldd	r30, Y+11	; 0x0b
    211c:	fc 85       	ldd	r31, Y+12	; 0x0c
    211e:	82 89       	ldd	r24, Z+18	; 0x12
    2120:	9f 83       	std	Y+7, r25	; 0x07
    2122:	88 87       	std	Y+8, r24	; 0x08
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	89 87       	std	Y+9, r24	; 0x09
    2128:	1a 86       	std	Y+10, r1	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    212a:	ce 01       	movw	r24, r28
    212c:	07 96       	adiw	r24, 0x07	; 7
    212e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2132:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	88 23       	and	r24, r24
    2138:	11 f4       	brne	.+4      	; 0x213e <SSD_enableDot+0x98>
        ssdRet = SSD_OK;
    213a:	1a 82       	std	Y+2, r1	; 0x02
    213c:	05 c0       	rjmp	.+10     	; 0x2148 <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	8a 83       	std	Y+2, r24	; 0x02
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <SSD_enableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
}
    214a:	2c 96       	adiw	r28, 0x0c	; 12
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <SSD_disableDot>:

EN_SSD_systemState_t SSD_disableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	2c 97       	sbiw	r28, 0x0c	; 12
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	9c 87       	std	Y+12, r25	; 0x0c
    2172:	8b 87       	std	Y+11, r24	; 0x0b
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    217c:	8b 85       	ldd	r24, Y+11	; 0x0b
    217e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	d9 f1       	breq	.+118    	; 0x21fa <SSD_disableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    2184:	eb 85       	ldd	r30, Y+11	; 0x0b
    2186:	fc 85       	ldd	r31, Y+12	; 0x0c
    2188:	80 81       	ld	r24, Z
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	c1 f4       	brne	.+48     	; 0x21be <SSD_disableDot+0x62>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    218e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2190:	fc 85       	ldd	r31, Y+12	; 0x0c
    2192:	91 89       	ldd	r25, Z+17	; 0x11
    2194:	eb 85       	ldd	r30, Y+11	; 0x0b
    2196:	fc 85       	ldd	r31, Y+12	; 0x0c
    2198:	82 89       	ldd	r24, Z+18	; 0x12
    219a:	9b 83       	std	Y+3, r25	; 0x03
    219c:	8c 83       	std	Y+4, r24	; 0x04
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	1e 82       	std	Y+6, r1	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
    21a4:	ce 01       	movw	r24, r28
    21a6:	03 96       	adiw	r24, 0x03	; 3
    21a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    21ac:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	88 23       	and	r24, r24
    21b2:	11 f4       	brne	.+4      	; 0x21b8 <SSD_disableDot+0x5c>
        ssdRet = SSD_OK;
    21b4:	1a 82       	std	Y+2, r1	; 0x02
    21b6:	23 c0       	rjmp	.+70     	; 0x21fe <SSD_disableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	8a 83       	std	Y+2, r24	; 0x02
    21bc:	20 c0       	rjmp	.+64     	; 0x21fe <SSD_disableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    21be:	eb 85       	ldd	r30, Y+11	; 0x0b
    21c0:	fc 85       	ldd	r31, Y+12	; 0x0c
    21c2:	80 81       	ld	r24, Z
    21c4:	88 23       	and	r24, r24
    21c6:	d9 f4       	brne	.+54     	; 0x21fe <SSD_disableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    21c8:	eb 85       	ldd	r30, Y+11	; 0x0b
    21ca:	fc 85       	ldd	r31, Y+12	; 0x0c
    21cc:	91 89       	ldd	r25, Z+17	; 0x11
    21ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    21d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    21d2:	82 89       	ldd	r24, Z+18	; 0x12
    21d4:	9f 83       	std	Y+7, r25	; 0x07
    21d6:	88 87       	std	Y+8, r24	; 0x08
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	89 87       	std	Y+9, r24	; 0x09
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	8a 87       	std	Y+10, r24	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    21e0:	ce 01       	movw	r24, r28
    21e2:	07 96       	adiw	r24, 0x07	; 7
    21e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    21e8:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	88 23       	and	r24, r24
    21ee:	11 f4       	brne	.+4      	; 0x21f4 <SSD_disableDot+0x98>
        ssdRet = SSD_OK;
    21f0:	1a 82       	std	Y+2, r1	; 0x02
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <SSD_disableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	8a 83       	std	Y+2, r24	; 0x02
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <SSD_disableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2200:	2c 96       	adiw	r28, 0x0c	; 12
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <SSD_dualInit>:

//////////////////////////////////////////////////////////////////////////////////////////////

EN_SSD_systemState_t
SSD_dualInit(ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance) {
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	a0 97       	sbiw	r28, 0x20	; 32
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	98 a3       	std	Y+32, r25	; 0x20
    2228:	8f 8f       	std	Y+31, r24	; 0x1f
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    2232:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2234:	98 a1       	ldd	r25, Y+32	; 0x20
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	09 f4       	brne	.+2      	; 0x223c <SSD_dualInit+0x2a>
    223a:	99 c0       	rjmp	.+306    	; 0x236e <SSD_dualInit+0x15c>

    ST_GPIO_cfg_t pinA = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinAPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinAPortName};
    223c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    223e:	f8 a1       	ldd	r31, Y+32	; 0x20
    2240:	92 81       	ldd	r25, Z+2	; 0x02
    2242:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2244:	f8 a1       	ldd	r31, Y+32	; 0x20
    2246:	83 81       	ldd	r24, Z+3	; 0x03
    2248:	1b 82       	std	Y+3, r1	; 0x03
    224a:	1c 82       	std	Y+4, r1	; 0x04
    224c:	1d 82       	std	Y+5, r1	; 0x05
    224e:	1e 82       	std	Y+6, r1	; 0x06
    2250:	9b 83       	std	Y+3, r25	; 0x03
    2252:	8c 83       	std	Y+4, r24	; 0x04
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	8d 83       	std	Y+5, r24	; 0x05

    ST_GPIO_cfg_t pinB = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinBPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinBPortName};
    2258:	ef 8d       	ldd	r30, Y+31	; 0x1f
    225a:	f8 a1       	ldd	r31, Y+32	; 0x20
    225c:	94 81       	ldd	r25, Z+4	; 0x04
    225e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2260:	f8 a1       	ldd	r31, Y+32	; 0x20
    2262:	85 81       	ldd	r24, Z+5	; 0x05
    2264:	1f 82       	std	Y+7, r1	; 0x07
    2266:	18 86       	std	Y+8, r1	; 0x08
    2268:	19 86       	std	Y+9, r1	; 0x09
    226a:	1a 86       	std	Y+10, r1	; 0x0a
    226c:	9f 83       	std	Y+7, r25	; 0x07
    226e:	88 87       	std	Y+8, r24	; 0x08
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 87       	std	Y+9, r24	; 0x09

    ST_GPIO_cfg_t pinC = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinCPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinCPortName};
    2274:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2276:	f8 a1       	ldd	r31, Y+32	; 0x20
    2278:	96 81       	ldd	r25, Z+6	; 0x06
    227a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    227c:	f8 a1       	ldd	r31, Y+32	; 0x20
    227e:	87 81       	ldd	r24, Z+7	; 0x07
    2280:	1b 86       	std	Y+11, r1	; 0x0b
    2282:	1c 86       	std	Y+12, r1	; 0x0c
    2284:	1d 86       	std	Y+13, r1	; 0x0d
    2286:	1e 86       	std	Y+14, r1	; 0x0e
    2288:	9b 87       	std	Y+11, r25	; 0x0b
    228a:	8c 87       	std	Y+12, r24	; 0x0c
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	8d 87       	std	Y+13, r24	; 0x0d

    ST_GPIO_cfg_t pinD = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinDPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinDPortName};
    2290:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2292:	f8 a1       	ldd	r31, Y+32	; 0x20
    2294:	90 85       	ldd	r25, Z+8	; 0x08
    2296:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2298:	f8 a1       	ldd	r31, Y+32	; 0x20
    229a:	81 85       	ldd	r24, Z+9	; 0x09
    229c:	1f 86       	std	Y+15, r1	; 0x0f
    229e:	18 8a       	std	Y+16, r1	; 0x10
    22a0:	19 8a       	std	Y+17, r1	; 0x11
    22a2:	1a 8a       	std	Y+18, r1	; 0x12
    22a4:	9f 87       	std	Y+15, r25	; 0x0f
    22a6:	88 8b       	std	Y+16, r24	; 0x10
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	89 8b       	std	Y+17, r24	; 0x11

    ST_GPIO_cfg_t pinE = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinEPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinEPortName};
    22ac:	ef 8d       	ldd	r30, Y+31	; 0x1f
    22ae:	f8 a1       	ldd	r31, Y+32	; 0x20
    22b0:	92 85       	ldd	r25, Z+10	; 0x0a
    22b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    22b4:	f8 a1       	ldd	r31, Y+32	; 0x20
    22b6:	83 85       	ldd	r24, Z+11	; 0x0b
    22b8:	1b 8a       	std	Y+19, r1	; 0x13
    22ba:	1c 8a       	std	Y+20, r1	; 0x14
    22bc:	1d 8a       	std	Y+21, r1	; 0x15
    22be:	1e 8a       	std	Y+22, r1	; 0x16
    22c0:	9b 8b       	std	Y+19, r25	; 0x13
    22c2:	8c 8b       	std	Y+20, r24	; 0x14
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	8d 8b       	std	Y+21, r24	; 0x15

    ST_GPIO_cfg_t pinF = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinFPortName};
    22c8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    22ca:	f8 a1       	ldd	r31, Y+32	; 0x20
    22cc:	94 85       	ldd	r25, Z+12	; 0x0c
    22ce:	ef 8d       	ldd	r30, Y+31	; 0x1f
    22d0:	f8 a1       	ldd	r31, Y+32	; 0x20
    22d2:	85 85       	ldd	r24, Z+13	; 0x0d
    22d4:	1f 8a       	std	Y+23, r1	; 0x17
    22d6:	18 8e       	std	Y+24, r1	; 0x18
    22d8:	19 8e       	std	Y+25, r1	; 0x19
    22da:	1a 8e       	std	Y+26, r1	; 0x1a
    22dc:	9f 8b       	std	Y+23, r25	; 0x17
    22de:	88 8f       	std	Y+24, r24	; 0x18
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	89 8f       	std	Y+25, r24	; 0x19

    ST_GPIO_cfg_t pinG = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinGPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinGPortName};
    22e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    22e6:	f8 a1       	ldd	r31, Y+32	; 0x20
    22e8:	96 85       	ldd	r25, Z+14	; 0x0e
    22ea:	ef 8d       	ldd	r30, Y+31	; 0x1f
    22ec:	f8 a1       	ldd	r31, Y+32	; 0x20
    22ee:	87 85       	ldd	r24, Z+15	; 0x0f
    22f0:	1b 8e       	std	Y+27, r1	; 0x1b
    22f2:	1c 8e       	std	Y+28, r1	; 0x1c
    22f4:	1d 8e       	std	Y+29, r1	; 0x1d
    22f6:	1e 8e       	std	Y+30, r1	; 0x1e
    22f8:	9b 8f       	std	Y+27, r25	; 0x1b
    22fa:	8c 8f       	std	Y+28, r24	; 0x1c
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	8d 8f       	std	Y+29, r24	; 0x1d

    gpioRet = GPIO_initPin(&pinA);
    2300:	ce 01       	movw	r24, r28
    2302:	03 96       	adiw	r24, 0x03	; 3
    2304:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2308:	89 83       	std	Y+1, r24	; 0x01
    if (gpioRet == GPIO_OK) {
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	88 23       	and	r24, r24
    230e:	21 f4       	brne	.+8      	; 0x2318 <SSD_dualInit+0x106>
      GPIO_initPin(&pinB);
    2310:	ce 01       	movw	r24, r28
    2312:	07 96       	adiw	r24, 0x07	; 7
    2314:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	88 23       	and	r24, r24
    231c:	21 f4       	brne	.+8      	; 0x2326 <SSD_dualInit+0x114>
      GPIO_initPin(&pinC);
    231e:	ce 01       	movw	r24, r28
    2320:	0b 96       	adiw	r24, 0x0b	; 11
    2322:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	88 23       	and	r24, r24
    232a:	21 f4       	brne	.+8      	; 0x2334 <SSD_dualInit+0x122>
      GPIO_initPin(&pinD);
    232c:	ce 01       	movw	r24, r28
    232e:	0f 96       	adiw	r24, 0x0f	; 15
    2330:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	88 23       	and	r24, r24
    2338:	21 f4       	brne	.+8      	; 0x2342 <SSD_dualInit+0x130>
      GPIO_initPin(&pinE);
    233a:	ce 01       	movw	r24, r28
    233c:	43 96       	adiw	r24, 0x13	; 19
    233e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	88 23       	and	r24, r24
    2346:	21 f4       	brne	.+8      	; 0x2350 <SSD_dualInit+0x13e>
      GPIO_initPin(&pinF);
    2348:	ce 01       	movw	r24, r28
    234a:	47 96       	adiw	r24, 0x17	; 23
    234c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	88 23       	and	r24, r24
    2354:	21 f4       	brne	.+8      	; 0x235e <SSD_dualInit+0x14c>
      GPIO_initPin(&pinG);
    2356:	ce 01       	movw	r24, r28
    2358:	4b 96       	adiw	r24, 0x1b	; 27
    235a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }

    if (gpioRet == GPIO_OK) {
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	88 23       	and	r24, r24
    2362:	11 f4       	brne	.+4      	; 0x2368 <SSD_dualInit+0x156>
      ssdRet = SSD_OK;
    2364:	1a 82       	std	Y+2, r1	; 0x02
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <SSD_dualInit+0x160>
    } else {
      ssdRet = SSD_NOK;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <SSD_dualInit+0x160>
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2374:	a0 96       	adiw	r28, 0x20	; 32
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <SSD_dualSetCurrentSegmentComPin>:

EN_SSD_systemState_t SSD_dualSetCurrentSegmentComPin(
    ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance) {
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	a5 97       	sbiw	r28, 0x25	; 37
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	9c a3       	std	Y+36, r25	; 0x24
    239c:	8b a3       	std	Y+35, r24	; 0x23

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    23a6:	8b a1       	ldd	r24, Y+35	; 0x23
    23a8:	9c a1       	ldd	r25, Y+36	; 0x24
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <SSD_dualSetCurrentSegmentComPin+0x2a>
    23ae:	f7 c0       	rjmp	.+494    	; 0x259e <SSD_dualSetCurrentSegmentComPin+0x218>
    if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_FIRST) {
    23b0:	eb a1       	ldd	r30, Y+35	; 0x23
    23b2:	fc a1       	ldd	r31, Y+36	; 0x24
    23b4:	86 89       	ldd	r24, Z+22	; 0x16
    23b6:	88 23       	and	r24, r24
    23b8:	09 f0       	breq	.+2      	; 0x23bc <SSD_dualSetCurrentSegmentComPin+0x36>
    23ba:	76 c0       	rjmp	.+236    	; 0x24a8 <SSD_dualSetCurrentSegmentComPin+0x122>
      if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType == SSD_ANODE_COMMON) {
    23bc:	eb a1       	ldd	r30, Y+35	; 0x23
    23be:	fc a1       	ldd	r31, Y+36	; 0x24
    23c0:	80 81       	ld	r24, Z
    23c2:	81 30       	cpi	r24, 0x01	; 1
    23c4:	c9 f4       	brne	.+50     	; 0x23f8 <SSD_dualSetCurrentSegmentComPin+0x72>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    23c6:	eb a1       	ldd	r30, Y+35	; 0x23
    23c8:	fc a1       	ldd	r31, Y+36	; 0x24
    23ca:	92 89       	ldd	r25, Z+18	; 0x12
    23cc:	eb a1       	ldd	r30, Y+35	; 0x23
    23ce:	fc a1       	ldd	r31, Y+36	; 0x24
    23d0:	83 89       	ldd	r24, Z+19	; 0x13
    23d2:	9b 83       	std	Y+3, r25	; 0x03
    23d4:	8c 83       	std	Y+4, r24	; 0x04
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	8e 83       	std	Y+6, r24	; 0x06

        gpioRet = GPIO_initPin(&pinFirstCom);
    23de:	ce 01       	movw	r24, r28
    23e0:	03 96       	adiw	r24, 0x03	; 3
    23e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    23e6:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	88 23       	and	r24, r24
    23ec:	11 f4       	brne	.+4      	; 0x23f2 <SSD_dualSetCurrentSegmentComPin+0x6c>
          ssdRet = SSD_OK;
    23ee:	1a 82       	std	Y+2, r1	; 0x02
    23f0:	1f c0       	rjmp	.+62     	; 0x2430 <SSD_dualSetCurrentSegmentComPin+0xaa>
        } else {
          ssdRet = SSD_NOK;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	8a 83       	std	Y+2, r24	; 0x02
    23f6:	1c c0       	rjmp	.+56     	; 0x2430 <SSD_dualSetCurrentSegmentComPin+0xaa>
        }
      } else if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType ==
    23f8:	eb a1       	ldd	r30, Y+35	; 0x23
    23fa:	fc a1       	ldd	r31, Y+36	; 0x24
    23fc:	80 81       	ld	r24, Z
    23fe:	88 23       	and	r24, r24
    2400:	b9 f4       	brne	.+46     	; 0x2430 <SSD_dualSetCurrentSegmentComPin+0xaa>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    2402:	eb a1       	ldd	r30, Y+35	; 0x23
    2404:	fc a1       	ldd	r31, Y+36	; 0x24
    2406:	92 89       	ldd	r25, Z+18	; 0x12
    2408:	eb a1       	ldd	r30, Y+35	; 0x23
    240a:	fc a1       	ldd	r31, Y+36	; 0x24
    240c:	83 89       	ldd	r24, Z+19	; 0x13
    240e:	9f 83       	std	Y+7, r25	; 0x07
    2410:	88 87       	std	Y+8, r24	; 0x08
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	89 87       	std	Y+9, r24	; 0x09
    2416:	1a 86       	std	Y+10, r1	; 0x0a

        gpioRet = GPIO_initPin(&pinFirstCom);
    2418:	ce 01       	movw	r24, r28
    241a:	07 96       	adiw	r24, 0x07	; 7
    241c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2420:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	88 23       	and	r24, r24
    2426:	11 f4       	brne	.+4      	; 0x242c <SSD_dualSetCurrentSegmentComPin+0xa6>
          ssdRet = SSD_OK;
    2428:	1a 82       	std	Y+2, r1	; 0x02
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <SSD_dualSetCurrentSegmentComPin+0xaa>
        } else {
          ssdRet = SSD_NOK;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	8a 83       	std	Y+2, r24	; 0x02

      } else {
        /*Do Nothing*/
      }

      if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType == SSD_ANODE_COMMON) {
    2430:	eb a1       	ldd	r30, Y+35	; 0x23
    2432:	fc a1       	ldd	r31, Y+36	; 0x24
    2434:	81 81       	ldd	r24, Z+1	; 0x01
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	c1 f4       	brne	.+48     	; 0x246a <SSD_dualSetCurrentSegmentComPin+0xe4>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    243a:	eb a1       	ldd	r30, Y+35	; 0x23
    243c:	fc a1       	ldd	r31, Y+36	; 0x24
    243e:	94 89       	ldd	r25, Z+20	; 0x14
    2440:	eb a1       	ldd	r30, Y+35	; 0x23
    2442:	fc a1       	ldd	r31, Y+36	; 0x24
    2444:	85 89       	ldd	r24, Z+21	; 0x15
    2446:	9b 87       	std	Y+11, r25	; 0x0b
    2448:	8c 87       	std	Y+12, r24	; 0x0c
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	8d 87       	std	Y+13, r24	; 0x0d
    244e:	1e 86       	std	Y+14, r1	; 0x0e

        gpioRet = GPIO_initPin(&pinSecondCom);
    2450:	ce 01       	movw	r24, r28
    2452:	0b 96       	adiw	r24, 0x0b	; 11
    2454:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2458:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	88 23       	and	r24, r24
    245e:	11 f4       	brne	.+4      	; 0x2464 <SSD_dualSetCurrentSegmentComPin+0xde>
          ssdRet = SSD_OK;
    2460:	1a 82       	std	Y+2, r1	; 0x02
    2462:	9f c0       	rjmp	.+318    	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	8a 83       	std	Y+2, r24	; 0x02
    2468:	9c c0       	rjmp	.+312    	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
        }

      } else if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType ==
    246a:	eb a1       	ldd	r30, Y+35	; 0x23
    246c:	fc a1       	ldd	r31, Y+36	; 0x24
    246e:	81 81       	ldd	r24, Z+1	; 0x01
    2470:	88 23       	and	r24, r24
    2472:	09 f0       	breq	.+2      	; 0x2476 <SSD_dualSetCurrentSegmentComPin+0xf0>
    2474:	96 c0       	rjmp	.+300    	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    2476:	eb a1       	ldd	r30, Y+35	; 0x23
    2478:	fc a1       	ldd	r31, Y+36	; 0x24
    247a:	94 89       	ldd	r25, Z+20	; 0x14
    247c:	eb a1       	ldd	r30, Y+35	; 0x23
    247e:	fc a1       	ldd	r31, Y+36	; 0x24
    2480:	85 89       	ldd	r24, Z+21	; 0x15
    2482:	9f 87       	std	Y+15, r25	; 0x0f
    2484:	88 8b       	std	Y+16, r24	; 0x10
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	89 8b       	std	Y+17, r24	; 0x11
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	8a 8b       	std	Y+18, r24	; 0x12

        gpioRet = GPIO_initPin(&pinSecondCom);
    248e:	ce 01       	movw	r24, r28
    2490:	0f 96       	adiw	r24, 0x0f	; 15
    2492:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2496:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	88 23       	and	r24, r24
    249c:	11 f4       	brne	.+4      	; 0x24a2 <SSD_dualSetCurrentSegmentComPin+0x11c>
          ssdRet = SSD_OK;
    249e:	1a 82       	std	Y+2, r1	; 0x02
    24a0:	80 c0       	rjmp	.+256    	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	7d c0       	rjmp	.+250    	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
        }
      } else {
        /*Do Nothing*/
      }

    } else if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_SECOND) {
    24a8:	eb a1       	ldd	r30, Y+35	; 0x23
    24aa:	fc a1       	ldd	r31, Y+36	; 0x24
    24ac:	86 89       	ldd	r24, Z+22	; 0x16
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <SSD_dualSetCurrentSegmentComPin+0x12e>
    24b2:	77 c0       	rjmp	.+238    	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
      if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType == SSD_ANODE_COMMON) {
    24b4:	eb a1       	ldd	r30, Y+35	; 0x23
    24b6:	fc a1       	ldd	r31, Y+36	; 0x24
    24b8:	81 81       	ldd	r24, Z+1	; 0x01
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	c9 f4       	brne	.+50     	; 0x24f0 <SSD_dualSetCurrentSegmentComPin+0x16a>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    24be:	eb a1       	ldd	r30, Y+35	; 0x23
    24c0:	fc a1       	ldd	r31, Y+36	; 0x24
    24c2:	94 89       	ldd	r25, Z+20	; 0x14
    24c4:	eb a1       	ldd	r30, Y+35	; 0x23
    24c6:	fc a1       	ldd	r31, Y+36	; 0x24
    24c8:	85 89       	ldd	r24, Z+21	; 0x15
    24ca:	9b 8b       	std	Y+19, r25	; 0x13
    24cc:	8c 8b       	std	Y+20, r24	; 0x14
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	8d 8b       	std	Y+21, r24	; 0x15
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	8e 8b       	std	Y+22, r24	; 0x16

        gpioRet = GPIO_initPin(&pinSecondCom);
    24d6:	ce 01       	movw	r24, r28
    24d8:	43 96       	adiw	r24, 0x13	; 19
    24da:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    24de:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	88 23       	and	r24, r24
    24e4:	11 f4       	brne	.+4      	; 0x24ea <SSD_dualSetCurrentSegmentComPin+0x164>
          ssdRet = SSD_OK;
    24e6:	1a 82       	std	Y+2, r1	; 0x02
    24e8:	1f c0       	rjmp	.+62     	; 0x2528 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        } else {
          ssdRet = SSD_NOK;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	8a 83       	std	Y+2, r24	; 0x02
    24ee:	1c c0       	rjmp	.+56     	; 0x2528 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        }

      } else if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType ==
    24f0:	eb a1       	ldd	r30, Y+35	; 0x23
    24f2:	fc a1       	ldd	r31, Y+36	; 0x24
    24f4:	81 81       	ldd	r24, Z+1	; 0x01
    24f6:	88 23       	and	r24, r24
    24f8:	b9 f4       	brne	.+46     	; 0x2528 <SSD_dualSetCurrentSegmentComPin+0x1a2>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    24fa:	eb a1       	ldd	r30, Y+35	; 0x23
    24fc:	fc a1       	ldd	r31, Y+36	; 0x24
    24fe:	94 89       	ldd	r25, Z+20	; 0x14
    2500:	eb a1       	ldd	r30, Y+35	; 0x23
    2502:	fc a1       	ldd	r31, Y+36	; 0x24
    2504:	85 89       	ldd	r24, Z+21	; 0x15
    2506:	9f 8b       	std	Y+23, r25	; 0x17
    2508:	88 8f       	std	Y+24, r24	; 0x18
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	89 8f       	std	Y+25, r24	; 0x19
    250e:	1a 8e       	std	Y+26, r1	; 0x1a

        gpioRet = GPIO_initPin(&pinSecondCom);
    2510:	ce 01       	movw	r24, r28
    2512:	47 96       	adiw	r24, 0x17	; 23
    2514:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2518:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	88 23       	and	r24, r24
    251e:	11 f4       	brne	.+4      	; 0x2524 <SSD_dualSetCurrentSegmentComPin+0x19e>
          ssdRet = SSD_OK;
    2520:	1a 82       	std	Y+2, r1	; 0x02
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        } else {
          ssdRet = SSD_NOK;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8a 83       	std	Y+2, r24	; 0x02
        }
      } else {
        /*Do Nothing*/
      }
      if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType == SSD_ANODE_COMMON) {
    2528:	eb a1       	ldd	r30, Y+35	; 0x23
    252a:	fc a1       	ldd	r31, Y+36	; 0x24
    252c:	80 81       	ld	r24, Z
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	c1 f4       	brne	.+48     	; 0x2562 <SSD_dualSetCurrentSegmentComPin+0x1dc>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    2532:	eb a1       	ldd	r30, Y+35	; 0x23
    2534:	fc a1       	ldd	r31, Y+36	; 0x24
    2536:	92 89       	ldd	r25, Z+18	; 0x12
    2538:	eb a1       	ldd	r30, Y+35	; 0x23
    253a:	fc a1       	ldd	r31, Y+36	; 0x24
    253c:	83 89       	ldd	r24, Z+19	; 0x13
    253e:	9b 8f       	std	Y+27, r25	; 0x1b
    2540:	8c 8f       	std	Y+28, r24	; 0x1c
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	8d 8f       	std	Y+29, r24	; 0x1d
    2546:	1e 8e       	std	Y+30, r1	; 0x1e

        gpioRet = GPIO_initPin(&pinFirstCom);
    2548:	ce 01       	movw	r24, r28
    254a:	4b 96       	adiw	r24, 0x1b	; 27
    254c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2550:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	88 23       	and	r24, r24
    2556:	11 f4       	brne	.+4      	; 0x255c <SSD_dualSetCurrentSegmentComPin+0x1d6>
          ssdRet = SSD_OK;
    2558:	1a 82       	std	Y+2, r1	; 0x02
    255a:	23 c0       	rjmp	.+70     	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	8a 83       	std	Y+2, r24	; 0x02
    2560:	20 c0       	rjmp	.+64     	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
        }
      } else if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType ==
    2562:	eb a1       	ldd	r30, Y+35	; 0x23
    2564:	fc a1       	ldd	r31, Y+36	; 0x24
    2566:	80 81       	ld	r24, Z
    2568:	88 23       	and	r24, r24
    256a:	d9 f4       	brne	.+54     	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    256c:	eb a1       	ldd	r30, Y+35	; 0x23
    256e:	fc a1       	ldd	r31, Y+36	; 0x24
    2570:	92 89       	ldd	r25, Z+18	; 0x12
    2572:	eb a1       	ldd	r30, Y+35	; 0x23
    2574:	fc a1       	ldd	r31, Y+36	; 0x24
    2576:	83 89       	ldd	r24, Z+19	; 0x13
    2578:	9f 8f       	std	Y+31, r25	; 0x1f
    257a:	88 a3       	std	Y+32, r24	; 0x20
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	89 a3       	std	Y+33, r24	; 0x21
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	8a a3       	std	Y+34, r24	; 0x22

        gpioRet = GPIO_initPin(&pinFirstCom);
    2584:	ce 01       	movw	r24, r28
    2586:	4f 96       	adiw	r24, 0x1f	; 31
    2588:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    258c:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	88 23       	and	r24, r24
    2592:	11 f4       	brne	.+4      	; 0x2598 <SSD_dualSetCurrentSegmentComPin+0x212>
          ssdRet = SSD_OK;
    2594:	1a 82       	std	Y+2, r1	; 0x02
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	8a 83       	std	Y+2, r24	; 0x02
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <SSD_dualSetCurrentSegmentComPin+0x21c>
      }
    } else {
    }

  } else {
    ssdRet = SSD_NULL_PTR;
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	8a 83       	std	Y+2, r24	; 0x02
  }
}
    25a2:	a5 96       	adiw	r28, 0x25	; 37
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <SSD_dualSwitchSegment>:

EN_SSD_systemState_t
SSD_dualSwitchSegment(ST_SSD_DualCfg_t *ST_ptrSsdDualCfgInstance,
                      EN_SSD_index_t indexOfTheDisplay) {
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <SSD_dualSwitchSegment+0x6>
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <SSD_dualSwitchSegment+0x8>
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	9b 83       	std	Y+3, r25	; 0x03
    25c2:	8a 83       	std	Y+2, r24	; 0x02
    25c4:	6c 83       	std	Y+4, r22	; 0x04

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	31 f0       	breq	.+12     	; 0x25de <SSD_dualSwitchSegment+0x2a>
    ST_ptrSsdDualCfgInstance->ssdCurrentDisplay = indexOfTheDisplay;
    25d2:	ea 81       	ldd	r30, Y+2	; 0x02
    25d4:	fb 81       	ldd	r31, Y+3	; 0x03
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	86 8b       	std	Z+22, r24	; 0x16
    ssdRet = SSD_OK;
    25da:	19 82       	std	Y+1, r1	; 0x01
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <SSD_dualSwitchSegment+0x2e>
  } else {
    ssdRet = SSD_NULL_PTR;
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	89 83       	std	Y+1, r24	; 0x01
  }
  return ssdRet;
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <SSD_dualSetNumberOnSsd>:

EN_SSD_systemState_t
SSD_dualSetNumberOnSsd(ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance,
                       EN_SSD_numbers_t valueOfNumber) {
    25f2:	cf 92       	push	r12
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	6c 97       	sbiw	r28, 0x1c	; 28
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	99 8f       	std	Y+25, r25	; 0x19
    2614:	88 8f       	std	Y+24, r24	; 0x18
    2616:	6a 8f       	std	Y+26, r22	; 0x1a

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	8c 83       	std	Y+4, r24	; 0x04
  EN_SSD_typeOfCommon_t currentCommonType;
  EN_GPIO_mcuPins_t currentCommonPin;
  EN_GPIO_mcuPorts_t currentCommonPort;

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    261c:	88 8d       	ldd	r24, Y+24	; 0x18
    261e:	99 8d       	ldd	r25, Y+25	; 0x19
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	09 f4       	brne	.+2      	; 0x2626 <SSD_dualSetNumberOnSsd+0x34>
    2624:	73 c0       	rjmp	.+230    	; 0x270c <SSD_dualSetNumberOnSsd+0x11a>
    if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_FIRST) {
    2626:	e8 8d       	ldd	r30, Y+24	; 0x18
    2628:	f9 8d       	ldd	r31, Y+25	; 0x19
    262a:	86 89       	ldd	r24, Z+22	; 0x16
    262c:	88 23       	and	r24, r24
    262e:	69 f4       	brne	.+26     	; 0x264a <SSD_dualSetNumberOnSsd+0x58>

      currentCommonType = ST_ptrSsdDualCfgInstance->ssdFirstCommonType;
    2630:	e8 8d       	ldd	r30, Y+24	; 0x18
    2632:	f9 8d       	ldd	r31, Y+25	; 0x19
    2634:	80 81       	ld	r24, Z
    2636:	8b 83       	std	Y+3, r24	; 0x03
      currentCommonPort = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName;
    2638:	e8 8d       	ldd	r30, Y+24	; 0x18
    263a:	f9 8d       	ldd	r31, Y+25	; 0x19
    263c:	82 89       	ldd	r24, Z+18	; 0x12
    263e:	89 83       	std	Y+1, r24	; 0x01
      currentCommonPin = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber;
    2640:	e8 8d       	ldd	r30, Y+24	; 0x18
    2642:	f9 8d       	ldd	r31, Y+25	; 0x19
    2644:	83 89       	ldd	r24, Z+19	; 0x13
    2646:	8a 83       	std	Y+2, r24	; 0x02
    2648:	11 c0       	rjmp	.+34     	; 0x266c <SSD_dualSetNumberOnSsd+0x7a>

    } else if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_SECOND) {
    264a:	e8 8d       	ldd	r30, Y+24	; 0x18
    264c:	f9 8d       	ldd	r31, Y+25	; 0x19
    264e:	86 89       	ldd	r24, Z+22	; 0x16
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	61 f4       	brne	.+24     	; 0x266c <SSD_dualSetNumberOnSsd+0x7a>

      currentCommonType = ST_ptrSsdDualCfgInstance->ssdSecondCommonType;
    2654:	e8 8d       	ldd	r30, Y+24	; 0x18
    2656:	f9 8d       	ldd	r31, Y+25	; 0x19
    2658:	81 81       	ldd	r24, Z+1	; 0x01
    265a:	8b 83       	std	Y+3, r24	; 0x03
      currentCommonPort = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName;
    265c:	e8 8d       	ldd	r30, Y+24	; 0x18
    265e:	f9 8d       	ldd	r31, Y+25	; 0x19
    2660:	84 89       	ldd	r24, Z+20	; 0x14
    2662:	89 83       	std	Y+1, r24	; 0x01
      currentCommonPin = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber;
    2664:	e8 8d       	ldd	r30, Y+24	; 0x18
    2666:	f9 8d       	ldd	r31, Y+25	; 0x19
    2668:	85 89       	ldd	r24, Z+21	; 0x15
    266a:	8a 83       	std	Y+2, r24	; 0x02
        .ssdPinDPortName = ST_ptrSsdDualCfgInstance->ssdPinDPortName,
        .ssdPinEPortName = ST_ptrSsdDualCfgInstance->ssdPinEPortName,
        .ssdPinFPortName = ST_ptrSsdDualCfgInstance->ssdPinFPortName,
        .ssdPinGPortName = ST_ptrSsdDualCfgInstance->ssdPinGPortName,
        .ssdPinComPortName = currentCommonPort,
        .ssdPinComPinNumber = currentCommonPin};
    266c:	e8 8d       	ldd	r30, Y+24	; 0x18
    266e:	f9 8d       	ldd	r31, Y+25	; 0x19
    2670:	92 81       	ldd	r25, Z+2	; 0x02
    2672:	e8 8d       	ldd	r30, Y+24	; 0x18
    2674:	f9 8d       	ldd	r31, Y+25	; 0x19
    2676:	23 81       	ldd	r18, Z+3	; 0x03
    2678:	e8 8d       	ldd	r30, Y+24	; 0x18
    267a:	f9 8d       	ldd	r31, Y+25	; 0x19
    267c:	34 81       	ldd	r19, Z+4	; 0x04
    267e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2680:	f9 8d       	ldd	r31, Y+25	; 0x19
    2682:	45 81       	ldd	r20, Z+5	; 0x05
    2684:	e8 8d       	ldd	r30, Y+24	; 0x18
    2686:	f9 8d       	ldd	r31, Y+25	; 0x19
    2688:	56 81       	ldd	r21, Z+6	; 0x06
    268a:	e8 8d       	ldd	r30, Y+24	; 0x18
    268c:	f9 8d       	ldd	r31, Y+25	; 0x19
    268e:	67 81       	ldd	r22, Z+7	; 0x07
    2690:	e8 8d       	ldd	r30, Y+24	; 0x18
    2692:	f9 8d       	ldd	r31, Y+25	; 0x19
    2694:	70 85       	ldd	r23, Z+8	; 0x08
    2696:	e8 8d       	ldd	r30, Y+24	; 0x18
    2698:	f9 8d       	ldd	r31, Y+25	; 0x19
    269a:	a1 85       	ldd	r26, Z+9	; 0x09
    269c:	e8 8d       	ldd	r30, Y+24	; 0x18
    269e:	f9 8d       	ldd	r31, Y+25	; 0x19
    26a0:	b2 85       	ldd	r27, Z+10	; 0x0a
    26a2:	e8 8d       	ldd	r30, Y+24	; 0x18
    26a4:	f9 8d       	ldd	r31, Y+25	; 0x19
    26a6:	13 85       	ldd	r17, Z+11	; 0x0b
    26a8:	e8 8d       	ldd	r30, Y+24	; 0x18
    26aa:	f9 8d       	ldd	r31, Y+25	; 0x19
    26ac:	04 85       	ldd	r16, Z+12	; 0x0c
    26ae:	e8 8d       	ldd	r30, Y+24	; 0x18
    26b0:	f9 8d       	ldd	r31, Y+25	; 0x19
    26b2:	f5 84       	ldd	r15, Z+13	; 0x0d
    26b4:	e8 8d       	ldd	r30, Y+24	; 0x18
    26b6:	f9 8d       	ldd	r31, Y+25	; 0x19
    26b8:	e6 84       	ldd	r14, Z+14	; 0x0e
    26ba:	e8 8d       	ldd	r30, Y+24	; 0x18
    26bc:	f9 8d       	ldd	r31, Y+25	; 0x19
    26be:	d7 84       	ldd	r13, Z+15	; 0x0f
    26c0:	83 e1       	ldi	r24, 0x13	; 19
    26c2:	fe 01       	movw	r30, r28
    26c4:	35 96       	adiw	r30, 0x05	; 5
    26c6:	fc 8f       	std	Y+28, r31	; 0x1c
    26c8:	eb 8f       	std	Y+27, r30	; 0x1b
    26ca:	eb 8d       	ldd	r30, Y+27	; 0x1b
    26cc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    26ce:	c8 2e       	mov	r12, r24
    26d0:	11 92       	st	Z+, r1
    26d2:	ca 94       	dec	r12
    26d4:	e9 f7       	brne	.-6      	; 0x26d0 <SSD_dualSetNumberOnSsd+0xde>
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	2f 83       	std	Y+7, r18	; 0x07
    26de:	38 87       	std	Y+8, r19	; 0x08
    26e0:	49 87       	std	Y+9, r20	; 0x09
    26e2:	5a 87       	std	Y+10, r21	; 0x0a
    26e4:	6b 87       	std	Y+11, r22	; 0x0b
    26e6:	7c 87       	std	Y+12, r23	; 0x0c
    26e8:	ad 87       	std	Y+13, r26	; 0x0d
    26ea:	be 87       	std	Y+14, r27	; 0x0e
    26ec:	1f 87       	std	Y+15, r17	; 0x0f
    26ee:	08 8b       	std	Y+16, r16	; 0x10
    26f0:	f9 8a       	std	Y+17, r15	; 0x11
    26f2:	ea 8a       	std	Y+18, r14	; 0x12
    26f4:	db 8a       	std	Y+19, r13	; 0x13
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	8c 8b       	std	Y+20, r24	; 0x14
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	8d 8b       	std	Y+21, r24	; 0x15

    ssdRet = SSD_setNumberOnSsd(&curruntSsdPins, valueOfNumber);
    26fe:	ce 01       	movw	r24, r28
    2700:	05 96       	adiw	r24, 0x05	; 5
    2702:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2704:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <SSD_setNumberOnSsd>
    2708:	8c 83       	std	Y+4, r24	; 0x04
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <SSD_dualSetNumberOnSsd+0x11e>
  } else {
    ssdRet = SSD_NOK;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	8c 83       	std	Y+4, r24	; 0x04
  }
  return ssdRet;
    2710:	8c 81       	ldd	r24, Y+4	; 0x04
    2712:	6c 96       	adiw	r28, 0x1c	; 28
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	df 90       	pop	r13
    272c:	cf 90       	pop	r12
    272e:	08 95       	ret

00002730 <HPB_init>:

#include "pb_interface.h"


EN_HPB_systeamState_t HPB_init(ST_HPB_cfg_t const *ST_ptrPbCfgInstance)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	28 97       	sbiw	r28, 0x08	; 8
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	98 87       	std	Y+8, r25	; 0x08
    2746:	8f 83       	std	Y+7, r24	; 0x07
	EN_HPB_systeamState_t pbRet = HPB_OK;
    2748:	1a 82       	std	Y+2, r1	; 0x02
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrPbCfgInstance)
    274e:	8f 81       	ldd	r24, Y+7	; 0x07
    2750:	98 85       	ldd	r25, Y+8	; 0x08
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	d1 f0       	breq	.+52     	; 0x278a <HPB_init+0x5a>
		{
				.portName = ST_ptrPbCfgInstance->pbPort,
				.pinNumber = ST_ptrPbCfgInstance->PbPin,
				.pinDirection = GPIO_INPUT,
				.logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrPbCfgInstance->PbInternalResistor
		};
    2756:	ef 81       	ldd	r30, Y+7	; 0x07
    2758:	f8 85       	ldd	r31, Y+8	; 0x08
    275a:	81 81       	ldd	r24, Z+1	; 0x01
    275c:	ef 81       	ldd	r30, Y+7	; 0x07
    275e:	f8 85       	ldd	r31, Y+8	; 0x08
    2760:	90 81       	ld	r25, Z
    2762:	ef 81       	ldd	r30, Y+7	; 0x07
    2764:	f8 85       	ldd	r31, Y+8	; 0x08
    2766:	22 81       	ldd	r18, Z+2	; 0x02
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	9c 83       	std	Y+4, r25	; 0x04
    276c:	1d 82       	std	Y+5, r1	; 0x05
    276e:	2e 83       	std	Y+6, r18	; 0x06

		gpioRet = GPIO_initPin(&pbPinCfg);
    2770:	ce 01       	movw	r24, r28
    2772:	03 96       	adiw	r24, 0x03	; 3
    2774:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2778:	89 83       	std	Y+1, r24	; 0x01

		if(gpioRet == GPIO_OK) pbRet = HPB_OK; else pbRet = HPB_NOK;
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	88 23       	and	r24, r24
    277e:	11 f4       	brne	.+4      	; 0x2784 <HPB_init+0x54>
    2780:	1a 82       	std	Y+2, r1	; 0x02
    2782:	05 c0       	rjmp	.+10     	; 0x278e <HPB_init+0x5e>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	8a 83       	std	Y+2, r24	; 0x02
    2788:	02 c0       	rjmp	.+4      	; 0x278e <HPB_init+0x5e>
	}
	else
	{
		pbRet = HPB_PTR_NULL;
    278a:	82 e0       	ldi	r24, 0x02	; 2
    278c:	8a 83       	std	Y+2, r24	; 0x02
	}

	return pbRet;
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2790:	28 96       	adiw	r28, 0x08	; 8
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <HPB_getBtnStates>:

EN_HPB_systeamState_t HPB_getBtnStates(ST_HPB_cfg_t const *ST_ptrPbCfgInstance , EN_HPB_state_t *ptrOfStatesRet)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	2c 97       	sbiw	r28, 0x0c	; 12
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	9a 87       	std	Y+10, r25	; 0x0a
    27b8:	89 87       	std	Y+9, r24	; 0x09
    27ba:	7c 87       	std	Y+12, r23	; 0x0c
    27bc:	6b 87       	std	Y+11, r22	; 0x0b
	EN_HPB_systeamState_t pbRet = HPB_OK;
    27be:	1b 82       	std	Y+3, r1	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	8a 83       	std	Y+2, r24	; 0x02

	if( (PTR_NULL != ST_ptrPbCfgInstance) && (PTR_NULL != ptrOfStatesRet))
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	09 f4       	brne	.+2      	; 0x27ce <HPB_getBtnStates+0x2c>
    27cc:	5c c0       	rjmp	.+184    	; 0x2886 <HPB_getBtnStates+0xe4>
    27ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    27d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <HPB_getBtnStates+0x36>
    27d6:	57 c0       	rjmp	.+174    	; 0x2886 <HPB_getBtnStates+0xe4>
	{
		ST_GPIO_cfg_t pbPinCfg =
		{
				.portName = ST_ptrPbCfgInstance->pbPort,
				.pinNumber = ST_ptrPbCfgInstance->PbPin,
		};
    27d8:	e9 85       	ldd	r30, Y+9	; 0x09
    27da:	fa 85       	ldd	r31, Y+10	; 0x0a
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	e9 85       	ldd	r30, Y+9	; 0x09
    27e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    27e2:	80 81       	ld	r24, Z
    27e4:	1c 82       	std	Y+4, r1	; 0x04
    27e6:	1d 82       	std	Y+5, r1	; 0x05
    27e8:	1e 82       	std	Y+6, r1	; 0x06
    27ea:	1f 82       	std	Y+7, r1	; 0x07
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8d 83       	std	Y+5, r24	; 0x05

		EN_GPIO_pinLogic_t pbPinLogic;
		EN_GPIO_pinLogic_t tempForDebouncing;
		gpioRet = GPIO_readPinLogic(&pbPinCfg,&pbPinLogic);
    27f0:	ce 01       	movw	r24, r28
    27f2:	04 96       	adiw	r24, 0x04	; 4
    27f4:	9e 01       	movw	r18, r28
    27f6:	28 5f       	subi	r18, 0xF8	; 248
    27f8:	3f 4f       	sbci	r19, 0xFF	; 255
    27fa:	b9 01       	movw	r22, r18
    27fc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <GPIO_readPinLogic>
    2800:	8a 83       	std	Y+2, r24	; 0x02
		tempForDebouncing = pbPinLogic;
    2802:	88 85       	ldd	r24, Y+8	; 0x08
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	09 c0       	rjmp	.+18     	; 0x281a <HPB_getBtnStates+0x78>
		while(tempForDebouncing == pbPinLogic)
		{
			gpioRet = GPIO_readPinLogic(&pbPinCfg,&pbPinLogic);
    2808:	ce 01       	movw	r24, r28
    280a:	04 96       	adiw	r24, 0x04	; 4
    280c:	9e 01       	movw	r18, r28
    280e:	28 5f       	subi	r18, 0xF8	; 248
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	b9 01       	movw	r22, r18
    2814:	0e 94 da 06 	call	0xdb4	; 0xdb4 <GPIO_readPinLogic>
    2818:	8a 83       	std	Y+2, r24	; 0x02

		EN_GPIO_pinLogic_t pbPinLogic;
		EN_GPIO_pinLogic_t tempForDebouncing;
		gpioRet = GPIO_readPinLogic(&pbPinCfg,&pbPinLogic);
		tempForDebouncing = pbPinLogic;
		while(tempForDebouncing == pbPinLogic)
    281a:	98 85       	ldd	r25, Y+8	; 0x08
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	89 17       	cp	r24, r25
    2820:	99 f3       	breq	.-26     	; 0x2808 <HPB_getBtnStates+0x66>
		{
			gpioRet = GPIO_readPinLogic(&pbPinCfg,&pbPinLogic);
		}
		if(gpioRet == GPIO_OK)
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	88 23       	and	r24, r24
    2826:	61 f5       	brne	.+88     	; 0x2880 <HPB_getBtnStates+0xde>
		{
			if(ST_ptrPbCfgInstance->PbInternalResistor == HPB_PULL_UP)
    2828:	e9 85       	ldd	r30, Y+9	; 0x09
    282a:	fa 85       	ldd	r31, Y+10	; 0x0a
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	81 30       	cpi	r24, 0x01	; 1
    2830:	89 f4       	brne	.+34     	; 0x2854 <HPB_getBtnStates+0xb2>
			{
				if(pbPinLogic == GPIO_LOW)
    2832:	88 85       	ldd	r24, Y+8	; 0x08
    2834:	88 23       	and	r24, r24
    2836:	29 f4       	brne	.+10     	; 0x2842 <HPB_getBtnStates+0xa0>
				{
					*ptrOfStatesRet = HPB_STATE_PRESSED;
    2838:	eb 85       	ldd	r30, Y+11	; 0x0b
    283a:	fc 85       	ldd	r31, Y+12	; 0x0c
    283c:	10 82       	st	Z, r1
					pbRet = HPB_OK;
    283e:	1b 82       	std	Y+3, r1	; 0x03
    2840:	24 c0       	rjmp	.+72     	; 0x288a <HPB_getBtnStates+0xe8>
				}
				else if(pbPinLogic == GPIO_HIGH)
    2842:	88 85       	ldd	r24, Y+8	; 0x08
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	09 f5       	brne	.+66     	; 0x288a <HPB_getBtnStates+0xe8>
				{
					*ptrOfStatesRet = HPB_STATE_RELEASED;
    2848:	eb 85       	ldd	r30, Y+11	; 0x0b
    284a:	fc 85       	ldd	r31, Y+12	; 0x0c
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	80 83       	st	Z, r24
					pbRet = HPB_OK;
    2850:	1b 82       	std	Y+3, r1	; 0x03
    2852:	1b c0       	rjmp	.+54     	; 0x288a <HPB_getBtnStates+0xe8>
				}
				else /* Do Nothing */;

			}
			else if(ST_ptrPbCfgInstance->PbInternalResistor == HPB_PULL_DOWN)
    2854:	e9 85       	ldd	r30, Y+9	; 0x09
    2856:	fa 85       	ldd	r31, Y+10	; 0x0a
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	88 23       	and	r24, r24
    285c:	b1 f4       	brne	.+44     	; 0x288a <HPB_getBtnStates+0xe8>
			{
				if(pbPinLogic == GPIO_HIGH)
    285e:	88 85       	ldd	r24, Y+8	; 0x08
    2860:	81 30       	cpi	r24, 0x01	; 1
    2862:	29 f4       	brne	.+10     	; 0x286e <HPB_getBtnStates+0xcc>
				{
					*ptrOfStatesRet = HPB_STATE_PRESSED;
    2864:	eb 85       	ldd	r30, Y+11	; 0x0b
    2866:	fc 85       	ldd	r31, Y+12	; 0x0c
    2868:	10 82       	st	Z, r1
					pbRet = HPB_OK;
    286a:	1b 82       	std	Y+3, r1	; 0x03
    286c:	0e c0       	rjmp	.+28     	; 0x288a <HPB_getBtnStates+0xe8>
				}
				else if(pbPinLogic == GPIO_LOW)
    286e:	88 85       	ldd	r24, Y+8	; 0x08
    2870:	88 23       	and	r24, r24
    2872:	59 f4       	brne	.+22     	; 0x288a <HPB_getBtnStates+0xe8>
				{
					*ptrOfStatesRet = HPB_STATE_RELEASED;
    2874:	eb 85       	ldd	r30, Y+11	; 0x0b
    2876:	fc 85       	ldd	r31, Y+12	; 0x0c
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 83       	st	Z, r24
					pbRet = HPB_OK;
    287c:	1b 82       	std	Y+3, r1	; 0x03
    287e:	05 c0       	rjmp	.+10     	; 0x288a <HPB_getBtnStates+0xe8>
				else /* Do Nothing */;
			}else /* Do Nothing */;
		}
		else
		{
			pbRet = HPB_NOK;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	8b 83       	std	Y+3, r24	; 0x03
    2884:	02 c0       	rjmp	.+4      	; 0x288a <HPB_getBtnStates+0xe8>
		}

	}
	else
	{
		pbRet = HPB_PTR_NULL;
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	8b 83       	std	Y+3, r24	; 0x03
	}

	return pbRet;
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    288c:	2c 96       	adiw	r28, 0x0c	; 12
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <LED_init>:
// Date          : 1 Aug 2023 */ GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "../../HAL/led/led_interface.h"

EN_LED_systemStates_t LED_init(ST_LED_cfg_t const *ST_ptrLedInstance) {
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	28 97       	sbiw	r28, 0x08	; 8
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	98 87       	std	Y+8, r25	; 0x08
    28b4:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    28be:	8f 81       	ldd	r24, Y+7	; 0x07
    28c0:	98 85       	ldd	r25, Y+8	; 0x08
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	d9 f0       	breq	.+54     	; 0x28fc <LED_init+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    28c6:	ef 81       	ldd	r30, Y+7	; 0x07
    28c8:	f8 85       	ldd	r31, Y+8	; 0x08
    28ca:	81 81       	ldd	r24, Z+1	; 0x01
    28cc:	ef 81       	ldd	r30, Y+7	; 0x07
    28ce:	f8 85       	ldd	r31, Y+8	; 0x08
    28d0:	92 81       	ldd	r25, Z+2	; 0x02
    28d2:	ef 81       	ldd	r30, Y+7	; 0x07
    28d4:	f8 85       	ldd	r31, Y+8	; 0x08
    28d6:	20 81       	ld	r18, Z
    28d8:	8b 83       	std	Y+3, r24	; 0x03
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_initPin(&copyOfLedInstance);
    28e2:	ce 01       	movw	r24, r28
    28e4:	03 96       	adiw	r24, 0x03	; 3
    28e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    28ea:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	88 23       	and	r24, r24
    28f0:	11 f4       	brne	.+4      	; 0x28f6 <LED_init+0x58>
      ledRet = LED_OK;
    28f2:	1a 82       	std	Y+2, r1	; 0x02
    28f4:	05 c0       	rjmp	.+10     	; 0x2900 <LED_init+0x62>
    } else {
      ledRet = LED_NOK;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	8a 83       	std	Y+2, r24	; 0x02
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <LED_init+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    28fc:	82 e0       	ldi	r24, 0x02	; 2
    28fe:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2902:	28 96       	adiw	r28, 0x08	; 8
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <LED_turnOn>:
EN_LED_systemStates_t LED_turnOn(ST_LED_cfg_t const *ST_ptrLedInstance) {
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	28 97       	sbiw	r28, 0x08	; 8
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	98 87       	std	Y+8, r25	; 0x08
    292a:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    2934:	8f 81       	ldd	r24, Y+7	; 0x07
    2936:	98 85       	ldd	r25, Y+8	; 0x08
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	e1 f0       	breq	.+56     	; 0x2974 <LED_turnOn+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    293c:	ef 81       	ldd	r30, Y+7	; 0x07
    293e:	f8 85       	ldd	r31, Y+8	; 0x08
    2940:	81 81       	ldd	r24, Z+1	; 0x01
    2942:	ef 81       	ldd	r30, Y+7	; 0x07
    2944:	f8 85       	ldd	r31, Y+8	; 0x08
    2946:	92 81       	ldd	r25, Z+2	; 0x02
    2948:	ef 81       	ldd	r30, Y+7	; 0x07
    294a:	f8 85       	ldd	r31, Y+8	; 0x08
    294c:	20 81       	ld	r18, Z
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	9c 83       	std	Y+4, r25	; 0x04
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	8d 83       	std	Y+5, r24	; 0x05
    2956:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_HIGH);
    2958:	ce 01       	movw	r24, r28
    295a:	03 96       	adiw	r24, 0x03	; 3
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    2962:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	88 23       	and	r24, r24
    2968:	11 f4       	brne	.+4      	; 0x296e <LED_turnOn+0x5a>
      ledRet = LED_OK;
    296a:	1a 82       	std	Y+2, r1	; 0x02
    296c:	05 c0       	rjmp	.+10     	; 0x2978 <LED_turnOn+0x64>
    } else {
      ledRet = LED_NOK;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	8a 83       	std	Y+2, r24	; 0x02
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <LED_turnOn+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
}
    297a:	28 96       	adiw	r28, 0x08	; 8
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <LED_turnOff>:
EN_LED_systemStates_t LED_turnOff(ST_LED_cfg_t const *ST_ptrLedInstance) {
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	28 97       	sbiw	r28, 0x08	; 8
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	98 87       	std	Y+8, r25	; 0x08
    29a2:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    29ac:	8f 81       	ldd	r24, Y+7	; 0x07
    29ae:	98 85       	ldd	r25, Y+8	; 0x08
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	e1 f0       	breq	.+56     	; 0x29ec <LED_turnOff+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    29b4:	ef 81       	ldd	r30, Y+7	; 0x07
    29b6:	f8 85       	ldd	r31, Y+8	; 0x08
    29b8:	81 81       	ldd	r24, Z+1	; 0x01
    29ba:	ef 81       	ldd	r30, Y+7	; 0x07
    29bc:	f8 85       	ldd	r31, Y+8	; 0x08
    29be:	92 81       	ldd	r25, Z+2	; 0x02
    29c0:	ef 81       	ldd	r30, Y+7	; 0x07
    29c2:	f8 85       	ldd	r31, Y+8	; 0x08
    29c4:	20 81       	ld	r18, Z
    29c6:	8b 83       	std	Y+3, r24	; 0x03
    29c8:	9c 83       	std	Y+4, r25	; 0x04
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_LOW);
    29d0:	ce 01       	movw	r24, r28
    29d2:	03 96       	adiw	r24, 0x03	; 3
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    29da:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	88 23       	and	r24, r24
    29e0:	11 f4       	brne	.+4      	; 0x29e6 <LED_turnOff+0x5a>
      ledRet = LED_OK;
    29e2:	1a 82       	std	Y+2, r1	; 0x02
    29e4:	05 c0       	rjmp	.+10     	; 0x29f0 <LED_turnOff+0x64>
    } else {
      ledRet = LED_NOK;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	8a 83       	std	Y+2, r24	; 0x02
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <LED_turnOff+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    29f2:	28 96       	adiw	r28, 0x08	; 8
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <LED_toggle>:
EN_LED_systemStates_t LED_toggle(ST_LED_cfg_t const *ST_ptrLedInstance) {
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	28 97       	sbiw	r28, 0x08	; 8
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	98 87       	std	Y+8, r25	; 0x08
    2a1a:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    2a24:	8f 81       	ldd	r24, Y+7	; 0x07
    2a26:	98 85       	ldd	r25, Y+8	; 0x08
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	d9 f0       	breq	.+54     	; 0x2a62 <LED_toggle+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    2a2c:	ef 81       	ldd	r30, Y+7	; 0x07
    2a2e:	f8 85       	ldd	r31, Y+8	; 0x08
    2a30:	81 81       	ldd	r24, Z+1	; 0x01
    2a32:	ef 81       	ldd	r30, Y+7	; 0x07
    2a34:	f8 85       	ldd	r31, Y+8	; 0x08
    2a36:	92 81       	ldd	r25, Z+2	; 0x02
    2a38:	ef 81       	ldd	r30, Y+7	; 0x07
    2a3a:	f8 85       	ldd	r31, Y+8	; 0x08
    2a3c:	20 81       	ld	r18, Z
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	8d 83       	std	Y+5, r24	; 0x05
    2a46:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_togglePinLogic(&copyOfLedInstance);
    2a48:	ce 01       	movw	r24, r28
    2a4a:	03 96       	adiw	r24, 0x03	; 3
    2a4c:	0e 94 18 07 	call	0xe30	; 0xe30 <GPIO_togglePinLogic>
    2a50:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	88 23       	and	r24, r24
    2a56:	11 f4       	brne	.+4      	; 0x2a5c <LED_toggle+0x58>
      ledRet = LED_OK;
    2a58:	1a 82       	std	Y+2, r1	; 0x02
    2a5a:	05 c0       	rjmp	.+10     	; 0x2a66 <LED_toggle+0x62>
    } else {
      ledRet = LED_NOK;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	8a 83       	std	Y+2, r24	; 0x02
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <LED_toggle+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    2a62:	82 e0       	ldi	r24, 0x02	; 2
    2a64:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	28 96       	adiw	r28, 0x08	; 8
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <HLCD_init>:

#include "lcd_interface.h"


EN_HLCD_systemState_t HLCD_init(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    2a7a:	0f 93       	push	r16
    2a7c:	1f 93       	push	r17
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	ce 59       	subi	r28, 0x9E	; 158
    2a88:	d0 40       	sbci	r29, 0x00	; 0
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	fe 01       	movw	r30, r28
    2a96:	e3 56       	subi	r30, 0x63	; 99
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e0 58       	subi	r30, 0x80	; 128
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e1 58       	subi	r30, 0x81	; 129
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e3 56       	subi	r30, 0x63	; 99
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <HLCD_init+0x48>
    2ac0:	18 c7       	rjmp	.+3632   	; 0x38f2 <HLCD_init+0xe78>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e3 56       	subi	r30, 0x63	; 99
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	01 90       	ld	r0, Z+
    2aca:	f0 81       	ld	r31, Z
    2acc:	e0 2d       	mov	r30, r0
    2ace:	81 81       	ldd	r24, Z+1	; 0x01
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e3 56       	subi	r30, 0x63	; 99
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	01 90       	ld	r0, Z+
    2ad8:	f0 81       	ld	r31, Z
    2ada:	e0 2d       	mov	r30, r0
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	fe 01       	movw	r30, r28
    2ae0:	ef 57       	subi	r30, 0x7F	; 127
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 83       	st	Z, r24
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ef 57       	subi	r30, 0x7F	; 127
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	fe 01       	movw	r30, r28
    2af0:	ef 57       	subi	r30, 0x7F	; 127
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	82 83       	std	Z+2, r24	; 0x02
    2af8:	fe 01       	movw	r30, r28
    2afa:	ef 57       	subi	r30, 0x7F	; 127
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    2b00:	fe 01       	movw	r30, r28
    2b02:	e3 56       	subi	r30, 0x63	; 99
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	01 90       	ld	r0, Z+
    2b08:	f0 81       	ld	r31, Z
    2b0a:	e0 2d       	mov	r30, r0
    2b0c:	81 81       	ldd	r24, Z+1	; 0x01
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e3 56       	subi	r30, 0x63	; 99
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	01 90       	ld	r0, Z+
    2b16:	f0 81       	ld	r31, Z
    2b18:	e0 2d       	mov	r30, r0
    2b1a:	94 81       	ldd	r25, Z+4	; 0x04
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	eb 57       	subi	r30, 0x7B	; 123
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 83       	st	Z, r24
    2b24:	fe 01       	movw	r30, r28
    2b26:	eb 57       	subi	r30, 0x7B	; 123
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	eb 57       	subi	r30, 0x7B	; 123
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	82 83       	std	Z+2, r24	; 0x02
    2b36:	fe 01       	movw	r30, r28
    2b38:	eb 57       	subi	r30, 0x7B	; 123
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e3 56       	subi	r30, 0x63	; 99
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	01 90       	ld	r0, Z+
    2b46:	f0 81       	ld	r31, Z
    2b48:	e0 2d       	mov	r30, r0
    2b4a:	81 81       	ldd	r24, Z+1	; 0x01
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e3 56       	subi	r30, 0x63	; 99
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	01 90       	ld	r0, Z+
    2b54:	f0 81       	ld	r31, Z
    2b56:	e0 2d       	mov	r30, r0
    2b58:	95 81       	ldd	r25, Z+5	; 0x05
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e7 57       	subi	r30, 0x77	; 119
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 83       	st	Z, r24
    2b62:	fe 01       	movw	r30, r28
    2b64:	e7 57       	subi	r30, 0x77	; 119
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e7 57       	subi	r30, 0x77	; 119
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	82 83       	std	Z+2, r24	; 0x02
    2b74:	fe 01       	movw	r30, r28
    2b76:	e7 57       	subi	r30, 0x77	; 119
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	13 82       	std	Z+3, r1	; 0x03


		gpioRet = GPIO_initPin(&rsPin);
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	8f 57       	subi	r24, 0x7F	; 127
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2b86:	fe 01       	movw	r30, r28
    2b88:	e1 58       	subi	r30, 0x81	; 129
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&rwPin);
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e1 58       	subi	r30, 0x81	; 129
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	88 23       	and	r24, r24
    2b98:	51 f4       	brne	.+20     	; 0x2bae <HLCD_init+0x134>
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	8b 57       	subi	r24, 0x7B	; 123
    2b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e1 58       	subi	r30, 0x81	; 129
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 83       	st	Z, r24
    2bac:	05 c0       	rjmp	.+10     	; 0x2bb8 <HLCD_init+0x13e>
		else lcdRet = HLCD_NOK;
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e0 58       	subi	r30, 0x80	; 128
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&enPin);
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e1 58       	subi	r30, 0x81	; 129
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	88 23       	and	r24, r24
    2bc2:	51 f4       	brne	.+20     	; 0x2bd8 <HLCD_init+0x15e>
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	87 57       	subi	r24, 0x77	; 119
    2bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bca:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e1 58       	subi	r30, 0x81	; 129
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 83       	st	Z, r24
    2bd6:	05 c0       	rjmp	.+10     	; 0x2be2 <HLCD_init+0x168>
		else lcdRet = HLCD_NOK;
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e0 58       	subi	r30, 0x80	; 128
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	80 83       	st	Z, r24

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    2be2:	fe 01       	movw	r30, r28
    2be4:	e3 56       	subi	r30, 0x63	; 99
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	01 90       	ld	r0, Z+
    2bea:	f0 81       	ld	r31, Z
    2bec:	e0 2d       	mov	r30, r0
    2bee:	80 81       	ld	r24, Z
    2bf0:	88 23       	and	r24, r24
    2bf2:	09 f0       	breq	.+2      	; 0x2bf6 <HLCD_init+0x17c>
    2bf4:	42 c4       	rjmp	.+2180   	; 0x347a <HLCD_init+0xa00>
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d4Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e3 56       	subi	r30, 0x63	; 99
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	01 90       	ld	r0, Z+
    2bfe:	f0 81       	ld	r31, Z
    2c00:	e0 2d       	mov	r30, r0
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	fe 01       	movw	r30, r28
    2c06:	e3 56       	subi	r30, 0x63	; 99
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	01 90       	ld	r0, Z+
    2c0c:	f0 81       	ld	r31, Z
    2c0e:	e0 2d       	mov	r30, r0
    2c10:	92 85       	ldd	r25, Z+10	; 0x0a
    2c12:	fe 01       	movw	r30, r28
    2c14:	e3 57       	subi	r30, 0x73	; 115
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 83       	st	Z, r24
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e3 57       	subi	r30, 0x73	; 115
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	fe 01       	movw	r30, r28
    2c24:	e3 57       	subi	r30, 0x73	; 115
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	82 83       	std	Z+2, r24	; 0x02
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e3 57       	subi	r30, 0x73	; 115
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d5Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    2c34:	fe 01       	movw	r30, r28
    2c36:	e3 56       	subi	r30, 0x63	; 99
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	01 90       	ld	r0, Z+
    2c3c:	f0 81       	ld	r31, Z
    2c3e:	e0 2d       	mov	r30, r0
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	fe 01       	movw	r30, r28
    2c44:	e3 56       	subi	r30, 0x63	; 99
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	01 90       	ld	r0, Z+
    2c4a:	f0 81       	ld	r31, Z
    2c4c:	e0 2d       	mov	r30, r0
    2c4e:	93 85       	ldd	r25, Z+11	; 0x0b
    2c50:	fe 01       	movw	r30, r28
    2c52:	ef 56       	subi	r30, 0x6F	; 111
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 83       	st	Z, r24
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ef 56       	subi	r30, 0x6F	; 111
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	fe 01       	movw	r30, r28
    2c62:	ef 56       	subi	r30, 0x6F	; 111
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	82 83       	std	Z+2, r24	; 0x02
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	ef 56       	subi	r30, 0x6F	; 111
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d6Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    2c72:	fe 01       	movw	r30, r28
    2c74:	e3 56       	subi	r30, 0x63	; 99
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	01 90       	ld	r0, Z+
    2c7a:	f0 81       	ld	r31, Z
    2c7c:	e0 2d       	mov	r30, r0
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	fe 01       	movw	r30, r28
    2c82:	e3 56       	subi	r30, 0x63	; 99
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	01 90       	ld	r0, Z+
    2c88:	f0 81       	ld	r31, Z
    2c8a:	e0 2d       	mov	r30, r0
    2c8c:	94 85       	ldd	r25, Z+12	; 0x0c
    2c8e:	fe 01       	movw	r30, r28
    2c90:	eb 56       	subi	r30, 0x6B	; 107
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 83       	st	Z, r24
    2c96:	fe 01       	movw	r30, r28
    2c98:	eb 56       	subi	r30, 0x6B	; 107
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	eb 56       	subi	r30, 0x6B	; 107
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	82 83       	std	Z+2, r24	; 0x02
    2ca8:	fe 01       	movw	r30, r28
    2caa:	eb 56       	subi	r30, 0x6B	; 107
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d7Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e3 56       	subi	r30, 0x63	; 99
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	01 90       	ld	r0, Z+
    2cb8:	f0 81       	ld	r31, Z
    2cba:	e0 2d       	mov	r30, r0
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e3 56       	subi	r30, 0x63	; 99
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	01 90       	ld	r0, Z+
    2cc6:	f0 81       	ld	r31, Z
    2cc8:	e0 2d       	mov	r30, r0
    2cca:	95 85       	ldd	r25, Z+13	; 0x0d
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e7 56       	subi	r30, 0x67	; 103
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 83       	st	Z, r24
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e7 56       	subi	r30, 0x67	; 103
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e7 56       	subi	r30, 0x67	; 103
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	82 83       	std	Z+2, r24	; 0x02
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e7 56       	subi	r30, 0x67	; 103
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	13 82       	std	Z+3, r1	; 0x03

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d4Pin);
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e1 58       	subi	r30, 0x81	; 129
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 23       	and	r24, r24
    2cf8:	51 f4       	brne	.+20     	; 0x2d0e <HLCD_init+0x294>
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	83 57       	subi	r24, 0x73	; 115
    2cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2d00:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2d04:	fe 01       	movw	r30, r28
    2d06:	e1 58       	subi	r30, 0x81	; 129
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 83       	st	Z, r24
    2d0c:	05 c0       	rjmp	.+10     	; 0x2d18 <HLCD_init+0x29e>
			else lcdRet = HLCD_NOK;
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e0 58       	subi	r30, 0x80	; 128
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d5Pin);
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e1 58       	subi	r30, 0x81	; 129
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	88 23       	and	r24, r24
    2d22:	51 f4       	brne	.+20     	; 0x2d38 <HLCD_init+0x2be>
    2d24:	ce 01       	movw	r24, r28
    2d26:	8f 56       	subi	r24, 0x6F	; 111
    2d28:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e1 58       	subi	r30, 0x81	; 129
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 83       	st	Z, r24
    2d36:	05 c0       	rjmp	.+10     	; 0x2d42 <HLCD_init+0x2c8>
			else lcdRet = HLCD_NOK;
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e0 58       	subi	r30, 0x80	; 128
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d6Pin);
    2d42:	fe 01       	movw	r30, r28
    2d44:	e1 58       	subi	r30, 0x81	; 129
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	88 23       	and	r24, r24
    2d4c:	51 f4       	brne	.+20     	; 0x2d62 <HLCD_init+0x2e8>
    2d4e:	ce 01       	movw	r24, r28
    2d50:	8b 56       	subi	r24, 0x6B	; 107
    2d52:	9f 4f       	sbci	r25, 0xFF	; 255
    2d54:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e1 58       	subi	r30, 0x81	; 129
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 83       	st	Z, r24
    2d60:	05 c0       	rjmp	.+10     	; 0x2d6c <HLCD_init+0x2f2>
			else lcdRet = HLCD_NOK;
    2d62:	fe 01       	movw	r30, r28
    2d64:	e0 58       	subi	r30, 0x80	; 128
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d7Pin);
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e1 58       	subi	r30, 0x81	; 129
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	88 23       	and	r24, r24
    2d76:	51 f4       	brne	.+20     	; 0x2d8c <HLCD_init+0x312>
    2d78:	ce 01       	movw	r24, r28
    2d7a:	87 56       	subi	r24, 0x67	; 103
    2d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2d82:	fe 01       	movw	r30, r28
    2d84:	e1 58       	subi	r30, 0x81	; 129
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 83       	st	Z, r24
    2d8a:	05 c0       	rjmp	.+10     	; 0x2d96 <HLCD_init+0x31c>
			else lcdRet = HLCD_NOK;
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e0 58       	subi	r30, 0x80	; 128
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	80 83       	st	Z, r24
    2d96:	fe 01       	movw	r30, r28
    2d98:	e5 58       	subi	r30, 0x85	; 133
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 ef       	ldi	r26, 0xF0	; 240
    2da2:	b1 e4       	ldi	r27, 0x41	; 65
    2da4:	80 83       	st	Z, r24
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	a2 83       	std	Z+2, r26	; 0x02
    2daa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	8e 01       	movw	r16, r28
    2dae:	09 58       	subi	r16, 0x89	; 137
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	fe 01       	movw	r30, r28
    2db4:	e5 58       	subi	r30, 0x85	; 133
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	4a ef       	ldi	r20, 0xFA	; 250
    2dc6:	54 e4       	ldi	r21, 0x44	; 68
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	80 83       	st	Z, r24
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	a2 83       	std	Z+2, r26	; 0x02
    2dd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e9 58       	subi	r30, 0x89	; 137
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	82 81       	ldd	r24, Z+2	; 0x02
    2de6:	93 81       	ldd	r25, Z+3	; 0x03
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	5f e3       	ldi	r21, 0x3F	; 63
    2df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df4:	88 23       	and	r24, r24
    2df6:	44 f4       	brge	.+16     	; 0x2e08 <HLCD_init+0x38e>
		__ticks = 1;
    2df8:	fe 01       	movw	r30, r28
    2dfa:	eb 58       	subi	r30, 0x8B	; 139
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	80 83       	st	Z, r24
    2e06:	64 c0       	rjmp	.+200    	; 0x2ed0 <HLCD_init+0x456>
	else if (__tmp > 65535)
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e9 58       	subi	r30, 0x89	; 137
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	93 81       	ldd	r25, Z+3	; 0x03
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	3f ef       	ldi	r19, 0xFF	; 255
    2e1a:	4f e7       	ldi	r20, 0x7F	; 127
    2e1c:	57 e4       	ldi	r21, 0x47	; 71
    2e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e22:	18 16       	cp	r1, r24
    2e24:	0c f0       	brlt	.+2      	; 0x2e28 <HLCD_init+0x3ae>
    2e26:	43 c0       	rjmp	.+134    	; 0x2eae <HLCD_init+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e5 58       	subi	r30, 0x85	; 133
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	8e 01       	movw	r16, r28
    2e48:	0b 58       	subi	r16, 0x8B	; 139
    2e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	f8 01       	movw	r30, r16
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	80 83       	st	Z, r24
    2e5e:	1f c0       	rjmp	.+62     	; 0x2e9e <HLCD_init+0x424>
    2e60:	fe 01       	movw	r30, r28
    2e62:	ed 58       	subi	r30, 0x8D	; 141
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	88 ec       	ldi	r24, 0xC8	; 200
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ed 58       	subi	r30, 0x8D	; 141
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <HLCD_init+0x3fe>
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ed 58       	subi	r30, 0x8D	; 141
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	91 83       	std	Z+1, r25	; 0x01
    2e84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e86:	de 01       	movw	r26, r28
    2e88:	ab 58       	subi	r26, 0x8B	; 139
    2e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	eb 58       	subi	r30, 0x8B	; 139
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	9c 93       	st	X, r25
    2e9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	eb 58       	subi	r30, 0x8B	; 139
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	d1 f6       	brne	.-76     	; 0x2e60 <HLCD_init+0x3e6>
    2eac:	27 c0       	rjmp	.+78     	; 0x2efc <HLCD_init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eae:	8e 01       	movw	r16, r28
    2eb0:	0b 58       	subi	r16, 0x8B	; 139
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e9 58       	subi	r30, 0x89	; 137
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	f8 01       	movw	r30, r16
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	80 83       	st	Z, r24
    2ed0:	de 01       	movw	r26, r28
    2ed2:	af 58       	subi	r26, 0x8F	; 143
    2ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	eb 58       	subi	r30, 0x8B	; 139
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	8d 93       	st	X+, r24
    2ee2:	9c 93       	st	X, r25
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ef 58       	subi	r30, 0x8F	; 143
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <HLCD_init+0x474>
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	ef 58       	subi	r30, 0x8F	; 143
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	80 83       	st	Z, r24

			_delay_ms(30);

			HLCD_sendCmd(ST_ptrLcdCfgInstance ,FUNCTION_SET);
    2efc:	fe 01       	movw	r30, r28
    2efe:	e3 56       	subi	r30, 0x63	; 99
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 81       	ld	r24, Z
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	68 e2       	ldi	r22, 0x28	; 40
    2f08:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e3 59       	subi	r30, 0x93	; 147
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	a8 e4       	ldi	r26, 0x48	; 72
    2f18:	b2 e4       	ldi	r27, 0x42	; 66
    2f1a:	80 83       	st	Z, r24
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	a2 83       	std	Z+2, r26	; 0x02
    2f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f22:	8e 01       	movw	r16, r28
    2f24:	07 59       	subi	r16, 0x97	; 151
    2f26:	1f 4f       	sbci	r17, 0xFF	; 255
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e3 59       	subi	r30, 0x93	; 147
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	4a ef       	ldi	r20, 0xFA	; 250
    2f3c:	54 e4       	ldi	r21, 0x44	; 68
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	f8 01       	movw	r30, r16
    2f48:	80 83       	st	Z, r24
    2f4a:	91 83       	std	Z+1, r25	; 0x01
    2f4c:	a2 83       	std	Z+2, r26	; 0x02
    2f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f50:	fe 01       	movw	r30, r28
    2f52:	e7 59       	subi	r30, 0x97	; 151
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	60 81       	ld	r22, Z
    2f58:	71 81       	ldd	r23, Z+1	; 0x01
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e8       	ldi	r20, 0x80	; 128
    2f64:	5f e3       	ldi	r21, 0x3F	; 63
    2f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6a:	88 23       	and	r24, r24
    2f6c:	44 f4       	brge	.+16     	; 0x2f7e <HLCD_init+0x504>
		__ticks = 1;
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e9 59       	subi	r30, 0x99	; 153
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	91 83       	std	Z+1, r25	; 0x01
    2f7a:	80 83       	st	Z, r24
    2f7c:	64 c0       	rjmp	.+200    	; 0x3046 <HLCD_init+0x5cc>
	else if (__tmp > 65535)
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e7 59       	subi	r30, 0x97	; 151
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	3f ef       	ldi	r19, 0xFF	; 255
    2f90:	4f e7       	ldi	r20, 0x7F	; 127
    2f92:	57 e4       	ldi	r21, 0x47	; 71
    2f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f98:	18 16       	cp	r1, r24
    2f9a:	0c f0       	brlt	.+2      	; 0x2f9e <HLCD_init+0x524>
    2f9c:	43 c0       	rjmp	.+134    	; 0x3024 <HLCD_init+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e3 59       	subi	r30, 0x93	; 147
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	60 81       	ld	r22, Z
    2fa6:	71 81       	ldd	r23, Z+1	; 0x01
    2fa8:	82 81       	ldd	r24, Z+2	; 0x02
    2faa:	93 81       	ldd	r25, Z+3	; 0x03
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e2       	ldi	r20, 0x20	; 32
    2fb2:	51 e4       	ldi	r21, 0x41	; 65
    2fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	8e 01       	movw	r16, r28
    2fbe:	09 59       	subi	r16, 0x99	; 153
    2fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	f8 01       	movw	r30, r16
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	80 83       	st	Z, r24
    2fd4:	1f c0       	rjmp	.+62     	; 0x3014 <HLCD_init+0x59a>
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	eb 59       	subi	r30, 0x9B	; 155
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	88 ec       	ldi	r24, 0xC8	; 200
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	91 83       	std	Z+1, r25	; 0x01
    2fe2:	80 83       	st	Z, r24
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	eb 59       	subi	r30, 0x9B	; 155
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <HLCD_init+0x574>
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	eb 59       	subi	r30, 0x9B	; 155
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	de 01       	movw	r26, r28
    2ffe:	a9 59       	subi	r26, 0x99	; 153
    3000:	bf 4f       	sbci	r27, 0xFF	; 255
    3002:	fe 01       	movw	r30, r28
    3004:	e9 59       	subi	r30, 0x99	; 153
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	80 81       	ld	r24, Z
    300a:	91 81       	ldd	r25, Z+1	; 0x01
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	11 96       	adiw	r26, 0x01	; 1
    3010:	9c 93       	st	X, r25
    3012:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3014:	fe 01       	movw	r30, r28
    3016:	e9 59       	subi	r30, 0x99	; 153
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	00 97       	sbiw	r24, 0x00	; 0
    3020:	d1 f6       	brne	.-76     	; 0x2fd6 <HLCD_init+0x55c>
    3022:	27 c0       	rjmp	.+78     	; 0x3072 <HLCD_init+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3024:	8e 01       	movw	r16, r28
    3026:	09 59       	subi	r16, 0x99	; 153
    3028:	1f 4f       	sbci	r17, 0xFF	; 255
    302a:	fe 01       	movw	r30, r28
    302c:	e7 59       	subi	r30, 0x97	; 151
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	f8 01       	movw	r30, r16
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	80 83       	st	Z, r24
    3046:	de 01       	movw	r26, r28
    3048:	ad 59       	subi	r26, 0x9D	; 157
    304a:	bf 4f       	sbci	r27, 0xFF	; 255
    304c:	fe 01       	movw	r30, r28
    304e:	e9 59       	subi	r30, 0x99	; 153
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	80 81       	ld	r24, Z
    3054:	91 81       	ldd	r25, Z+1	; 0x01
    3056:	8d 93       	st	X+, r24
    3058:	9c 93       	st	X, r25
    305a:	fe 01       	movw	r30, r28
    305c:	ed 59       	subi	r30, 0x9D	; 157
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <HLCD_init+0x5ea>
    3068:	fe 01       	movw	r30, r28
    306a:	ed 59       	subi	r30, 0x9D	; 157
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_ON_OFF);
    3072:	fe 01       	movw	r30, r28
    3074:	e3 56       	subi	r30, 0x63	; 99
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	91 81       	ldd	r25, Z+1	; 0x01
    307c:	6f e0       	ldi	r22, 0x0F	; 15
    307e:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    3082:	fe 01       	movw	r30, r28
    3084:	e1 5a       	subi	r30, 0xA1	; 161
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a8 e4       	ldi	r26, 0x48	; 72
    308e:	b2 e4       	ldi	r27, 0x42	; 66
    3090:	80 83       	st	Z, r24
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	a2 83       	std	Z+2, r26	; 0x02
    3096:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3098:	8e 01       	movw	r16, r28
    309a:	05 5a       	subi	r16, 0xA5	; 165
    309c:	1f 4f       	sbci	r17, 0xFF	; 255
    309e:	fe 01       	movw	r30, r28
    30a0:	e1 5a       	subi	r30, 0xA1	; 161
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	60 81       	ld	r22, Z
    30a6:	71 81       	ldd	r23, Z+1	; 0x01
    30a8:	82 81       	ldd	r24, Z+2	; 0x02
    30aa:	93 81       	ldd	r25, Z+3	; 0x03
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a ef       	ldi	r20, 0xFA	; 250
    30b2:	54 e4       	ldi	r21, 0x44	; 68
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	f8 01       	movw	r30, r16
    30be:	80 83       	st	Z, r24
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	a2 83       	std	Z+2, r26	; 0x02
    30c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30c6:	fe 01       	movw	r30, r28
    30c8:	e5 5a       	subi	r30, 0xA5	; 165
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e8       	ldi	r20, 0x80	; 128
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	44 f4       	brge	.+16     	; 0x30f4 <HLCD_init+0x67a>
		__ticks = 1;
    30e4:	fe 01       	movw	r30, r28
    30e6:	e7 5a       	subi	r30, 0xA7	; 167
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	80 83       	st	Z, r24
    30f2:	64 c0       	rjmp	.+200    	; 0x31bc <HLCD_init+0x742>
	else if (__tmp > 65535)
    30f4:	fe 01       	movw	r30, r28
    30f6:	e5 5a       	subi	r30, 0xA5	; 165
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	60 81       	ld	r22, Z
    30fc:	71 81       	ldd	r23, Z+1	; 0x01
    30fe:	82 81       	ldd	r24, Z+2	; 0x02
    3100:	93 81       	ldd	r25, Z+3	; 0x03
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	3f ef       	ldi	r19, 0xFF	; 255
    3106:	4f e7       	ldi	r20, 0x7F	; 127
    3108:	57 e4       	ldi	r21, 0x47	; 71
    310a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    310e:	18 16       	cp	r1, r24
    3110:	0c f0       	brlt	.+2      	; 0x3114 <HLCD_init+0x69a>
    3112:	43 c0       	rjmp	.+134    	; 0x319a <HLCD_init+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3114:	fe 01       	movw	r30, r28
    3116:	e1 5a       	subi	r30, 0xA1	; 161
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	60 81       	ld	r22, Z
    311c:	71 81       	ldd	r23, Z+1	; 0x01
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	93 81       	ldd	r25, Z+3	; 0x03
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e2       	ldi	r20, 0x20	; 32
    3128:	51 e4       	ldi	r21, 0x41	; 65
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	8e 01       	movw	r16, r28
    3134:	07 5a       	subi	r16, 0xA7	; 167
    3136:	1f 4f       	sbci	r17, 0xFF	; 255
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	f8 01       	movw	r30, r16
    3146:	91 83       	std	Z+1, r25	; 0x01
    3148:	80 83       	st	Z, r24
    314a:	1f c0       	rjmp	.+62     	; 0x318a <HLCD_init+0x710>
    314c:	fe 01       	movw	r30, r28
    314e:	e9 5a       	subi	r30, 0xA9	; 169
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	88 ec       	ldi	r24, 0xC8	; 200
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	91 83       	std	Z+1, r25	; 0x01
    3158:	80 83       	st	Z, r24
    315a:	fe 01       	movw	r30, r28
    315c:	e9 5a       	subi	r30, 0xA9	; 169
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 81       	ld	r24, Z
    3162:	91 81       	ldd	r25, Z+1	; 0x01
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <HLCD_init+0x6ea>
    3168:	fe 01       	movw	r30, r28
    316a:	e9 5a       	subi	r30, 0xA9	; 169
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3172:	de 01       	movw	r26, r28
    3174:	a7 5a       	subi	r26, 0xA7	; 167
    3176:	bf 4f       	sbci	r27, 0xFF	; 255
    3178:	fe 01       	movw	r30, r28
    317a:	e7 5a       	subi	r30, 0xA7	; 167
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	11 96       	adiw	r26, 0x01	; 1
    3186:	9c 93       	st	X, r25
    3188:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318a:	fe 01       	movw	r30, r28
    318c:	e7 5a       	subi	r30, 0xA7	; 167
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	80 81       	ld	r24, Z
    3192:	91 81       	ldd	r25, Z+1	; 0x01
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	d1 f6       	brne	.-76     	; 0x314c <HLCD_init+0x6d2>
    3198:	27 c0       	rjmp	.+78     	; 0x31e8 <HLCD_init+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    319a:	8e 01       	movw	r16, r28
    319c:	07 5a       	subi	r16, 0xA7	; 167
    319e:	1f 4f       	sbci	r17, 0xFF	; 255
    31a0:	fe 01       	movw	r30, r28
    31a2:	e5 5a       	subi	r30, 0xA5	; 165
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	60 81       	ld	r22, Z
    31a8:	71 81       	ldd	r23, Z+1	; 0x01
    31aa:	82 81       	ldd	r24, Z+2	; 0x02
    31ac:	93 81       	ldd	r25, Z+3	; 0x03
    31ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	f8 01       	movw	r30, r16
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
    31bc:	de 01       	movw	r26, r28
    31be:	ab 5a       	subi	r26, 0xAB	; 171
    31c0:	bf 4f       	sbci	r27, 0xFF	; 255
    31c2:	fe 01       	movw	r30, r28
    31c4:	e7 5a       	subi	r30, 0xA7	; 167
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	80 81       	ld	r24, Z
    31ca:	91 81       	ldd	r25, Z+1	; 0x01
    31cc:	8d 93       	st	X+, r24
    31ce:	9c 93       	st	X, r25
    31d0:	fe 01       	movw	r30, r28
    31d2:	eb 5a       	subi	r30, 0xAB	; 171
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	80 81       	ld	r24, Z
    31d8:	91 81       	ldd	r25, Z+1	; 0x01
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <HLCD_init+0x760>
    31de:	fe 01       	movw	r30, r28
    31e0:	eb 5a       	subi	r30, 0xAB	; 171
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	91 83       	std	Z+1, r25	; 0x01
    31e6:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_CLR);
    31e8:	fe 01       	movw	r30, r28
    31ea:	e3 56       	subi	r30, 0x63	; 99
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	80 81       	ld	r24, Z
    31f0:	91 81       	ldd	r25, Z+1	; 0x01
    31f2:	61 e0       	ldi	r22, 0x01	; 1
    31f4:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    31f8:	fe 01       	movw	r30, r28
    31fa:	ef 5a       	subi	r30, 0xAF	; 175
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	a8 e4       	ldi	r26, 0x48	; 72
    3204:	b2 e4       	ldi	r27, 0x42	; 66
    3206:	80 83       	st	Z, r24
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	a2 83       	std	Z+2, r26	; 0x02
    320c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320e:	8e 01       	movw	r16, r28
    3210:	03 5b       	subi	r16, 0xB3	; 179
    3212:	1f 4f       	sbci	r17, 0xFF	; 255
    3214:	fe 01       	movw	r30, r28
    3216:	ef 5a       	subi	r30, 0xAF	; 175
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	60 81       	ld	r22, Z
    321c:	71 81       	ldd	r23, Z+1	; 0x01
    321e:	82 81       	ldd	r24, Z+2	; 0x02
    3220:	93 81       	ldd	r25, Z+3	; 0x03
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	4a ef       	ldi	r20, 0xFA	; 250
    3228:	54 e4       	ldi	r21, 0x44	; 68
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	f8 01       	movw	r30, r16
    3234:	80 83       	st	Z, r24
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	a2 83       	std	Z+2, r26	; 0x02
    323a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    323c:	fe 01       	movw	r30, r28
    323e:	e3 5b       	subi	r30, 0xB3	; 179
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e8       	ldi	r20, 0x80	; 128
    3250:	5f e3       	ldi	r21, 0x3F	; 63
    3252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3256:	88 23       	and	r24, r24
    3258:	44 f4       	brge	.+16     	; 0x326a <HLCD_init+0x7f0>
		__ticks = 1;
    325a:	fe 01       	movw	r30, r28
    325c:	e5 5b       	subi	r30, 0xB5	; 181
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	80 83       	st	Z, r24
    3268:	64 c0       	rjmp	.+200    	; 0x3332 <HLCD_init+0x8b8>
	else if (__tmp > 65535)
    326a:	fe 01       	movw	r30, r28
    326c:	e3 5b       	subi	r30, 0xB3	; 179
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	60 81       	ld	r22, Z
    3272:	71 81       	ldd	r23, Z+1	; 0x01
    3274:	82 81       	ldd	r24, Z+2	; 0x02
    3276:	93 81       	ldd	r25, Z+3	; 0x03
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	3f ef       	ldi	r19, 0xFF	; 255
    327c:	4f e7       	ldi	r20, 0x7F	; 127
    327e:	57 e4       	ldi	r21, 0x47	; 71
    3280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3284:	18 16       	cp	r1, r24
    3286:	0c f0       	brlt	.+2      	; 0x328a <HLCD_init+0x810>
    3288:	43 c0       	rjmp	.+134    	; 0x3310 <HLCD_init+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328a:	fe 01       	movw	r30, r28
    328c:	ef 5a       	subi	r30, 0xAF	; 175
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	60 81       	ld	r22, Z
    3292:	71 81       	ldd	r23, Z+1	; 0x01
    3294:	82 81       	ldd	r24, Z+2	; 0x02
    3296:	93 81       	ldd	r25, Z+3	; 0x03
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e2       	ldi	r20, 0x20	; 32
    329e:	51 e4       	ldi	r21, 0x41	; 65
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	8e 01       	movw	r16, r28
    32aa:	05 5b       	subi	r16, 0xB5	; 181
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	bc 01       	movw	r22, r24
    32b0:	cd 01       	movw	r24, r26
    32b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	f8 01       	movw	r30, r16
    32bc:	91 83       	std	Z+1, r25	; 0x01
    32be:	80 83       	st	Z, r24
    32c0:	1f c0       	rjmp	.+62     	; 0x3300 <HLCD_init+0x886>
    32c2:	fe 01       	movw	r30, r28
    32c4:	e7 5b       	subi	r30, 0xB7	; 183
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	88 ec       	ldi	r24, 0xC8	; 200
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	91 83       	std	Z+1, r25	; 0x01
    32ce:	80 83       	st	Z, r24
    32d0:	fe 01       	movw	r30, r28
    32d2:	e7 5b       	subi	r30, 0xB7	; 183
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <HLCD_init+0x860>
    32de:	fe 01       	movw	r30, r28
    32e0:	e7 5b       	subi	r30, 0xB7	; 183
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e8:	de 01       	movw	r26, r28
    32ea:	a5 5b       	subi	r26, 0xB5	; 181
    32ec:	bf 4f       	sbci	r27, 0xFF	; 255
    32ee:	fe 01       	movw	r30, r28
    32f0:	e5 5b       	subi	r30, 0xB5	; 181
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	80 81       	ld	r24, Z
    32f6:	91 81       	ldd	r25, Z+1	; 0x01
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	11 96       	adiw	r26, 0x01	; 1
    32fc:	9c 93       	st	X, r25
    32fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3300:	fe 01       	movw	r30, r28
    3302:	e5 5b       	subi	r30, 0xB5	; 181
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	d1 f6       	brne	.-76     	; 0x32c2 <HLCD_init+0x848>
    330e:	27 c0       	rjmp	.+78     	; 0x335e <HLCD_init+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3310:	8e 01       	movw	r16, r28
    3312:	05 5b       	subi	r16, 0xB5	; 181
    3314:	1f 4f       	sbci	r17, 0xFF	; 255
    3316:	fe 01       	movw	r30, r28
    3318:	e3 5b       	subi	r30, 0xB3	; 179
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	60 81       	ld	r22, Z
    331e:	71 81       	ldd	r23, Z+1	; 0x01
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	93 81       	ldd	r25, Z+3	; 0x03
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	f8 01       	movw	r30, r16
    332e:	91 83       	std	Z+1, r25	; 0x01
    3330:	80 83       	st	Z, r24
    3332:	de 01       	movw	r26, r28
    3334:	a9 5b       	subi	r26, 0xB9	; 185
    3336:	bf 4f       	sbci	r27, 0xFF	; 255
    3338:	fe 01       	movw	r30, r28
    333a:	e5 5b       	subi	r30, 0xB5	; 181
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	80 81       	ld	r24, Z
    3340:	91 81       	ldd	r25, Z+1	; 0x01
    3342:	8d 93       	st	X+, r24
    3344:	9c 93       	st	X, r25
    3346:	fe 01       	movw	r30, r28
    3348:	e9 5b       	subi	r30, 0xB9	; 185
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	80 81       	ld	r24, Z
    334e:	91 81       	ldd	r25, Z+1	; 0x01
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <HLCD_init+0x8d6>
    3354:	fe 01       	movw	r30, r28
    3356:	e9 5b       	subi	r30, 0xB9	; 185
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	91 83       	std	Z+1, r25	; 0x01
    335c:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,ENTRY_MODE);
    335e:	fe 01       	movw	r30, r28
    3360:	e3 56       	subi	r30, 0x63	; 99
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	66 e0       	ldi	r22, 0x06	; 6
    336a:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    336e:	fe 01       	movw	r30, r28
    3370:	ed 5b       	subi	r30, 0xBD	; 189
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	a8 e4       	ldi	r26, 0x48	; 72
    337a:	b2 e4       	ldi	r27, 0x42	; 66
    337c:	80 83       	st	Z, r24
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	a2 83       	std	Z+2, r26	; 0x02
    3382:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3384:	8e 01       	movw	r16, r28
    3386:	01 5c       	subi	r16, 0xC1	; 193
    3388:	1f 4f       	sbci	r17, 0xFF	; 255
    338a:	fe 01       	movw	r30, r28
    338c:	ed 5b       	subi	r30, 0xBD	; 189
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	60 81       	ld	r22, Z
    3392:	71 81       	ldd	r23, Z+1	; 0x01
    3394:	82 81       	ldd	r24, Z+2	; 0x02
    3396:	93 81       	ldd	r25, Z+3	; 0x03
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	4a ef       	ldi	r20, 0xFA	; 250
    339e:	54 e4       	ldi	r21, 0x44	; 68
    33a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	f8 01       	movw	r30, r16
    33aa:	80 83       	st	Z, r24
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	a2 83       	std	Z+2, r26	; 0x02
    33b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33b2:	fe 01       	movw	r30, r28
    33b4:	ff 96       	adiw	r30, 0x3f	; 63
    33b6:	60 81       	ld	r22, Z
    33b8:	71 81       	ldd	r23, Z+1	; 0x01
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <HLCD_init+0x95e>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9e af       	std	Y+62, r25	; 0x3e
    33d4:	8d af       	std	Y+61, r24	; 0x3d
    33d6:	46 c0       	rjmp	.+140    	; 0x3464 <HLCD_init+0x9ea>
	else if (__tmp > 65535)
    33d8:	fe 01       	movw	r30, r28
    33da:	ff 96       	adiw	r30, 0x3f	; 63
    33dc:	60 81       	ld	r22, Z
    33de:	71 81       	ldd	r23, Z+1	; 0x01
    33e0:	82 81       	ldd	r24, Z+2	; 0x02
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	3f ef       	ldi	r19, 0xFF	; 255
    33e8:	4f e7       	ldi	r20, 0x7F	; 127
    33ea:	57 e4       	ldi	r21, 0x47	; 71
    33ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33f0:	18 16       	cp	r1, r24
    33f2:	64 f5       	brge	.+88     	; 0x344c <HLCD_init+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f4:	fe 01       	movw	r30, r28
    33f6:	ed 5b       	subi	r30, 0xBD	; 189
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	60 81       	ld	r22, Z
    33fc:	71 81       	ldd	r23, Z+1	; 0x01
    33fe:	82 81       	ldd	r24, Z+2	; 0x02
    3400:	93 81       	ldd	r25, Z+3	; 0x03
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e2       	ldi	r20, 0x20	; 32
    3408:	51 e4       	ldi	r21, 0x41	; 65
    340a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	9e af       	std	Y+62, r25	; 0x3e
    3420:	8d af       	std	Y+61, r24	; 0x3d
    3422:	0f c0       	rjmp	.+30     	; 0x3442 <HLCD_init+0x9c8>
    3424:	88 ec       	ldi	r24, 0xC8	; 200
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	9c af       	std	Y+60, r25	; 0x3c
    342a:	8b af       	std	Y+59, r24	; 0x3b
    342c:	8b ad       	ldd	r24, Y+59	; 0x3b
    342e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <HLCD_init+0x9b6>
    3434:	9c af       	std	Y+60, r25	; 0x3c
    3436:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3438:	8d ad       	ldd	r24, Y+61	; 0x3d
    343a:	9e ad       	ldd	r25, Y+62	; 0x3e
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	9e af       	std	Y+62, r25	; 0x3e
    3440:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3442:	8d ad       	ldd	r24, Y+61	; 0x3d
    3444:	9e ad       	ldd	r25, Y+62	; 0x3e
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	69 f7       	brne	.-38     	; 0x3424 <HLCD_init+0x9aa>
    344a:	58 c2       	rjmp	.+1200   	; 0x38fc <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344c:	fe 01       	movw	r30, r28
    344e:	ff 96       	adiw	r30, 0x3f	; 63
    3450:	60 81       	ld	r22, Z
    3452:	71 81       	ldd	r23, Z+1	; 0x01
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	93 81       	ldd	r25, Z+3	; 0x03
    3458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	9e af       	std	Y+62, r25	; 0x3e
    3462:	8d af       	std	Y+61, r24	; 0x3d
    3464:	8d ad       	ldd	r24, Y+61	; 0x3d
    3466:	9e ad       	ldd	r25, Y+62	; 0x3e
    3468:	9a af       	std	Y+58, r25	; 0x3a
    346a:	89 af       	std	Y+57, r24	; 0x39
    346c:	89 ad       	ldd	r24, Y+57	; 0x39
    346e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	f1 f7       	brne	.-4      	; 0x3470 <HLCD_init+0x9f6>
    3474:	9a af       	std	Y+58, r25	; 0x3a
    3476:	89 af       	std	Y+57, r24	; 0x39
    3478:	41 c2       	rjmp	.+1154   	; 0x38fc <HLCD_init+0xe82>
			_delay_ms(50);

		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    347a:	fe 01       	movw	r30, r28
    347c:	e3 56       	subi	r30, 0x63	; 99
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	01 90       	ld	r0, Z+
    3482:	f0 81       	ld	r31, Z
    3484:	e0 2d       	mov	r30, r0
    3486:	80 81       	ld	r24, Z
    3488:	81 30       	cpi	r24, 0x01	; 1
    348a:	09 f0       	breq	.+2      	; 0x348e <HLCD_init+0xa14>
    348c:	2c c2       	rjmp	.+1112   	; 0x38e6 <HLCD_init+0xe6c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPort(ST_ptrLcdCfgInstance->dataPort,GPIO_OUTPUT,GPIO_LOW);
    348e:	fe 01       	movw	r30, r28
    3490:	e1 58       	subi	r30, 0x81	; 129
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 81       	ld	r24, Z
    3496:	88 23       	and	r24, r24
    3498:	81 f4       	brne	.+32     	; 0x34ba <HLCD_init+0xa40>
    349a:	fe 01       	movw	r30, r28
    349c:	e3 56       	subi	r30, 0x63	; 99
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	01 90       	ld	r0, Z+
    34a2:	f0 81       	ld	r31, Z
    34a4:	e0 2d       	mov	r30, r0
    34a6:	82 81       	ldd	r24, Z+2	; 0x02
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	40 e0       	ldi	r20, 0x00	; 0
    34ac:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <GPIO_initPort>
    34b0:	fe 01       	movw	r30, r28
    34b2:	e1 58       	subi	r30, 0x81	; 129
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	80 83       	st	Z, r24
    34b8:	05 c0       	rjmp	.+10     	; 0x34c4 <HLCD_init+0xa4a>
			else lcdRet = HLCD_NOK;
    34ba:	fe 01       	movw	r30, r28
    34bc:	e0 58       	subi	r30, 0x80	; 128
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	80 83       	st	Z, r24
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	a0 e8       	ldi	r26, 0x80	; 128
    34ca:	bf e3       	ldi	r27, 0x3F	; 63
    34cc:	8d ab       	std	Y+53, r24	; 0x35
    34ce:	9e ab       	std	Y+54, r25	; 0x36
    34d0:	af ab       	std	Y+55, r26	; 0x37
    34d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d4:	6d a9       	ldd	r22, Y+53	; 0x35
    34d6:	7e a9       	ldd	r23, Y+54	; 0x36
    34d8:	8f a9       	ldd	r24, Y+55	; 0x37
    34da:	98 ad       	ldd	r25, Y+56	; 0x38
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	4a ef       	ldi	r20, 0xFA	; 250
    34e2:	54 e4       	ldi	r21, 0x44	; 68
    34e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	89 ab       	std	Y+49, r24	; 0x31
    34ee:	9a ab       	std	Y+50, r25	; 0x32
    34f0:	ab ab       	std	Y+51, r26	; 0x33
    34f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34f4:	69 a9       	ldd	r22, Y+49	; 0x31
    34f6:	7a a9       	ldd	r23, Y+50	; 0x32
    34f8:	8b a9       	ldd	r24, Y+51	; 0x33
    34fa:	9c a9       	ldd	r25, Y+52	; 0x34
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e8       	ldi	r20, 0x80	; 128
    3502:	5f e3       	ldi	r21, 0x3F	; 63
    3504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3508:	88 23       	and	r24, r24
    350a:	2c f4       	brge	.+10     	; 0x3516 <HLCD_init+0xa9c>
		__ticks = 1;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	98 ab       	std	Y+48, r25	; 0x30
    3512:	8f a7       	std	Y+47, r24	; 0x2f
    3514:	3f c0       	rjmp	.+126    	; 0x3594 <HLCD_init+0xb1a>
	else if (__tmp > 65535)
    3516:	69 a9       	ldd	r22, Y+49	; 0x31
    3518:	7a a9       	ldd	r23, Y+50	; 0x32
    351a:	8b a9       	ldd	r24, Y+51	; 0x33
    351c:	9c a9       	ldd	r25, Y+52	; 0x34
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	3f ef       	ldi	r19, 0xFF	; 255
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	57 e4       	ldi	r21, 0x47	; 71
    3526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    352a:	18 16       	cp	r1, r24
    352c:	4c f5       	brge	.+82     	; 0x3580 <HLCD_init+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352e:	6d a9       	ldd	r22, Y+53	; 0x35
    3530:	7e a9       	ldd	r23, Y+54	; 0x36
    3532:	8f a9       	ldd	r24, Y+55	; 0x37
    3534:	98 ad       	ldd	r25, Y+56	; 0x38
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e2       	ldi	r20, 0x20	; 32
    353c:	51 e4       	ldi	r21, 0x41	; 65
    353e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	98 ab       	std	Y+48, r25	; 0x30
    3554:	8f a7       	std	Y+47, r24	; 0x2f
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <HLCD_init+0xafc>
    3558:	88 ec       	ldi	r24, 0xC8	; 200
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	9e a7       	std	Y+46, r25	; 0x2e
    355e:	8d a7       	std	Y+45, r24	; 0x2d
    3560:	8d a5       	ldd	r24, Y+45	; 0x2d
    3562:	9e a5       	ldd	r25, Y+46	; 0x2e
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <HLCD_init+0xaea>
    3568:	9e a7       	std	Y+46, r25	; 0x2e
    356a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356c:	8f a5       	ldd	r24, Y+47	; 0x2f
    356e:	98 a9       	ldd	r25, Y+48	; 0x30
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	98 ab       	std	Y+48, r25	; 0x30
    3574:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3576:	8f a5       	ldd	r24, Y+47	; 0x2f
    3578:	98 a9       	ldd	r25, Y+48	; 0x30
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	69 f7       	brne	.-38     	; 0x3558 <HLCD_init+0xade>
    357e:	14 c0       	rjmp	.+40     	; 0x35a8 <HLCD_init+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3580:	69 a9       	ldd	r22, Y+49	; 0x31
    3582:	7a a9       	ldd	r23, Y+50	; 0x32
    3584:	8b a9       	ldd	r24, Y+51	; 0x33
    3586:	9c a9       	ldd	r25, Y+52	; 0x34
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	98 ab       	std	Y+48, r25	; 0x30
    3592:	8f a7       	std	Y+47, r24	; 0x2f
    3594:	8f a5       	ldd	r24, Y+47	; 0x2f
    3596:	98 a9       	ldd	r25, Y+48	; 0x30
    3598:	9c a7       	std	Y+44, r25	; 0x2c
    359a:	8b a7       	std	Y+43, r24	; 0x2b
    359c:	8b a5       	ldd	r24, Y+43	; 0x2b
    359e:	9c a5       	ldd	r25, Y+44	; 0x2c
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <HLCD_init+0xb26>
    35a4:	9c a7       	std	Y+44, r25	; 0x2c
    35a6:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,TWO_LINE_LCD_EIGHT_BIT_MODE);
    35a8:	fe 01       	movw	r30, r28
    35aa:	e1 58       	subi	r30, 0x81	; 129
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	80 81       	ld	r24, Z
    35b0:	88 23       	and	r24, r24
    35b2:	69 f4       	brne	.+26     	; 0x35ce <HLCD_init+0xb54>
    35b4:	fe 01       	movw	r30, r28
    35b6:	e3 56       	subi	r30, 0x63	; 99
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	68 e3       	ldi	r22, 0x38	; 56
    35c0:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    35c4:	fe 01       	movw	r30, r28
    35c6:	e0 58       	subi	r30, 0x80	; 128
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 83       	st	Z, r24
    35cc:	05 c0       	rjmp	.+10     	; 0x35d8 <HLCD_init+0xb5e>
			else lcdRet = HLCD_NOK;
    35ce:	fe 01       	movw	r30, r28
    35d0:	e0 58       	subi	r30, 0x80	; 128
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	80 83       	st	Z, r24
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	a0 e8       	ldi	r26, 0x80	; 128
    35de:	bf e3       	ldi	r27, 0x3F	; 63
    35e0:	8f a3       	std	Y+39, r24	; 0x27
    35e2:	98 a7       	std	Y+40, r25	; 0x28
    35e4:	a9 a7       	std	Y+41, r26	; 0x29
    35e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e8:	6f a1       	ldd	r22, Y+39	; 0x27
    35ea:	78 a5       	ldd	r23, Y+40	; 0x28
    35ec:	89 a5       	ldd	r24, Y+41	; 0x29
    35ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	4a ef       	ldi	r20, 0xFA	; 250
    35f6:	54 e4       	ldi	r21, 0x44	; 68
    35f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	8b a3       	std	Y+35, r24	; 0x23
    3602:	9c a3       	std	Y+36, r25	; 0x24
    3604:	ad a3       	std	Y+37, r26	; 0x25
    3606:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3608:	6b a1       	ldd	r22, Y+35	; 0x23
    360a:	7c a1       	ldd	r23, Y+36	; 0x24
    360c:	8d a1       	ldd	r24, Y+37	; 0x25
    360e:	9e a1       	ldd	r25, Y+38	; 0x26
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	40 e8       	ldi	r20, 0x80	; 128
    3616:	5f e3       	ldi	r21, 0x3F	; 63
    3618:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    361c:	88 23       	and	r24, r24
    361e:	2c f4       	brge	.+10     	; 0x362a <HLCD_init+0xbb0>
		__ticks = 1;
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	9a a3       	std	Y+34, r25	; 0x22
    3626:	89 a3       	std	Y+33, r24	; 0x21
    3628:	3f c0       	rjmp	.+126    	; 0x36a8 <HLCD_init+0xc2e>
	else if (__tmp > 65535)
    362a:	6b a1       	ldd	r22, Y+35	; 0x23
    362c:	7c a1       	ldd	r23, Y+36	; 0x24
    362e:	8d a1       	ldd	r24, Y+37	; 0x25
    3630:	9e a1       	ldd	r25, Y+38	; 0x26
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	3f ef       	ldi	r19, 0xFF	; 255
    3636:	4f e7       	ldi	r20, 0x7F	; 127
    3638:	57 e4       	ldi	r21, 0x47	; 71
    363a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    363e:	18 16       	cp	r1, r24
    3640:	4c f5       	brge	.+82     	; 0x3694 <HLCD_init+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3642:	6f a1       	ldd	r22, Y+39	; 0x27
    3644:	78 a5       	ldd	r23, Y+40	; 0x28
    3646:	89 a5       	ldd	r24, Y+41	; 0x29
    3648:	9a a5       	ldd	r25, Y+42	; 0x2a
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e2       	ldi	r20, 0x20	; 32
    3650:	51 e4       	ldi	r21, 0x41	; 65
    3652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	bc 01       	movw	r22, r24
    365c:	cd 01       	movw	r24, r26
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9a a3       	std	Y+34, r25	; 0x22
    3668:	89 a3       	std	Y+33, r24	; 0x21
    366a:	0f c0       	rjmp	.+30     	; 0x368a <HLCD_init+0xc10>
    366c:	88 ec       	ldi	r24, 0xC8	; 200
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	98 a3       	std	Y+32, r25	; 0x20
    3672:	8f 8f       	std	Y+31, r24	; 0x1f
    3674:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3676:	98 a1       	ldd	r25, Y+32	; 0x20
    3678:	01 97       	sbiw	r24, 0x01	; 1
    367a:	f1 f7       	brne	.-4      	; 0x3678 <HLCD_init+0xbfe>
    367c:	98 a3       	std	Y+32, r25	; 0x20
    367e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3680:	89 a1       	ldd	r24, Y+33	; 0x21
    3682:	9a a1       	ldd	r25, Y+34	; 0x22
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	9a a3       	std	Y+34, r25	; 0x22
    3688:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368a:	89 a1       	ldd	r24, Y+33	; 0x21
    368c:	9a a1       	ldd	r25, Y+34	; 0x22
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	69 f7       	brne	.-38     	; 0x366c <HLCD_init+0xbf2>
    3692:	14 c0       	rjmp	.+40     	; 0x36bc <HLCD_init+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3694:	6b a1       	ldd	r22, Y+35	; 0x23
    3696:	7c a1       	ldd	r23, Y+36	; 0x24
    3698:	8d a1       	ldd	r24, Y+37	; 0x25
    369a:	9e a1       	ldd	r25, Y+38	; 0x26
    369c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	9a a3       	std	Y+34, r25	; 0x22
    36a6:	89 a3       	std	Y+33, r24	; 0x21
    36a8:	89 a1       	ldd	r24, Y+33	; 0x21
    36aa:	9a a1       	ldd	r25, Y+34	; 0x22
    36ac:	9e 8f       	std	Y+30, r25	; 0x1e
    36ae:	8d 8f       	std	Y+29, r24	; 0x1d
    36b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <HLCD_init+0xc3a>
    36b8:	9e 8f       	std	Y+30, r25	; 0x1e
    36ba:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CURSOR_ON);
    36bc:	fe 01       	movw	r30, r28
    36be:	e0 58       	subi	r30, 0x80	; 128
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	80 81       	ld	r24, Z
    36c4:	88 23       	and	r24, r24
    36c6:	69 f4       	brne	.+26     	; 0x36e2 <HLCD_init+0xc68>
    36c8:	fe 01       	movw	r30, r28
    36ca:	e3 56       	subi	r30, 0x63	; 99
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	80 81       	ld	r24, Z
    36d0:	91 81       	ldd	r25, Z+1	; 0x01
    36d2:	6e e0       	ldi	r22, 0x0E	; 14
    36d4:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    36d8:	fe 01       	movw	r30, r28
    36da:	e0 58       	subi	r30, 0x80	; 128
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 83       	st	Z, r24
    36e0:	05 c0       	rjmp	.+10     	; 0x36ec <HLCD_init+0xc72>
			else lcdRet = HLCD_NOK;
    36e2:	fe 01       	movw	r30, r28
    36e4:	e0 58       	subi	r30, 0x80	; 128
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	80 83       	st	Z, r24
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a0 e8       	ldi	r26, 0x80	; 128
    36f2:	bf e3       	ldi	r27, 0x3F	; 63
    36f4:	89 8f       	std	Y+25, r24	; 0x19
    36f6:	9a 8f       	std	Y+26, r25	; 0x1a
    36f8:	ab 8f       	std	Y+27, r26	; 0x1b
    36fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	69 8d       	ldd	r22, Y+25	; 0x19
    36fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3700:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3702:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4a ef       	ldi	r20, 0xFA	; 250
    370a:	54 e4       	ldi	r21, 0x44	; 68
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	8d 8b       	std	Y+21, r24	; 0x15
    3716:	9e 8b       	std	Y+22, r25	; 0x16
    3718:	af 8b       	std	Y+23, r26	; 0x17
    371a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    371c:	6d 89       	ldd	r22, Y+21	; 0x15
    371e:	7e 89       	ldd	r23, Y+22	; 0x16
    3720:	8f 89       	ldd	r24, Y+23	; 0x17
    3722:	98 8d       	ldd	r25, Y+24	; 0x18
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e8       	ldi	r20, 0x80	; 128
    372a:	5f e3       	ldi	r21, 0x3F	; 63
    372c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3730:	88 23       	and	r24, r24
    3732:	2c f4       	brge	.+10     	; 0x373e <HLCD_init+0xcc4>
		__ticks = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9c 8b       	std	Y+20, r25	; 0x14
    373a:	8b 8b       	std	Y+19, r24	; 0x13
    373c:	3f c0       	rjmp	.+126    	; 0x37bc <HLCD_init+0xd42>
	else if (__tmp > 65535)
    373e:	6d 89       	ldd	r22, Y+21	; 0x15
    3740:	7e 89       	ldd	r23, Y+22	; 0x16
    3742:	8f 89       	ldd	r24, Y+23	; 0x17
    3744:	98 8d       	ldd	r25, Y+24	; 0x18
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	3f ef       	ldi	r19, 0xFF	; 255
    374a:	4f e7       	ldi	r20, 0x7F	; 127
    374c:	57 e4       	ldi	r21, 0x47	; 71
    374e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3752:	18 16       	cp	r1, r24
    3754:	4c f5       	brge	.+82     	; 0x37a8 <HLCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3756:	69 8d       	ldd	r22, Y+25	; 0x19
    3758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    375a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    375c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e2       	ldi	r20, 0x20	; 32
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	9c 8b       	std	Y+20, r25	; 0x14
    377c:	8b 8b       	std	Y+19, r24	; 0x13
    377e:	0f c0       	rjmp	.+30     	; 0x379e <HLCD_init+0xd24>
    3780:	88 ec       	ldi	r24, 0xC8	; 200
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9a 8b       	std	Y+18, r25	; 0x12
    3786:	89 8b       	std	Y+17, r24	; 0x11
    3788:	89 89       	ldd	r24, Y+17	; 0x11
    378a:	9a 89       	ldd	r25, Y+18	; 0x12
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <HLCD_init+0xd12>
    3790:	9a 8b       	std	Y+18, r25	; 0x12
    3792:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3794:	8b 89       	ldd	r24, Y+19	; 0x13
    3796:	9c 89       	ldd	r25, Y+20	; 0x14
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	9c 8b       	std	Y+20, r25	; 0x14
    379c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379e:	8b 89       	ldd	r24, Y+19	; 0x13
    37a0:	9c 89       	ldd	r25, Y+20	; 0x14
    37a2:	00 97       	sbiw	r24, 0x00	; 0
    37a4:	69 f7       	brne	.-38     	; 0x3780 <HLCD_init+0xd06>
    37a6:	14 c0       	rjmp	.+40     	; 0x37d0 <HLCD_init+0xd56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a8:	6d 89       	ldd	r22, Y+21	; 0x15
    37aa:	7e 89       	ldd	r23, Y+22	; 0x16
    37ac:	8f 89       	ldd	r24, Y+23	; 0x17
    37ae:	98 8d       	ldd	r25, Y+24	; 0x18
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9c 8b       	std	Y+20, r25	; 0x14
    37ba:	8b 8b       	std	Y+19, r24	; 0x13
    37bc:	8b 89       	ldd	r24, Y+19	; 0x13
    37be:	9c 89       	ldd	r25, Y+20	; 0x14
    37c0:	98 8b       	std	Y+16, r25	; 0x10
    37c2:	8f 87       	std	Y+15, r24	; 0x0f
    37c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c6:	98 89       	ldd	r25, Y+16	; 0x10
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <HLCD_init+0xd4e>
    37cc:	98 8b       	std	Y+16, r25	; 0x10
    37ce:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CLEAR_COMMAND);
    37d0:	fe 01       	movw	r30, r28
    37d2:	e0 58       	subi	r30, 0x80	; 128
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	80 81       	ld	r24, Z
    37d8:	88 23       	and	r24, r24
    37da:	69 f4       	brne	.+26     	; 0x37f6 <HLCD_init+0xd7c>
    37dc:	fe 01       	movw	r30, r28
    37de:	e3 56       	subi	r30, 0x63	; 99
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	80 81       	ld	r24, Z
    37e4:	91 81       	ldd	r25, Z+1	; 0x01
    37e6:	61 e0       	ldi	r22, 0x01	; 1
    37e8:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    37ec:	fe 01       	movw	r30, r28
    37ee:	e0 58       	subi	r30, 0x80	; 128
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	80 83       	st	Z, r24
    37f4:	05 c0       	rjmp	.+10     	; 0x3800 <HLCD_init+0xd86>
			else lcdRet = HLCD_NOK;
    37f6:	fe 01       	movw	r30, r28
    37f8:	e0 58       	subi	r30, 0x80	; 128
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	80 83       	st	Z, r24
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	a0 e8       	ldi	r26, 0x80	; 128
    3806:	bf e3       	ldi	r27, 0x3F	; 63
    3808:	8b 87       	std	Y+11, r24	; 0x0b
    380a:	9c 87       	std	Y+12, r25	; 0x0c
    380c:	ad 87       	std	Y+13, r26	; 0x0d
    380e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3810:	6b 85       	ldd	r22, Y+11	; 0x0b
    3812:	7c 85       	ldd	r23, Y+12	; 0x0c
    3814:	8d 85       	ldd	r24, Y+13	; 0x0d
    3816:	9e 85       	ldd	r25, Y+14	; 0x0e
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	4a ef       	ldi	r20, 0xFA	; 250
    381e:	54 e4       	ldi	r21, 0x44	; 68
    3820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	8f 83       	std	Y+7, r24	; 0x07
    382a:	98 87       	std	Y+8, r25	; 0x08
    382c:	a9 87       	std	Y+9, r26	; 0x09
    382e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3830:	6f 81       	ldd	r22, Y+7	; 0x07
    3832:	78 85       	ldd	r23, Y+8	; 0x08
    3834:	89 85       	ldd	r24, Y+9	; 0x09
    3836:	9a 85       	ldd	r25, Y+10	; 0x0a
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e8       	ldi	r20, 0x80	; 128
    383e:	5f e3       	ldi	r21, 0x3F	; 63
    3840:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3844:	88 23       	and	r24, r24
    3846:	2c f4       	brge	.+10     	; 0x3852 <HLCD_init+0xdd8>
		__ticks = 1;
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	9e 83       	std	Y+6, r25	; 0x06
    384e:	8d 83       	std	Y+5, r24	; 0x05
    3850:	3f c0       	rjmp	.+126    	; 0x38d0 <HLCD_init+0xe56>
	else if (__tmp > 65535)
    3852:	6f 81       	ldd	r22, Y+7	; 0x07
    3854:	78 85       	ldd	r23, Y+8	; 0x08
    3856:	89 85       	ldd	r24, Y+9	; 0x09
    3858:	9a 85       	ldd	r25, Y+10	; 0x0a
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	3f ef       	ldi	r19, 0xFF	; 255
    385e:	4f e7       	ldi	r20, 0x7F	; 127
    3860:	57 e4       	ldi	r21, 0x47	; 71
    3862:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3866:	18 16       	cp	r1, r24
    3868:	4c f5       	brge	.+82     	; 0x38bc <HLCD_init+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386a:	6b 85       	ldd	r22, Y+11	; 0x0b
    386c:	7c 85       	ldd	r23, Y+12	; 0x0c
    386e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3870:	9e 85       	ldd	r25, Y+14	; 0x0e
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e2       	ldi	r20, 0x20	; 32
    3878:	51 e4       	ldi	r21, 0x41	; 65
    387a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	bc 01       	movw	r22, r24
    3884:	cd 01       	movw	r24, r26
    3886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	9e 83       	std	Y+6, r25	; 0x06
    3890:	8d 83       	std	Y+5, r24	; 0x05
    3892:	0f c0       	rjmp	.+30     	; 0x38b2 <HLCD_init+0xe38>
    3894:	88 ec       	ldi	r24, 0xC8	; 200
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	9c 83       	std	Y+4, r25	; 0x04
    389a:	8b 83       	std	Y+3, r24	; 0x03
    389c:	8b 81       	ldd	r24, Y+3	; 0x03
    389e:	9c 81       	ldd	r25, Y+4	; 0x04
    38a0:	01 97       	sbiw	r24, 0x01	; 1
    38a2:	f1 f7       	brne	.-4      	; 0x38a0 <HLCD_init+0xe26>
    38a4:	9c 83       	std	Y+4, r25	; 0x04
    38a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a8:	8d 81       	ldd	r24, Y+5	; 0x05
    38aa:	9e 81       	ldd	r25, Y+6	; 0x06
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	9e 83       	std	Y+6, r25	; 0x06
    38b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b2:	8d 81       	ldd	r24, Y+5	; 0x05
    38b4:	9e 81       	ldd	r25, Y+6	; 0x06
    38b6:	00 97       	sbiw	r24, 0x00	; 0
    38b8:	69 f7       	brne	.-38     	; 0x3894 <HLCD_init+0xe1a>
    38ba:	20 c0       	rjmp	.+64     	; 0x38fc <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38bc:	6f 81       	ldd	r22, Y+7	; 0x07
    38be:	78 85       	ldd	r23, Y+8	; 0x08
    38c0:	89 85       	ldd	r24, Y+9	; 0x09
    38c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	9e 83       	std	Y+6, r25	; 0x06
    38ce:	8d 83       	std	Y+5, r24	; 0x05
    38d0:	8d 81       	ldd	r24, Y+5	; 0x05
    38d2:	9e 81       	ldd	r25, Y+6	; 0x06
    38d4:	9a 83       	std	Y+2, r25	; 0x02
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	9a 81       	ldd	r25, Y+2	; 0x02
    38dc:	01 97       	sbiw	r24, 0x01	; 1
    38de:	f1 f7       	brne	.-4      	; 0x38dc <HLCD_init+0xe62>
    38e0:	9a 83       	std	Y+2, r25	; 0x02
    38e2:	89 83       	std	Y+1, r24	; 0x01
    38e4:	0b c0       	rjmp	.+22     	; 0x38fc <HLCD_init+0xe82>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    38e6:	fe 01       	movw	r30, r28
    38e8:	e0 58       	subi	r30, 0x80	; 128
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	83 e0       	ldi	r24, 0x03	; 3
    38ee:	80 83       	st	Z, r24
    38f0:	05 c0       	rjmp	.+10     	; 0x38fc <HLCD_init+0xe82>


	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    38f2:	fe 01       	movw	r30, r28
    38f4:	e0 58       	subi	r30, 0x80	; 128
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	82 e0       	ldi	r24, 0x02	; 2
    38fa:	80 83       	st	Z, r24
	}

	return lcdRet;
    38fc:	fe 01       	movw	r30, r28
    38fe:	e0 58       	subi	r30, 0x80	; 128
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	80 81       	ld	r24, Z
}
    3904:	c2 56       	subi	r28, 0x62	; 98
    3906:	df 4f       	sbci	r29, 0xFF	; 255
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	08 95       	ret

0000391c <HLCD_sendCmd>:

EN_HLCD_systemState_t HLCD_sendCmd(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Command)
{
    391c:	0f 93       	push	r16
    391e:	1f 93       	push	r17
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	ce 59       	subi	r28, 0x9E	; 158
    392a:	d0 40       	sbci	r29, 0x00	; 0
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	fe 01       	movw	r30, r28
    3938:	e5 56       	subi	r30, 0x65	; 101
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	91 83       	std	Z+1, r25	; 0x01
    393e:	80 83       	st	Z, r24
    3940:	fe 01       	movw	r30, r28
    3942:	e3 56       	subi	r30, 0x63	; 99
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    3948:	fe 01       	movw	r30, r28
    394a:	e2 57       	subi	r30, 0x72	; 114
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3952:	fe 01       	movw	r30, r28
    3954:	e3 57       	subi	r30, 0x73	; 115
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    395c:	fe 01       	movw	r30, r28
    395e:	e5 56       	subi	r30, 0x65	; 101
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 81       	ld	r24, Z
    3964:	91 81       	ldd	r25, Z+1	; 0x01
    3966:	00 97       	sbiw	r24, 0x00	; 0
    3968:	09 f4       	brne	.+2      	; 0x396c <HLCD_sendCmd+0x50>
    396a:	2c c7       	rjmp	.+3672   	; 0x47c4 <HLCD_sendCmd+0xea8>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    396c:	fe 01       	movw	r30, r28
    396e:	e5 56       	subi	r30, 0x65	; 101
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	01 90       	ld	r0, Z+
    3974:	f0 81       	ld	r31, Z
    3976:	e0 2d       	mov	r30, r0
    3978:	81 81       	ldd	r24, Z+1	; 0x01
    397a:	fe 01       	movw	r30, r28
    397c:	e5 56       	subi	r30, 0x65	; 101
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	01 90       	ld	r0, Z+
    3982:	f0 81       	ld	r31, Z
    3984:	e0 2d       	mov	r30, r0
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	fe 01       	movw	r30, r28
    398a:	e1 57       	subi	r30, 0x71	; 113
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	80 83       	st	Z, r24
    3990:	fe 01       	movw	r30, r28
    3992:	e1 57       	subi	r30, 0x71	; 113
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	91 83       	std	Z+1, r25	; 0x01
    3998:	fe 01       	movw	r30, r28
    399a:	e1 57       	subi	r30, 0x71	; 113
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	82 83       	std	Z+2, r24	; 0x02
    39a2:	fe 01       	movw	r30, r28
    39a4:	e1 57       	subi	r30, 0x71	; 113
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    39aa:	fe 01       	movw	r30, r28
    39ac:	e5 56       	subi	r30, 0x65	; 101
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	01 90       	ld	r0, Z+
    39b2:	f0 81       	ld	r31, Z
    39b4:	e0 2d       	mov	r30, r0
    39b6:	81 81       	ldd	r24, Z+1	; 0x01
    39b8:	fe 01       	movw	r30, r28
    39ba:	e5 56       	subi	r30, 0x65	; 101
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	01 90       	ld	r0, Z+
    39c0:	f0 81       	ld	r31, Z
    39c2:	e0 2d       	mov	r30, r0
    39c4:	94 81       	ldd	r25, Z+4	; 0x04
    39c6:	fe 01       	movw	r30, r28
    39c8:	ed 56       	subi	r30, 0x6D	; 109
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	80 83       	st	Z, r24
    39ce:	fe 01       	movw	r30, r28
    39d0:	ed 56       	subi	r30, 0x6D	; 109
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	fe 01       	movw	r30, r28
    39d8:	ed 56       	subi	r30, 0x6D	; 109
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	82 83       	std	Z+2, r24	; 0x02
    39e0:	fe 01       	movw	r30, r28
    39e2:	ed 56       	subi	r30, 0x6D	; 109
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    39e8:	fe 01       	movw	r30, r28
    39ea:	e5 56       	subi	r30, 0x65	; 101
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	01 90       	ld	r0, Z+
    39f0:	f0 81       	ld	r31, Z
    39f2:	e0 2d       	mov	r30, r0
    39f4:	81 81       	ldd	r24, Z+1	; 0x01
    39f6:	fe 01       	movw	r30, r28
    39f8:	e5 56       	subi	r30, 0x65	; 101
    39fa:	ff 4f       	sbci	r31, 0xFF	; 255
    39fc:	01 90       	ld	r0, Z+
    39fe:	f0 81       	ld	r31, Z
    3a00:	e0 2d       	mov	r30, r0
    3a02:	95 81       	ldd	r25, Z+5	; 0x05
    3a04:	fe 01       	movw	r30, r28
    3a06:	e9 56       	subi	r30, 0x69	; 105
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 83       	st	Z, r24
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e9 56       	subi	r30, 0x69	; 105
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	91 83       	std	Z+1, r25	; 0x01
    3a14:	fe 01       	movw	r30, r28
    3a16:	e9 56       	subi	r30, 0x69	; 105
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	82 83       	std	Z+2, r24	; 0x02
    3a1e:	fe 01       	movw	r30, r28
    3a20:	e9 56       	subi	r30, 0x69	; 105
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_LOW);
    3a26:	ce 01       	movw	r24, r28
    3a28:	81 57       	subi	r24, 0x71	; 113
    3a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2c:	60 e0       	ldi	r22, 0x00	; 0
    3a2e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3a32:	fe 01       	movw	r30, r28
    3a34:	e3 57       	subi	r30, 0x73	; 115
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	e3 57       	subi	r30, 0x73	; 115
    3a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a40:	80 81       	ld	r24, Z
    3a42:	88 23       	and	r24, r24
    3a44:	59 f4       	brne	.+22     	; 0x3a5c <HLCD_sendCmd+0x140>
    3a46:	ce 01       	movw	r24, r28
    3a48:	8d 56       	subi	r24, 0x6D	; 109
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3a52:	fe 01       	movw	r30, r28
    3a54:	e3 57       	subi	r30, 0x73	; 115
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	80 83       	st	Z, r24
    3a5a:	05 c0       	rjmp	.+10     	; 0x3a66 <HLCD_sendCmd+0x14a>
		else lcdRet = HLCD_NOK;
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	e2 57       	subi	r30, 0x72	; 114
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	80 83       	st	Z, r24
    3a66:	fe 01       	movw	r30, r28
    3a68:	e7 57       	subi	r30, 0x77	; 119
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	a0 ef       	ldi	r26, 0xF0	; 240
    3a72:	b1 e4       	ldi	r27, 0x41	; 65
    3a74:	80 83       	st	Z, r24
    3a76:	91 83       	std	Z+1, r25	; 0x01
    3a78:	a2 83       	std	Z+2, r26	; 0x02
    3a7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7c:	8e 01       	movw	r16, r28
    3a7e:	0b 57       	subi	r16, 0x7B	; 123
    3a80:	1f 4f       	sbci	r17, 0xFF	; 255
    3a82:	fe 01       	movw	r30, r28
    3a84:	e7 57       	subi	r30, 0x77	; 119
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	60 81       	ld	r22, Z
    3a8a:	71 81       	ldd	r23, Z+1	; 0x01
    3a8c:	82 81       	ldd	r24, Z+2	; 0x02
    3a8e:	93 81       	ldd	r25, Z+3	; 0x03
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	4a ef       	ldi	r20, 0xFA	; 250
    3a96:	54 e4       	ldi	r21, 0x44	; 68
    3a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	f8 01       	movw	r30, r16
    3aa2:	80 83       	st	Z, r24
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	a2 83       	std	Z+2, r26	; 0x02
    3aa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aaa:	fe 01       	movw	r30, r28
    3aac:	eb 57       	subi	r30, 0x7B	; 123
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	60 81       	ld	r22, Z
    3ab2:	71 81       	ldd	r23, Z+1	; 0x01
    3ab4:	82 81       	ldd	r24, Z+2	; 0x02
    3ab6:	93 81       	ldd	r25, Z+3	; 0x03
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e8       	ldi	r20, 0x80	; 128
    3abe:	5f e3       	ldi	r21, 0x3F	; 63
    3ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ac4:	88 23       	and	r24, r24
    3ac6:	44 f4       	brge	.+16     	; 0x3ad8 <HLCD_sendCmd+0x1bc>
		__ticks = 1;
    3ac8:	fe 01       	movw	r30, r28
    3aca:	ed 57       	subi	r30, 0x7D	; 125
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	91 83       	std	Z+1, r25	; 0x01
    3ad4:	80 83       	st	Z, r24
    3ad6:	64 c0       	rjmp	.+200    	; 0x3ba0 <HLCD_sendCmd+0x284>
	else if (__tmp > 65535)
    3ad8:	fe 01       	movw	r30, r28
    3ada:	eb 57       	subi	r30, 0x7B	; 123
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	60 81       	ld	r22, Z
    3ae0:	71 81       	ldd	r23, Z+1	; 0x01
    3ae2:	82 81       	ldd	r24, Z+2	; 0x02
    3ae4:	93 81       	ldd	r25, Z+3	; 0x03
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	3f ef       	ldi	r19, 0xFF	; 255
    3aea:	4f e7       	ldi	r20, 0x7F	; 127
    3aec:	57 e4       	ldi	r21, 0x47	; 71
    3aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3af2:	18 16       	cp	r1, r24
    3af4:	0c f0       	brlt	.+2      	; 0x3af8 <HLCD_sendCmd+0x1dc>
    3af6:	43 c0       	rjmp	.+134    	; 0x3b7e <HLCD_sendCmd+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af8:	fe 01       	movw	r30, r28
    3afa:	e7 57       	subi	r30, 0x77	; 119
    3afc:	ff 4f       	sbci	r31, 0xFF	; 255
    3afe:	60 81       	ld	r22, Z
    3b00:	71 81       	ldd	r23, Z+1	; 0x01
    3b02:	82 81       	ldd	r24, Z+2	; 0x02
    3b04:	93 81       	ldd	r25, Z+3	; 0x03
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e2       	ldi	r20, 0x20	; 32
    3b0c:	51 e4       	ldi	r21, 0x41	; 65
    3b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	8e 01       	movw	r16, r28
    3b18:	0d 57       	subi	r16, 0x7D	; 125
    3b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	f8 01       	movw	r30, r16
    3b2a:	91 83       	std	Z+1, r25	; 0x01
    3b2c:	80 83       	st	Z, r24
    3b2e:	1f c0       	rjmp	.+62     	; 0x3b6e <HLCD_sendCmd+0x252>
    3b30:	fe 01       	movw	r30, r28
    3b32:	ef 57       	subi	r30, 0x7F	; 127
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	88 ec       	ldi	r24, 0xC8	; 200
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
    3b3e:	fe 01       	movw	r30, r28
    3b40:	ef 57       	subi	r30, 0x7F	; 127
    3b42:	ff 4f       	sbci	r31, 0xFF	; 255
    3b44:	80 81       	ld	r24, Z
    3b46:	91 81       	ldd	r25, Z+1	; 0x01
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	f1 f7       	brne	.-4      	; 0x3b48 <HLCD_sendCmd+0x22c>
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	ef 57       	subi	r30, 0x7F	; 127
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	91 83       	std	Z+1, r25	; 0x01
    3b54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b56:	de 01       	movw	r26, r28
    3b58:	ad 57       	subi	r26, 0x7D	; 125
    3b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	ed 57       	subi	r30, 0x7D	; 125
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	80 81       	ld	r24, Z
    3b64:	91 81       	ldd	r25, Z+1	; 0x01
    3b66:	01 97       	sbiw	r24, 0x01	; 1
    3b68:	11 96       	adiw	r26, 0x01	; 1
    3b6a:	9c 93       	st	X, r25
    3b6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6e:	fe 01       	movw	r30, r28
    3b70:	ed 57       	subi	r30, 0x7D	; 125
    3b72:	ff 4f       	sbci	r31, 0xFF	; 255
    3b74:	80 81       	ld	r24, Z
    3b76:	91 81       	ldd	r25, Z+1	; 0x01
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	d1 f6       	brne	.-76     	; 0x3b30 <HLCD_sendCmd+0x214>
    3b7c:	28 c0       	rjmp	.+80     	; 0x3bce <HLCD_sendCmd+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7e:	8e 01       	movw	r16, r28
    3b80:	0d 57       	subi	r16, 0x7D	; 125
    3b82:	1f 4f       	sbci	r17, 0xFF	; 255
    3b84:	fe 01       	movw	r30, r28
    3b86:	eb 57       	subi	r30, 0x7B	; 123
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	60 81       	ld	r22, Z
    3b8c:	71 81       	ldd	r23, Z+1	; 0x01
    3b8e:	82 81       	ldd	r24, Z+2	; 0x02
    3b90:	93 81       	ldd	r25, Z+3	; 0x03
    3b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	80 83       	st	Z, r24
    3ba0:	de 01       	movw	r26, r28
    3ba2:	a1 58       	subi	r26, 0x81	; 129
    3ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	ed 57       	subi	r30, 0x7D	; 125
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	11 96       	adiw	r26, 0x01	; 1
    3bb2:	9c 93       	st	X, r25
    3bb4:	8e 93       	st	-X, r24
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e1 58       	subi	r30, 0x81	; 129
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	91 81       	ldd	r25, Z+1	; 0x01
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <HLCD_sendCmd+0x2a4>
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e1 58       	subi	r30, 0x81	; 129
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	91 83       	std	Z+1, r25	; 0x01
    3bcc:	80 83       	st	Z, r24

		_delay_ms(30);


		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e5 56       	subi	r30, 0x65	; 101
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	01 90       	ld	r0, Z+
    3bd6:	f0 81       	ld	r31, Z
    3bd8:	e0 2d       	mov	r30, r0
    3bda:	80 81       	ld	r24, Z
    3bdc:	88 23       	and	r24, r24
    3bde:	09 f0       	breq	.+2      	; 0x3be2 <HLCD_sendCmd+0x2c6>
    3be0:	3d c4       	rjmp	.+2170   	; 0x445c <HLCD_sendCmd+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    3be2:	fe 01       	movw	r30, r28
    3be4:	e3 57       	subi	r30, 0x73	; 115
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 81       	ld	r24, Z
    3bea:	88 23       	and	r24, r24
    3bec:	59 f4       	brne	.+22     	; 0x3c04 <HLCD_sendCmd+0x2e8>
    3bee:	ce 01       	movw	r24, r28
    3bf0:	89 56       	subi	r24, 0x69	; 105
    3bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf4:	61 e0       	ldi	r22, 0x01	; 1
    3bf6:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	e3 57       	subi	r30, 0x73	; 115
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	80 83       	st	Z, r24
    3c02:	05 c0       	rjmp	.+10     	; 0x3c0e <HLCD_sendCmd+0x2f2>
			else lcdRet = HLCD_NOK;
    3c04:	fe 01       	movw	r30, r28
    3c06:	e2 57       	subi	r30, 0x72	; 114
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	80 83       	st	Z, r24
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e5 58       	subi	r30, 0x85	; 133
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	a8 e4       	ldi	r26, 0x48	; 72
    3c1a:	b2 e4       	ldi	r27, 0x42	; 66
    3c1c:	80 83       	st	Z, r24
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	a2 83       	std	Z+2, r26	; 0x02
    3c22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c24:	8e 01       	movw	r16, r28
    3c26:	09 58       	subi	r16, 0x89	; 137
    3c28:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e5 58       	subi	r30, 0x85	; 133
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	60 81       	ld	r22, Z
    3c32:	71 81       	ldd	r23, Z+1	; 0x01
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	4a ef       	ldi	r20, 0xFA	; 250
    3c3e:	54 e4       	ldi	r21, 0x44	; 68
    3c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	f8 01       	movw	r30, r16
    3c4a:	80 83       	st	Z, r24
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	a2 83       	std	Z+2, r26	; 0x02
    3c50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c52:	fe 01       	movw	r30, r28
    3c54:	e9 58       	subi	r30, 0x89	; 137
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	60 81       	ld	r22, Z
    3c5a:	71 81       	ldd	r23, Z+1	; 0x01
    3c5c:	82 81       	ldd	r24, Z+2	; 0x02
    3c5e:	93 81       	ldd	r25, Z+3	; 0x03
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e8       	ldi	r20, 0x80	; 128
    3c66:	5f e3       	ldi	r21, 0x3F	; 63
    3c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c6c:	88 23       	and	r24, r24
    3c6e:	44 f4       	brge	.+16     	; 0x3c80 <HLCD_sendCmd+0x364>
		__ticks = 1;
    3c70:	fe 01       	movw	r30, r28
    3c72:	eb 58       	subi	r30, 0x8B	; 139
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	80 83       	st	Z, r24
    3c7e:	64 c0       	rjmp	.+200    	; 0x3d48 <HLCD_sendCmd+0x42c>
	else if (__tmp > 65535)
    3c80:	fe 01       	movw	r30, r28
    3c82:	e9 58       	subi	r30, 0x89	; 137
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	60 81       	ld	r22, Z
    3c88:	71 81       	ldd	r23, Z+1	; 0x01
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	3f ef       	ldi	r19, 0xFF	; 255
    3c92:	4f e7       	ldi	r20, 0x7F	; 127
    3c94:	57 e4       	ldi	r21, 0x47	; 71
    3c96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c9a:	18 16       	cp	r1, r24
    3c9c:	0c f0       	brlt	.+2      	; 0x3ca0 <HLCD_sendCmd+0x384>
    3c9e:	43 c0       	rjmp	.+134    	; 0x3d26 <HLCD_sendCmd+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e5 58       	subi	r30, 0x85	; 133
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	60 81       	ld	r22, Z
    3ca8:	71 81       	ldd	r23, Z+1	; 0x01
    3caa:	82 81       	ldd	r24, Z+2	; 0x02
    3cac:	93 81       	ldd	r25, Z+3	; 0x03
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e2       	ldi	r20, 0x20	; 32
    3cb4:	51 e4       	ldi	r21, 0x41	; 65
    3cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	8e 01       	movw	r16, r28
    3cc0:	0b 58       	subi	r16, 0x8B	; 139
    3cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc4:	bc 01       	movw	r22, r24
    3cc6:	cd 01       	movw	r24, r26
    3cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	f8 01       	movw	r30, r16
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	80 83       	st	Z, r24
    3cd6:	1f c0       	rjmp	.+62     	; 0x3d16 <HLCD_sendCmd+0x3fa>
    3cd8:	fe 01       	movw	r30, r28
    3cda:	ed 58       	subi	r30, 0x8D	; 141
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	88 ec       	ldi	r24, 0xC8	; 200
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	91 83       	std	Z+1, r25	; 0x01
    3ce4:	80 83       	st	Z, r24
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	ed 58       	subi	r30, 0x8D	; 141
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	80 81       	ld	r24, Z
    3cee:	91 81       	ldd	r25, Z+1	; 0x01
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	f1 f7       	brne	.-4      	; 0x3cf0 <HLCD_sendCmd+0x3d4>
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	ed 58       	subi	r30, 0x8D	; 141
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfe:	de 01       	movw	r26, r28
    3d00:	ab 58       	subi	r26, 0x8B	; 139
    3d02:	bf 4f       	sbci	r27, 0xFF	; 255
    3d04:	fe 01       	movw	r30, r28
    3d06:	eb 58       	subi	r30, 0x8B	; 139
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	11 96       	adiw	r26, 0x01	; 1
    3d12:	9c 93       	st	X, r25
    3d14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d16:	fe 01       	movw	r30, r28
    3d18:	eb 58       	subi	r30, 0x8B	; 139
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	80 81       	ld	r24, Z
    3d1e:	91 81       	ldd	r25, Z+1	; 0x01
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	d1 f6       	brne	.-76     	; 0x3cd8 <HLCD_sendCmd+0x3bc>
    3d24:	27 c0       	rjmp	.+78     	; 0x3d74 <HLCD_sendCmd+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d26:	8e 01       	movw	r16, r28
    3d28:	0b 58       	subi	r16, 0x8B	; 139
    3d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	e9 58       	subi	r30, 0x89	; 137
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	60 81       	ld	r22, Z
    3d34:	71 81       	ldd	r23, Z+1	; 0x01
    3d36:	82 81       	ldd	r24, Z+2	; 0x02
    3d38:	93 81       	ldd	r25, Z+3	; 0x03
    3d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	f8 01       	movw	r30, r16
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24
    3d48:	de 01       	movw	r26, r28
    3d4a:	af 58       	subi	r26, 0x8F	; 143
    3d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d4e:	fe 01       	movw	r30, r28
    3d50:	eb 58       	subi	r30, 0x8B	; 139
    3d52:	ff 4f       	sbci	r31, 0xFF	; 255
    3d54:	80 81       	ld	r24, Z
    3d56:	91 81       	ldd	r25, Z+1	; 0x01
    3d58:	8d 93       	st	X+, r24
    3d5a:	9c 93       	st	X, r25
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	ef 58       	subi	r30, 0x8F	; 143
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	80 81       	ld	r24, Z
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	01 97       	sbiw	r24, 0x01	; 1
    3d68:	f1 f7       	brne	.-4      	; 0x3d66 <HLCD_sendCmd+0x44a>
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	ef 58       	subi	r30, 0x8F	; 143
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	91 83       	std	Z+1, r25	; 0x01
    3d72:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Command;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Command & 0xF0);
			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command>>4);
    3d74:	fe 01       	movw	r30, r28
    3d76:	e5 56       	subi	r30, 0x65	; 101
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	01 90       	ld	r0, Z+
    3d7c:	f0 81       	ld	r31, Z
    3d7e:	e0 2d       	mov	r30, r0
    3d80:	22 81       	ldd	r18, Z+2	; 0x02
    3d82:	fe 01       	movw	r30, r28
    3d84:	e3 56       	subi	r30, 0x63	; 99
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 81       	ld	r24, Z
    3d8a:	98 2f       	mov	r25, r24
    3d8c:	92 95       	swap	r25
    3d8e:	9f 70       	andi	r25, 0x0F	; 15
    3d90:	82 2f       	mov	r24, r18
    3d92:	69 2f       	mov	r22, r25
    3d94:	0e 94 9e 08 	call	0x113c	; 0x113c <GPIO_set4msbValue>
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e3 59       	subi	r30, 0x93	; 147
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	a8 e4       	ldi	r26, 0x48	; 72
    3da4:	b2 e4       	ldi	r27, 0x42	; 66
    3da6:	80 83       	st	Z, r24
    3da8:	91 83       	std	Z+1, r25	; 0x01
    3daa:	a2 83       	std	Z+2, r26	; 0x02
    3dac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dae:	8e 01       	movw	r16, r28
    3db0:	07 59       	subi	r16, 0x97	; 151
    3db2:	1f 4f       	sbci	r17, 0xFF	; 255
    3db4:	fe 01       	movw	r30, r28
    3db6:	e3 59       	subi	r30, 0x93	; 147
    3db8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dba:	60 81       	ld	r22, Z
    3dbc:	71 81       	ldd	r23, Z+1	; 0x01
    3dbe:	82 81       	ldd	r24, Z+2	; 0x02
    3dc0:	93 81       	ldd	r25, Z+3	; 0x03
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	4a ef       	ldi	r20, 0xFA	; 250
    3dc8:	54 e4       	ldi	r21, 0x44	; 68
    3dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	f8 01       	movw	r30, r16
    3dd4:	80 83       	st	Z, r24
    3dd6:	91 83       	std	Z+1, r25	; 0x01
    3dd8:	a2 83       	std	Z+2, r26	; 0x02
    3dda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e7 59       	subi	r30, 0x97	; 151
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	60 81       	ld	r22, Z
    3de4:	71 81       	ldd	r23, Z+1	; 0x01
    3de6:	82 81       	ldd	r24, Z+2	; 0x02
    3de8:	93 81       	ldd	r25, Z+3	; 0x03
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	40 e8       	ldi	r20, 0x80	; 128
    3df0:	5f e3       	ldi	r21, 0x3F	; 63
    3df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3df6:	88 23       	and	r24, r24
    3df8:	44 f4       	brge	.+16     	; 0x3e0a <HLCD_sendCmd+0x4ee>
		__ticks = 1;
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e9 59       	subi	r30, 0x99	; 153
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	91 83       	std	Z+1, r25	; 0x01
    3e06:	80 83       	st	Z, r24
    3e08:	64 c0       	rjmp	.+200    	; 0x3ed2 <HLCD_sendCmd+0x5b6>
	else if (__tmp > 65535)
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e7 59       	subi	r30, 0x97	; 151
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	60 81       	ld	r22, Z
    3e12:	71 81       	ldd	r23, Z+1	; 0x01
    3e14:	82 81       	ldd	r24, Z+2	; 0x02
    3e16:	93 81       	ldd	r25, Z+3	; 0x03
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	3f ef       	ldi	r19, 0xFF	; 255
    3e1c:	4f e7       	ldi	r20, 0x7F	; 127
    3e1e:	57 e4       	ldi	r21, 0x47	; 71
    3e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e24:	18 16       	cp	r1, r24
    3e26:	0c f0       	brlt	.+2      	; 0x3e2a <HLCD_sendCmd+0x50e>
    3e28:	43 c0       	rjmp	.+134    	; 0x3eb0 <HLCD_sendCmd+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e3 59       	subi	r30, 0x93	; 147
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	60 81       	ld	r22, Z
    3e32:	71 81       	ldd	r23, Z+1	; 0x01
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e2       	ldi	r20, 0x20	; 32
    3e3e:	51 e4       	ldi	r21, 0x41	; 65
    3e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	8e 01       	movw	r16, r28
    3e4a:	09 59       	subi	r16, 0x99	; 153
    3e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4e:	bc 01       	movw	r22, r24
    3e50:	cd 01       	movw	r24, r26
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	f8 01       	movw	r30, r16
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	80 83       	st	Z, r24
    3e60:	1f c0       	rjmp	.+62     	; 0x3ea0 <HLCD_sendCmd+0x584>
    3e62:	fe 01       	movw	r30, r28
    3e64:	eb 59       	subi	r30, 0x9B	; 155
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	88 ec       	ldi	r24, 0xC8	; 200
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	91 83       	std	Z+1, r25	; 0x01
    3e6e:	80 83       	st	Z, r24
    3e70:	fe 01       	movw	r30, r28
    3e72:	eb 59       	subi	r30, 0x9B	; 155
    3e74:	ff 4f       	sbci	r31, 0xFF	; 255
    3e76:	80 81       	ld	r24, Z
    3e78:	91 81       	ldd	r25, Z+1	; 0x01
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	f1 f7       	brne	.-4      	; 0x3e7a <HLCD_sendCmd+0x55e>
    3e7e:	fe 01       	movw	r30, r28
    3e80:	eb 59       	subi	r30, 0x9B	; 155
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	91 83       	std	Z+1, r25	; 0x01
    3e86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e88:	de 01       	movw	r26, r28
    3e8a:	a9 59       	subi	r26, 0x99	; 153
    3e8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e9 59       	subi	r30, 0x99	; 153
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	80 81       	ld	r24, Z
    3e96:	91 81       	ldd	r25, Z+1	; 0x01
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	11 96       	adiw	r26, 0x01	; 1
    3e9c:	9c 93       	st	X, r25
    3e9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e9 59       	subi	r30, 0x99	; 153
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	80 81       	ld	r24, Z
    3ea8:	91 81       	ldd	r25, Z+1	; 0x01
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	d1 f6       	brne	.-76     	; 0x3e62 <HLCD_sendCmd+0x546>
    3eae:	28 c0       	rjmp	.+80     	; 0x3f00 <HLCD_sendCmd+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb0:	8e 01       	movw	r16, r28
    3eb2:	09 59       	subi	r16, 0x99	; 153
    3eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	e7 59       	subi	r30, 0x97	; 151
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	60 81       	ld	r22, Z
    3ebe:	71 81       	ldd	r23, Z+1	; 0x01
    3ec0:	82 81       	ldd	r24, Z+2	; 0x02
    3ec2:	93 81       	ldd	r25, Z+3	; 0x03
    3ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	f8 01       	movw	r30, r16
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	de 01       	movw	r26, r28
    3ed4:	ad 59       	subi	r26, 0x9D	; 157
    3ed6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ed8:	fe 01       	movw	r30, r28
    3eda:	e9 59       	subi	r30, 0x99	; 153
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	80 81       	ld	r24, Z
    3ee0:	91 81       	ldd	r25, Z+1	; 0x01
    3ee2:	11 96       	adiw	r26, 0x01	; 1
    3ee4:	9c 93       	st	X, r25
    3ee6:	8e 93       	st	-X, r24
    3ee8:	fe 01       	movw	r30, r28
    3eea:	ed 59       	subi	r30, 0x9D	; 157
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	80 81       	ld	r24, Z
    3ef0:	91 81       	ldd	r25, Z+1	; 0x01
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <HLCD_sendCmd+0x5d6>
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	ed 59       	subi	r30, 0x9D	; 157
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3f00:	fe 01       	movw	r30, r28
    3f02:	e3 57       	subi	r30, 0x73	; 115
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	80 81       	ld	r24, Z
    3f08:	88 23       	and	r24, r24
    3f0a:	59 f4       	brne	.+22     	; 0x3f22 <HLCD_sendCmd+0x606>
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	89 56       	subi	r24, 0x69	; 105
    3f10:	9f 4f       	sbci	r25, 0xFF	; 255
    3f12:	60 e0       	ldi	r22, 0x00	; 0
    3f14:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e3 57       	subi	r30, 0x73	; 115
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	80 83       	st	Z, r24
    3f20:	05 c0       	rjmp	.+10     	; 0x3f2c <HLCD_sendCmd+0x610>
			else lcdRet = HLCD_NOK;
    3f22:	fe 01       	movw	r30, r28
    3f24:	e2 57       	subi	r30, 0x72	; 114
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	80 83       	st	Z, r24
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	e1 5a       	subi	r30, 0xA1	; 161
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	a8 e4       	ldi	r26, 0x48	; 72
    3f38:	b2 e4       	ldi	r27, 0x42	; 66
    3f3a:	80 83       	st	Z, r24
    3f3c:	91 83       	std	Z+1, r25	; 0x01
    3f3e:	a2 83       	std	Z+2, r26	; 0x02
    3f40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f42:	8e 01       	movw	r16, r28
    3f44:	05 5a       	subi	r16, 0xA5	; 165
    3f46:	1f 4f       	sbci	r17, 0xFF	; 255
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e1 5a       	subi	r30, 0xA1	; 161
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	60 81       	ld	r22, Z
    3f50:	71 81       	ldd	r23, Z+1	; 0x01
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	93 81       	ldd	r25, Z+3	; 0x03
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	4a ef       	ldi	r20, 0xFA	; 250
    3f5c:	54 e4       	ldi	r21, 0x44	; 68
    3f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	f8 01       	movw	r30, r16
    3f68:	80 83       	st	Z, r24
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	a2 83       	std	Z+2, r26	; 0x02
    3f6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f70:	fe 01       	movw	r30, r28
    3f72:	e5 5a       	subi	r30, 0xA5	; 165
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	60 81       	ld	r22, Z
    3f78:	71 81       	ldd	r23, Z+1	; 0x01
    3f7a:	82 81       	ldd	r24, Z+2	; 0x02
    3f7c:	93 81       	ldd	r25, Z+3	; 0x03
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e8       	ldi	r20, 0x80	; 128
    3f84:	5f e3       	ldi	r21, 0x3F	; 63
    3f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f8a:	88 23       	and	r24, r24
    3f8c:	44 f4       	brge	.+16     	; 0x3f9e <HLCD_sendCmd+0x682>
		__ticks = 1;
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e7 5a       	subi	r30, 0xA7	; 167
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	80 83       	st	Z, r24
    3f9c:	64 c0       	rjmp	.+200    	; 0x4066 <HLCD_sendCmd+0x74a>
	else if (__tmp > 65535)
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e5 5a       	subi	r30, 0xA5	; 165
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	60 81       	ld	r22, Z
    3fa6:	71 81       	ldd	r23, Z+1	; 0x01
    3fa8:	82 81       	ldd	r24, Z+2	; 0x02
    3faa:	93 81       	ldd	r25, Z+3	; 0x03
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	3f ef       	ldi	r19, 0xFF	; 255
    3fb0:	4f e7       	ldi	r20, 0x7F	; 127
    3fb2:	57 e4       	ldi	r21, 0x47	; 71
    3fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fb8:	18 16       	cp	r1, r24
    3fba:	0c f0       	brlt	.+2      	; 0x3fbe <HLCD_sendCmd+0x6a2>
    3fbc:	43 c0       	rjmp	.+134    	; 0x4044 <HLCD_sendCmd+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e1 5a       	subi	r30, 0xA1	; 161
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	60 81       	ld	r22, Z
    3fc6:	71 81       	ldd	r23, Z+1	; 0x01
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	93 81       	ldd	r25, Z+3	; 0x03
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e2       	ldi	r20, 0x20	; 32
    3fd2:	51 e4       	ldi	r21, 0x41	; 65
    3fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	8e 01       	movw	r16, r28
    3fde:	07 5a       	subi	r16, 0xA7	; 167
    3fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe2:	bc 01       	movw	r22, r24
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	f8 01       	movw	r30, r16
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	80 83       	st	Z, r24
    3ff4:	1f c0       	rjmp	.+62     	; 0x4034 <HLCD_sendCmd+0x718>
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e9 5a       	subi	r30, 0xA9	; 169
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	88 ec       	ldi	r24, 0xC8	; 200
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	91 83       	std	Z+1, r25	; 0x01
    4002:	80 83       	st	Z, r24
    4004:	fe 01       	movw	r30, r28
    4006:	e9 5a       	subi	r30, 0xA9	; 169
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	f1 f7       	brne	.-4      	; 0x400e <HLCD_sendCmd+0x6f2>
    4012:	fe 01       	movw	r30, r28
    4014:	e9 5a       	subi	r30, 0xA9	; 169
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	91 83       	std	Z+1, r25	; 0x01
    401a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401c:	de 01       	movw	r26, r28
    401e:	a7 5a       	subi	r26, 0xA7	; 167
    4020:	bf 4f       	sbci	r27, 0xFF	; 255
    4022:	fe 01       	movw	r30, r28
    4024:	e7 5a       	subi	r30, 0xA7	; 167
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	80 81       	ld	r24, Z
    402a:	91 81       	ldd	r25, Z+1	; 0x01
    402c:	01 97       	sbiw	r24, 0x01	; 1
    402e:	11 96       	adiw	r26, 0x01	; 1
    4030:	9c 93       	st	X, r25
    4032:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4034:	fe 01       	movw	r30, r28
    4036:	e7 5a       	subi	r30, 0xA7	; 167
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	80 81       	ld	r24, Z
    403c:	91 81       	ldd	r25, Z+1	; 0x01
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	d1 f6       	brne	.-76     	; 0x3ff6 <HLCD_sendCmd+0x6da>
    4042:	28 c0       	rjmp	.+80     	; 0x4094 <HLCD_sendCmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4044:	8e 01       	movw	r16, r28
    4046:	07 5a       	subi	r16, 0xA7	; 167
    4048:	1f 4f       	sbci	r17, 0xFF	; 255
    404a:	fe 01       	movw	r30, r28
    404c:	e5 5a       	subi	r30, 0xA5	; 165
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	60 81       	ld	r22, Z
    4052:	71 81       	ldd	r23, Z+1	; 0x01
    4054:	82 81       	ldd	r24, Z+2	; 0x02
    4056:	93 81       	ldd	r25, Z+3	; 0x03
    4058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	f8 01       	movw	r30, r16
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	80 83       	st	Z, r24
    4066:	de 01       	movw	r26, r28
    4068:	ab 5a       	subi	r26, 0xAB	; 171
    406a:	bf 4f       	sbci	r27, 0xFF	; 255
    406c:	fe 01       	movw	r30, r28
    406e:	e7 5a       	subi	r30, 0xA7	; 167
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	91 81       	ldd	r25, Z+1	; 0x01
    4076:	11 96       	adiw	r26, 0x01	; 1
    4078:	9c 93       	st	X, r25
    407a:	8e 93       	st	-X, r24
    407c:	fe 01       	movw	r30, r28
    407e:	eb 5a       	subi	r30, 0xAB	; 171
    4080:	ff 4f       	sbci	r31, 0xFF	; 255
    4082:	80 81       	ld	r24, Z
    4084:	91 81       	ldd	r25, Z+1	; 0x01
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	f1 f7       	brne	.-4      	; 0x4086 <HLCD_sendCmd+0x76a>
    408a:	fe 01       	movw	r30, r28
    408c:	eb 5a       	subi	r30, 0xAB	; 171
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	91 83       	std	Z+1, r25	; 0x01
    4092:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4094:	fe 01       	movw	r30, r28
    4096:	e3 57       	subi	r30, 0x73	; 115
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 81       	ld	r24, Z
    409c:	88 23       	and	r24, r24
    409e:	59 f4       	brne	.+22     	; 0x40b6 <HLCD_sendCmd+0x79a>
    40a0:	ce 01       	movw	r24, r28
    40a2:	89 56       	subi	r24, 0x69	; 105
    40a4:	9f 4f       	sbci	r25, 0xFF	; 255
    40a6:	61 e0       	ldi	r22, 0x01	; 1
    40a8:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    40ac:	fe 01       	movw	r30, r28
    40ae:	e3 57       	subi	r30, 0x73	; 115
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	80 83       	st	Z, r24
    40b4:	05 c0       	rjmp	.+10     	; 0x40c0 <HLCD_sendCmd+0x7a4>
			else lcdRet = HLCD_NOK;
    40b6:	fe 01       	movw	r30, r28
    40b8:	e2 57       	subi	r30, 0x72	; 114
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	80 83       	st	Z, r24
    40c0:	fe 01       	movw	r30, r28
    40c2:	ef 5a       	subi	r30, 0xAF	; 175
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	a8 e4       	ldi	r26, 0x48	; 72
    40cc:	b2 e4       	ldi	r27, 0x42	; 66
    40ce:	80 83       	st	Z, r24
    40d0:	91 83       	std	Z+1, r25	; 0x01
    40d2:	a2 83       	std	Z+2, r26	; 0x02
    40d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40d6:	8e 01       	movw	r16, r28
    40d8:	03 5b       	subi	r16, 0xB3	; 179
    40da:	1f 4f       	sbci	r17, 0xFF	; 255
    40dc:	fe 01       	movw	r30, r28
    40de:	ef 5a       	subi	r30, 0xAF	; 175
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	60 81       	ld	r22, Z
    40e4:	71 81       	ldd	r23, Z+1	; 0x01
    40e6:	82 81       	ldd	r24, Z+2	; 0x02
    40e8:	93 81       	ldd	r25, Z+3	; 0x03
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	4a ef       	ldi	r20, 0xFA	; 250
    40f0:	54 e4       	ldi	r21, 0x44	; 68
    40f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	f8 01       	movw	r30, r16
    40fc:	80 83       	st	Z, r24
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	a2 83       	std	Z+2, r26	; 0x02
    4102:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4104:	fe 01       	movw	r30, r28
    4106:	e3 5b       	subi	r30, 0xB3	; 179
    4108:	ff 4f       	sbci	r31, 0xFF	; 255
    410a:	60 81       	ld	r22, Z
    410c:	71 81       	ldd	r23, Z+1	; 0x01
    410e:	82 81       	ldd	r24, Z+2	; 0x02
    4110:	93 81       	ldd	r25, Z+3	; 0x03
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	40 e8       	ldi	r20, 0x80	; 128
    4118:	5f e3       	ldi	r21, 0x3F	; 63
    411a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    411e:	88 23       	and	r24, r24
    4120:	44 f4       	brge	.+16     	; 0x4132 <HLCD_sendCmd+0x816>
		__ticks = 1;
    4122:	fe 01       	movw	r30, r28
    4124:	e5 5b       	subi	r30, 0xB5	; 181
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	91 83       	std	Z+1, r25	; 0x01
    412e:	80 83       	st	Z, r24
    4130:	64 c0       	rjmp	.+200    	; 0x41fa <HLCD_sendCmd+0x8de>
	else if (__tmp > 65535)
    4132:	fe 01       	movw	r30, r28
    4134:	e3 5b       	subi	r30, 0xB3	; 179
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	60 81       	ld	r22, Z
    413a:	71 81       	ldd	r23, Z+1	; 0x01
    413c:	82 81       	ldd	r24, Z+2	; 0x02
    413e:	93 81       	ldd	r25, Z+3	; 0x03
    4140:	20 e0       	ldi	r18, 0x00	; 0
    4142:	3f ef       	ldi	r19, 0xFF	; 255
    4144:	4f e7       	ldi	r20, 0x7F	; 127
    4146:	57 e4       	ldi	r21, 0x47	; 71
    4148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    414c:	18 16       	cp	r1, r24
    414e:	0c f0       	brlt	.+2      	; 0x4152 <HLCD_sendCmd+0x836>
    4150:	43 c0       	rjmp	.+134    	; 0x41d8 <HLCD_sendCmd+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4152:	fe 01       	movw	r30, r28
    4154:	ef 5a       	subi	r30, 0xAF	; 175
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	60 81       	ld	r22, Z
    415a:	71 81       	ldd	r23, Z+1	; 0x01
    415c:	82 81       	ldd	r24, Z+2	; 0x02
    415e:	93 81       	ldd	r25, Z+3	; 0x03
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	40 e2       	ldi	r20, 0x20	; 32
    4166:	51 e4       	ldi	r21, 0x41	; 65
    4168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	8e 01       	movw	r16, r28
    4172:	05 5b       	subi	r16, 0xB5	; 181
    4174:	1f 4f       	sbci	r17, 0xFF	; 255
    4176:	bc 01       	movw	r22, r24
    4178:	cd 01       	movw	r24, r26
    417a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	f8 01       	movw	r30, r16
    4184:	91 83       	std	Z+1, r25	; 0x01
    4186:	80 83       	st	Z, r24
    4188:	1f c0       	rjmp	.+62     	; 0x41c8 <HLCD_sendCmd+0x8ac>
    418a:	fe 01       	movw	r30, r28
    418c:	e7 5b       	subi	r30, 0xB7	; 183
    418e:	ff 4f       	sbci	r31, 0xFF	; 255
    4190:	88 ec       	ldi	r24, 0xC8	; 200
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	80 83       	st	Z, r24
    4198:	fe 01       	movw	r30, r28
    419a:	e7 5b       	subi	r30, 0xB7	; 183
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 81       	ld	r24, Z
    41a0:	91 81       	ldd	r25, Z+1	; 0x01
    41a2:	01 97       	sbiw	r24, 0x01	; 1
    41a4:	f1 f7       	brne	.-4      	; 0x41a2 <HLCD_sendCmd+0x886>
    41a6:	fe 01       	movw	r30, r28
    41a8:	e7 5b       	subi	r30, 0xB7	; 183
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b0:	de 01       	movw	r26, r28
    41b2:	a5 5b       	subi	r26, 0xB5	; 181
    41b4:	bf 4f       	sbci	r27, 0xFF	; 255
    41b6:	fe 01       	movw	r30, r28
    41b8:	e5 5b       	subi	r30, 0xB5	; 181
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 81       	ld	r24, Z
    41be:	91 81       	ldd	r25, Z+1	; 0x01
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	11 96       	adiw	r26, 0x01	; 1
    41c4:	9c 93       	st	X, r25
    41c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c8:	fe 01       	movw	r30, r28
    41ca:	e5 5b       	subi	r30, 0xB5	; 181
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	91 81       	ldd	r25, Z+1	; 0x01
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	d1 f6       	brne	.-76     	; 0x418a <HLCD_sendCmd+0x86e>
    41d6:	27 c0       	rjmp	.+78     	; 0x4226 <HLCD_sendCmd+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d8:	8e 01       	movw	r16, r28
    41da:	05 5b       	subi	r16, 0xB5	; 181
    41dc:	1f 4f       	sbci	r17, 0xFF	; 255
    41de:	fe 01       	movw	r30, r28
    41e0:	e3 5b       	subi	r30, 0xB3	; 179
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	60 81       	ld	r22, Z
    41e6:	71 81       	ldd	r23, Z+1	; 0x01
    41e8:	82 81       	ldd	r24, Z+2	; 0x02
    41ea:	93 81       	ldd	r25, Z+3	; 0x03
    41ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	f8 01       	movw	r30, r16
    41f6:	91 83       	std	Z+1, r25	; 0x01
    41f8:	80 83       	st	Z, r24
    41fa:	de 01       	movw	r26, r28
    41fc:	a9 5b       	subi	r26, 0xB9	; 185
    41fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4200:	fe 01       	movw	r30, r28
    4202:	e5 5b       	subi	r30, 0xB5	; 181
    4204:	ff 4f       	sbci	r31, 0xFF	; 255
    4206:	80 81       	ld	r24, Z
    4208:	91 81       	ldd	r25, Z+1	; 0x01
    420a:	8d 93       	st	X+, r24
    420c:	9c 93       	st	X, r25
    420e:	fe 01       	movw	r30, r28
    4210:	e9 5b       	subi	r30, 0xB9	; 185
    4212:	ff 4f       	sbci	r31, 0xFF	; 255
    4214:	80 81       	ld	r24, Z
    4216:	91 81       	ldd	r25, Z+1	; 0x01
    4218:	01 97       	sbiw	r24, 0x01	; 1
    421a:	f1 f7       	brne	.-4      	; 0x4218 <HLCD_sendCmd+0x8fc>
    421c:	fe 01       	movw	r30, r28
    421e:	e9 5b       	subi	r30, 0xB9	; 185
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	91 83       	std	Z+1, r25	; 0x01
    4224:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Command<<4);
			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Command& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command);
    4226:	fe 01       	movw	r30, r28
    4228:	e5 56       	subi	r30, 0x65	; 101
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	01 90       	ld	r0, Z+
    422e:	f0 81       	ld	r31, Z
    4230:	e0 2d       	mov	r30, r0
    4232:	82 81       	ldd	r24, Z+2	; 0x02
    4234:	fe 01       	movw	r30, r28
    4236:	e3 56       	subi	r30, 0x63	; 99
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	60 81       	ld	r22, Z
    423c:	0e 94 9e 08 	call	0x113c	; 0x113c <GPIO_set4msbValue>
    4240:	fe 01       	movw	r30, r28
    4242:	ed 5b       	subi	r30, 0xBD	; 189
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	a8 e4       	ldi	r26, 0x48	; 72
    424c:	b2 e4       	ldi	r27, 0x42	; 66
    424e:	80 83       	st	Z, r24
    4250:	91 83       	std	Z+1, r25	; 0x01
    4252:	a2 83       	std	Z+2, r26	; 0x02
    4254:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4256:	8e 01       	movw	r16, r28
    4258:	01 5c       	subi	r16, 0xC1	; 193
    425a:	1f 4f       	sbci	r17, 0xFF	; 255
    425c:	fe 01       	movw	r30, r28
    425e:	ed 5b       	subi	r30, 0xBD	; 189
    4260:	ff 4f       	sbci	r31, 0xFF	; 255
    4262:	60 81       	ld	r22, Z
    4264:	71 81       	ldd	r23, Z+1	; 0x01
    4266:	82 81       	ldd	r24, Z+2	; 0x02
    4268:	93 81       	ldd	r25, Z+3	; 0x03
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	4a ef       	ldi	r20, 0xFA	; 250
    4270:	54 e4       	ldi	r21, 0x44	; 68
    4272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	f8 01       	movw	r30, r16
    427c:	80 83       	st	Z, r24
    427e:	91 83       	std	Z+1, r25	; 0x01
    4280:	a2 83       	std	Z+2, r26	; 0x02
    4282:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4284:	fe 01       	movw	r30, r28
    4286:	ff 96       	adiw	r30, 0x3f	; 63
    4288:	60 81       	ld	r22, Z
    428a:	71 81       	ldd	r23, Z+1	; 0x01
    428c:	82 81       	ldd	r24, Z+2	; 0x02
    428e:	93 81       	ldd	r25, Z+3	; 0x03
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	40 e8       	ldi	r20, 0x80	; 128
    4296:	5f e3       	ldi	r21, 0x3F	; 63
    4298:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    429c:	88 23       	and	r24, r24
    429e:	2c f4       	brge	.+10     	; 0x42aa <HLCD_sendCmd+0x98e>
		__ticks = 1;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	9e af       	std	Y+62, r25	; 0x3e
    42a6:	8d af       	std	Y+61, r24	; 0x3d
    42a8:	46 c0       	rjmp	.+140    	; 0x4336 <HLCD_sendCmd+0xa1a>
	else if (__tmp > 65535)
    42aa:	fe 01       	movw	r30, r28
    42ac:	ff 96       	adiw	r30, 0x3f	; 63
    42ae:	60 81       	ld	r22, Z
    42b0:	71 81       	ldd	r23, Z+1	; 0x01
    42b2:	82 81       	ldd	r24, Z+2	; 0x02
    42b4:	93 81       	ldd	r25, Z+3	; 0x03
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	3f ef       	ldi	r19, 0xFF	; 255
    42ba:	4f e7       	ldi	r20, 0x7F	; 127
    42bc:	57 e4       	ldi	r21, 0x47	; 71
    42be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42c2:	18 16       	cp	r1, r24
    42c4:	64 f5       	brge	.+88     	; 0x431e <HLCD_sendCmd+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c6:	fe 01       	movw	r30, r28
    42c8:	ed 5b       	subi	r30, 0xBD	; 189
    42ca:	ff 4f       	sbci	r31, 0xFF	; 255
    42cc:	60 81       	ld	r22, Z
    42ce:	71 81       	ldd	r23, Z+1	; 0x01
    42d0:	82 81       	ldd	r24, Z+2	; 0x02
    42d2:	93 81       	ldd	r25, Z+3	; 0x03
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	40 e2       	ldi	r20, 0x20	; 32
    42da:	51 e4       	ldi	r21, 0x41	; 65
    42dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	bc 01       	movw	r22, r24
    42e6:	cd 01       	movw	r24, r26
    42e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ec:	dc 01       	movw	r26, r24
    42ee:	cb 01       	movw	r24, r22
    42f0:	9e af       	std	Y+62, r25	; 0x3e
    42f2:	8d af       	std	Y+61, r24	; 0x3d
    42f4:	0f c0       	rjmp	.+30     	; 0x4314 <HLCD_sendCmd+0x9f8>
    42f6:	88 ec       	ldi	r24, 0xC8	; 200
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	9c af       	std	Y+60, r25	; 0x3c
    42fc:	8b af       	std	Y+59, r24	; 0x3b
    42fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    4300:	9c ad       	ldd	r25, Y+60	; 0x3c
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	f1 f7       	brne	.-4      	; 0x4302 <HLCD_sendCmd+0x9e6>
    4306:	9c af       	std	Y+60, r25	; 0x3c
    4308:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    430a:	8d ad       	ldd	r24, Y+61	; 0x3d
    430c:	9e ad       	ldd	r25, Y+62	; 0x3e
    430e:	01 97       	sbiw	r24, 0x01	; 1
    4310:	9e af       	std	Y+62, r25	; 0x3e
    4312:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4314:	8d ad       	ldd	r24, Y+61	; 0x3d
    4316:	9e ad       	ldd	r25, Y+62	; 0x3e
    4318:	00 97       	sbiw	r24, 0x00	; 0
    431a:	69 f7       	brne	.-38     	; 0x42f6 <HLCD_sendCmd+0x9da>
    431c:	16 c0       	rjmp	.+44     	; 0x434a <HLCD_sendCmd+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    431e:	fe 01       	movw	r30, r28
    4320:	ff 96       	adiw	r30, 0x3f	; 63
    4322:	60 81       	ld	r22, Z
    4324:	71 81       	ldd	r23, Z+1	; 0x01
    4326:	82 81       	ldd	r24, Z+2	; 0x02
    4328:	93 81       	ldd	r25, Z+3	; 0x03
    432a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	9e af       	std	Y+62, r25	; 0x3e
    4334:	8d af       	std	Y+61, r24	; 0x3d
    4336:	8d ad       	ldd	r24, Y+61	; 0x3d
    4338:	9e ad       	ldd	r25, Y+62	; 0x3e
    433a:	9a af       	std	Y+58, r25	; 0x3a
    433c:	89 af       	std	Y+57, r24	; 0x39
    433e:	89 ad       	ldd	r24, Y+57	; 0x39
    4340:	9a ad       	ldd	r25, Y+58	; 0x3a
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	f1 f7       	brne	.-4      	; 0x4342 <HLCD_sendCmd+0xa26>
    4346:	9a af       	std	Y+58, r25	; 0x3a
    4348:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    434a:	fe 01       	movw	r30, r28
    434c:	e3 57       	subi	r30, 0x73	; 115
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	80 81       	ld	r24, Z
    4352:	88 23       	and	r24, r24
    4354:	59 f4       	brne	.+22     	; 0x436c <HLCD_sendCmd+0xa50>
    4356:	ce 01       	movw	r24, r28
    4358:	89 56       	subi	r24, 0x69	; 105
    435a:	9f 4f       	sbci	r25, 0xFF	; 255
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    4362:	fe 01       	movw	r30, r28
    4364:	e3 57       	subi	r30, 0x73	; 115
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	80 83       	st	Z, r24
    436a:	05 c0       	rjmp	.+10     	; 0x4376 <HLCD_sendCmd+0xa5a>
			else lcdRet = HLCD_NOK;
    436c:	fe 01       	movw	r30, r28
    436e:	e2 57       	subi	r30, 0x72	; 114
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	80 83       	st	Z, r24
    4376:	80 e0       	ldi	r24, 0x00	; 0
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	a8 e4       	ldi	r26, 0x48	; 72
    437c:	b2 e4       	ldi	r27, 0x42	; 66
    437e:	8d ab       	std	Y+53, r24	; 0x35
    4380:	9e ab       	std	Y+54, r25	; 0x36
    4382:	af ab       	std	Y+55, r26	; 0x37
    4384:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4386:	6d a9       	ldd	r22, Y+53	; 0x35
    4388:	7e a9       	ldd	r23, Y+54	; 0x36
    438a:	8f a9       	ldd	r24, Y+55	; 0x37
    438c:	98 ad       	ldd	r25, Y+56	; 0x38
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	4a ef       	ldi	r20, 0xFA	; 250
    4394:	54 e4       	ldi	r21, 0x44	; 68
    4396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	89 ab       	std	Y+49, r24	; 0x31
    43a0:	9a ab       	std	Y+50, r25	; 0x32
    43a2:	ab ab       	std	Y+51, r26	; 0x33
    43a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    43a6:	69 a9       	ldd	r22, Y+49	; 0x31
    43a8:	7a a9       	ldd	r23, Y+50	; 0x32
    43aa:	8b a9       	ldd	r24, Y+51	; 0x33
    43ac:	9c a9       	ldd	r25, Y+52	; 0x34
    43ae:	20 e0       	ldi	r18, 0x00	; 0
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	40 e8       	ldi	r20, 0x80	; 128
    43b4:	5f e3       	ldi	r21, 0x3F	; 63
    43b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43ba:	88 23       	and	r24, r24
    43bc:	2c f4       	brge	.+10     	; 0x43c8 <HLCD_sendCmd+0xaac>
		__ticks = 1;
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	98 ab       	std	Y+48, r25	; 0x30
    43c4:	8f a7       	std	Y+47, r24	; 0x2f
    43c6:	3f c0       	rjmp	.+126    	; 0x4446 <HLCD_sendCmd+0xb2a>
	else if (__tmp > 65535)
    43c8:	69 a9       	ldd	r22, Y+49	; 0x31
    43ca:	7a a9       	ldd	r23, Y+50	; 0x32
    43cc:	8b a9       	ldd	r24, Y+51	; 0x33
    43ce:	9c a9       	ldd	r25, Y+52	; 0x34
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	3f ef       	ldi	r19, 0xFF	; 255
    43d4:	4f e7       	ldi	r20, 0x7F	; 127
    43d6:	57 e4       	ldi	r21, 0x47	; 71
    43d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43dc:	18 16       	cp	r1, r24
    43de:	4c f5       	brge	.+82     	; 0x4432 <HLCD_sendCmd+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e0:	6d a9       	ldd	r22, Y+53	; 0x35
    43e2:	7e a9       	ldd	r23, Y+54	; 0x36
    43e4:	8f a9       	ldd	r24, Y+55	; 0x37
    43e6:	98 ad       	ldd	r25, Y+56	; 0x38
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	40 e2       	ldi	r20, 0x20	; 32
    43ee:	51 e4       	ldi	r21, 0x41	; 65
    43f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	bc 01       	movw	r22, r24
    43fa:	cd 01       	movw	r24, r26
    43fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	98 ab       	std	Y+48, r25	; 0x30
    4406:	8f a7       	std	Y+47, r24	; 0x2f
    4408:	0f c0       	rjmp	.+30     	; 0x4428 <HLCD_sendCmd+0xb0c>
    440a:	88 ec       	ldi	r24, 0xC8	; 200
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	9e a7       	std	Y+46, r25	; 0x2e
    4410:	8d a7       	std	Y+45, r24	; 0x2d
    4412:	8d a5       	ldd	r24, Y+45	; 0x2d
    4414:	9e a5       	ldd	r25, Y+46	; 0x2e
    4416:	01 97       	sbiw	r24, 0x01	; 1
    4418:	f1 f7       	brne	.-4      	; 0x4416 <HLCD_sendCmd+0xafa>
    441a:	9e a7       	std	Y+46, r25	; 0x2e
    441c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    441e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4420:	98 a9       	ldd	r25, Y+48	; 0x30
    4422:	01 97       	sbiw	r24, 0x01	; 1
    4424:	98 ab       	std	Y+48, r25	; 0x30
    4426:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4428:	8f a5       	ldd	r24, Y+47	; 0x2f
    442a:	98 a9       	ldd	r25, Y+48	; 0x30
    442c:	00 97       	sbiw	r24, 0x00	; 0
    442e:	69 f7       	brne	.-38     	; 0x440a <HLCD_sendCmd+0xaee>
    4430:	b8 c1       	rjmp	.+880    	; 0x47a2 <HLCD_sendCmd+0xe86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4432:	69 a9       	ldd	r22, Y+49	; 0x31
    4434:	7a a9       	ldd	r23, Y+50	; 0x32
    4436:	8b a9       	ldd	r24, Y+51	; 0x33
    4438:	9c a9       	ldd	r25, Y+52	; 0x34
    443a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	98 ab       	std	Y+48, r25	; 0x30
    4444:	8f a7       	std	Y+47, r24	; 0x2f
    4446:	8f a5       	ldd	r24, Y+47	; 0x2f
    4448:	98 a9       	ldd	r25, Y+48	; 0x30
    444a:	9c a7       	std	Y+44, r25	; 0x2c
    444c:	8b a7       	std	Y+43, r24	; 0x2b
    444e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4450:	9c a5       	ldd	r25, Y+44	; 0x2c
    4452:	01 97       	sbiw	r24, 0x01	; 1
    4454:	f1 f7       	brne	.-4      	; 0x4452 <HLCD_sendCmd+0xb36>
    4456:	9c a7       	std	Y+44, r25	; 0x2c
    4458:	8b a7       	std	Y+43, r24	; 0x2b
    445a:	a3 c1       	rjmp	.+838    	; 0x47a2 <HLCD_sendCmd+0xe86>

			_delay_ms(50);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    445c:	fe 01       	movw	r30, r28
    445e:	e5 56       	subi	r30, 0x65	; 101
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	01 90       	ld	r0, Z+
    4464:	f0 81       	ld	r31, Z
    4466:	e0 2d       	mov	r30, r0
    4468:	80 81       	ld	r24, Z
    446a:	81 30       	cpi	r24, 0x01	; 1
    446c:	09 f0       	breq	.+2      	; 0x4470 <HLCD_sendCmd+0xb54>
    446e:	94 c1       	rjmp	.+808    	; 0x4798 <HLCD_sendCmd+0xe7c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4470:	fe 01       	movw	r30, r28
    4472:	e3 57       	subi	r30, 0x73	; 115
    4474:	ff 4f       	sbci	r31, 0xFF	; 255
    4476:	80 81       	ld	r24, Z
    4478:	88 23       	and	r24, r24
    447a:	59 f4       	brne	.+22     	; 0x4492 <HLCD_sendCmd+0xb76>
    447c:	ce 01       	movw	r24, r28
    447e:	89 56       	subi	r24, 0x69	; 105
    4480:	9f 4f       	sbci	r25, 0xFF	; 255
    4482:	61 e0       	ldi	r22, 0x01	; 1
    4484:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    4488:	fe 01       	movw	r30, r28
    448a:	e3 57       	subi	r30, 0x73	; 115
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	80 83       	st	Z, r24
    4490:	05 c0       	rjmp	.+10     	; 0x449c <HLCD_sendCmd+0xb80>
			else lcdRet = HLCD_NOK;
    4492:	fe 01       	movw	r30, r28
    4494:	e2 57       	subi	r30, 0x72	; 114
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	80 83       	st	Z, r24
    449c:	80 e0       	ldi	r24, 0x00	; 0
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	a0 e8       	ldi	r26, 0x80	; 128
    44a2:	bf e3       	ldi	r27, 0x3F	; 63
    44a4:	8f a3       	std	Y+39, r24	; 0x27
    44a6:	98 a7       	std	Y+40, r25	; 0x28
    44a8:	a9 a7       	std	Y+41, r26	; 0x29
    44aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ac:	6f a1       	ldd	r22, Y+39	; 0x27
    44ae:	78 a5       	ldd	r23, Y+40	; 0x28
    44b0:	89 a5       	ldd	r24, Y+41	; 0x29
    44b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	4a ef       	ldi	r20, 0xFA	; 250
    44ba:	54 e4       	ldi	r21, 0x44	; 68
    44bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	8b a3       	std	Y+35, r24	; 0x23
    44c6:	9c a3       	std	Y+36, r25	; 0x24
    44c8:	ad a3       	std	Y+37, r26	; 0x25
    44ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44cc:	6b a1       	ldd	r22, Y+35	; 0x23
    44ce:	7c a1       	ldd	r23, Y+36	; 0x24
    44d0:	8d a1       	ldd	r24, Y+37	; 0x25
    44d2:	9e a1       	ldd	r25, Y+38	; 0x26
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	40 e8       	ldi	r20, 0x80	; 128
    44da:	5f e3       	ldi	r21, 0x3F	; 63
    44dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44e0:	88 23       	and	r24, r24
    44e2:	2c f4       	brge	.+10     	; 0x44ee <HLCD_sendCmd+0xbd2>
		__ticks = 1;
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	9a a3       	std	Y+34, r25	; 0x22
    44ea:	89 a3       	std	Y+33, r24	; 0x21
    44ec:	3f c0       	rjmp	.+126    	; 0x456c <HLCD_sendCmd+0xc50>
	else if (__tmp > 65535)
    44ee:	6b a1       	ldd	r22, Y+35	; 0x23
    44f0:	7c a1       	ldd	r23, Y+36	; 0x24
    44f2:	8d a1       	ldd	r24, Y+37	; 0x25
    44f4:	9e a1       	ldd	r25, Y+38	; 0x26
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	3f ef       	ldi	r19, 0xFF	; 255
    44fa:	4f e7       	ldi	r20, 0x7F	; 127
    44fc:	57 e4       	ldi	r21, 0x47	; 71
    44fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4502:	18 16       	cp	r1, r24
    4504:	4c f5       	brge	.+82     	; 0x4558 <HLCD_sendCmd+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4506:	6f a1       	ldd	r22, Y+39	; 0x27
    4508:	78 a5       	ldd	r23, Y+40	; 0x28
    450a:	89 a5       	ldd	r24, Y+41	; 0x29
    450c:	9a a5       	ldd	r25, Y+42	; 0x2a
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	40 e2       	ldi	r20, 0x20	; 32
    4514:	51 e4       	ldi	r21, 0x41	; 65
    4516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	bc 01       	movw	r22, r24
    4520:	cd 01       	movw	r24, r26
    4522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
    452a:	9a a3       	std	Y+34, r25	; 0x22
    452c:	89 a3       	std	Y+33, r24	; 0x21
    452e:	0f c0       	rjmp	.+30     	; 0x454e <HLCD_sendCmd+0xc32>
    4530:	88 ec       	ldi	r24, 0xC8	; 200
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	98 a3       	std	Y+32, r25	; 0x20
    4536:	8f 8f       	std	Y+31, r24	; 0x1f
    4538:	8f 8d       	ldd	r24, Y+31	; 0x1f
    453a:	98 a1       	ldd	r25, Y+32	; 0x20
    453c:	01 97       	sbiw	r24, 0x01	; 1
    453e:	f1 f7       	brne	.-4      	; 0x453c <HLCD_sendCmd+0xc20>
    4540:	98 a3       	std	Y+32, r25	; 0x20
    4542:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4544:	89 a1       	ldd	r24, Y+33	; 0x21
    4546:	9a a1       	ldd	r25, Y+34	; 0x22
    4548:	01 97       	sbiw	r24, 0x01	; 1
    454a:	9a a3       	std	Y+34, r25	; 0x22
    454c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    454e:	89 a1       	ldd	r24, Y+33	; 0x21
    4550:	9a a1       	ldd	r25, Y+34	; 0x22
    4552:	00 97       	sbiw	r24, 0x00	; 0
    4554:	69 f7       	brne	.-38     	; 0x4530 <HLCD_sendCmd+0xc14>
    4556:	14 c0       	rjmp	.+40     	; 0x4580 <HLCD_sendCmd+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4558:	6b a1       	ldd	r22, Y+35	; 0x23
    455a:	7c a1       	ldd	r23, Y+36	; 0x24
    455c:	8d a1       	ldd	r24, Y+37	; 0x25
    455e:	9e a1       	ldd	r25, Y+38	; 0x26
    4560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	9a a3       	std	Y+34, r25	; 0x22
    456a:	89 a3       	std	Y+33, r24	; 0x21
    456c:	89 a1       	ldd	r24, Y+33	; 0x21
    456e:	9a a1       	ldd	r25, Y+34	; 0x22
    4570:	9e 8f       	std	Y+30, r25	; 0x1e
    4572:	8d 8f       	std	Y+29, r24	; 0x1d
    4574:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4576:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4578:	01 97       	sbiw	r24, 0x01	; 1
    457a:	f1 f7       	brne	.-4      	; 0x4578 <HLCD_sendCmd+0xc5c>
    457c:	9e 8f       	std	Y+30, r25	; 0x1e
    457e:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);
			PORTB_REG &= 0;
    4580:	e8 e3       	ldi	r30, 0x38	; 56
    4582:	f0 e0       	ldi	r31, 0x00	; 0
    4584:	80 81       	ld	r24, Z
    4586:	e8 e3       	ldi	r30, 0x38	; 56
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	10 82       	st	Z, r1
			PORTB_REG |= Copy_u8Command;
    458c:	a8 e3       	ldi	r26, 0x38	; 56
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	e8 e3       	ldi	r30, 0x38	; 56
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	90 81       	ld	r25, Z
    4596:	fe 01       	movw	r30, r28
    4598:	e3 56       	subi	r30, 0x63	; 99
    459a:	ff 4f       	sbci	r31, 0xFF	; 255
    459c:	80 81       	ld	r24, Z
    459e:	89 2b       	or	r24, r25
    45a0:	8c 93       	st	X, r24
    45a2:	80 e0       	ldi	r24, 0x00	; 0
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	a0 e8       	ldi	r26, 0x80	; 128
    45a8:	bf e3       	ldi	r27, 0x3F	; 63
    45aa:	89 8f       	std	Y+25, r24	; 0x19
    45ac:	9a 8f       	std	Y+26, r25	; 0x1a
    45ae:	ab 8f       	std	Y+27, r26	; 0x1b
    45b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45b2:	69 8d       	ldd	r22, Y+25	; 0x19
    45b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	4a ef       	ldi	r20, 0xFA	; 250
    45c0:	54 e4       	ldi	r21, 0x44	; 68
    45c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c6:	dc 01       	movw	r26, r24
    45c8:	cb 01       	movw	r24, r22
    45ca:	8d 8b       	std	Y+21, r24	; 0x15
    45cc:	9e 8b       	std	Y+22, r25	; 0x16
    45ce:	af 8b       	std	Y+23, r26	; 0x17
    45d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45d2:	6d 89       	ldd	r22, Y+21	; 0x15
    45d4:	7e 89       	ldd	r23, Y+22	; 0x16
    45d6:	8f 89       	ldd	r24, Y+23	; 0x17
    45d8:	98 8d       	ldd	r25, Y+24	; 0x18
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	40 e8       	ldi	r20, 0x80	; 128
    45e0:	5f e3       	ldi	r21, 0x3F	; 63
    45e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45e6:	88 23       	and	r24, r24
    45e8:	2c f4       	brge	.+10     	; 0x45f4 <HLCD_sendCmd+0xcd8>
		__ticks = 1;
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	9c 8b       	std	Y+20, r25	; 0x14
    45f0:	8b 8b       	std	Y+19, r24	; 0x13
    45f2:	3f c0       	rjmp	.+126    	; 0x4672 <HLCD_sendCmd+0xd56>
	else if (__tmp > 65535)
    45f4:	6d 89       	ldd	r22, Y+21	; 0x15
    45f6:	7e 89       	ldd	r23, Y+22	; 0x16
    45f8:	8f 89       	ldd	r24, Y+23	; 0x17
    45fa:	98 8d       	ldd	r25, Y+24	; 0x18
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	3f ef       	ldi	r19, 0xFF	; 255
    4600:	4f e7       	ldi	r20, 0x7F	; 127
    4602:	57 e4       	ldi	r21, 0x47	; 71
    4604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4608:	18 16       	cp	r1, r24
    460a:	4c f5       	brge	.+82     	; 0x465e <HLCD_sendCmd+0xd42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    460c:	69 8d       	ldd	r22, Y+25	; 0x19
    460e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	40 e2       	ldi	r20, 0x20	; 32
    461a:	51 e4       	ldi	r21, 0x41	; 65
    461c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	bc 01       	movw	r22, r24
    4626:	cd 01       	movw	r24, r26
    4628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	9c 8b       	std	Y+20, r25	; 0x14
    4632:	8b 8b       	std	Y+19, r24	; 0x13
    4634:	0f c0       	rjmp	.+30     	; 0x4654 <HLCD_sendCmd+0xd38>
    4636:	88 ec       	ldi	r24, 0xC8	; 200
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	9a 8b       	std	Y+18, r25	; 0x12
    463c:	89 8b       	std	Y+17, r24	; 0x11
    463e:	89 89       	ldd	r24, Y+17	; 0x11
    4640:	9a 89       	ldd	r25, Y+18	; 0x12
    4642:	01 97       	sbiw	r24, 0x01	; 1
    4644:	f1 f7       	brne	.-4      	; 0x4642 <HLCD_sendCmd+0xd26>
    4646:	9a 8b       	std	Y+18, r25	; 0x12
    4648:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    464a:	8b 89       	ldd	r24, Y+19	; 0x13
    464c:	9c 89       	ldd	r25, Y+20	; 0x14
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	9c 8b       	std	Y+20, r25	; 0x14
    4652:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4654:	8b 89       	ldd	r24, Y+19	; 0x13
    4656:	9c 89       	ldd	r25, Y+20	; 0x14
    4658:	00 97       	sbiw	r24, 0x00	; 0
    465a:	69 f7       	brne	.-38     	; 0x4636 <HLCD_sendCmd+0xd1a>
    465c:	14 c0       	rjmp	.+40     	; 0x4686 <HLCD_sendCmd+0xd6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465e:	6d 89       	ldd	r22, Y+21	; 0x15
    4660:	7e 89       	ldd	r23, Y+22	; 0x16
    4662:	8f 89       	ldd	r24, Y+23	; 0x17
    4664:	98 8d       	ldd	r25, Y+24	; 0x18
    4666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	9c 8b       	std	Y+20, r25	; 0x14
    4670:	8b 8b       	std	Y+19, r24	; 0x13
    4672:	8b 89       	ldd	r24, Y+19	; 0x13
    4674:	9c 89       	ldd	r25, Y+20	; 0x14
    4676:	98 8b       	std	Y+16, r25	; 0x10
    4678:	8f 87       	std	Y+15, r24	; 0x0f
    467a:	8f 85       	ldd	r24, Y+15	; 0x0f
    467c:	98 89       	ldd	r25, Y+16	; 0x10
    467e:	01 97       	sbiw	r24, 0x01	; 1
    4680:	f1 f7       	brne	.-4      	; 0x467e <HLCD_sendCmd+0xd62>
    4682:	98 8b       	std	Y+16, r25	; 0x10
    4684:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    4686:	fe 01       	movw	r30, r28
    4688:	e3 57       	subi	r30, 0x73	; 115
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	80 81       	ld	r24, Z
    468e:	88 23       	and	r24, r24
    4690:	59 f4       	brne	.+22     	; 0x46a8 <HLCD_sendCmd+0xd8c>
    4692:	ce 01       	movw	r24, r28
    4694:	89 56       	subi	r24, 0x69	; 105
    4696:	9f 4f       	sbci	r25, 0xFF	; 255
    4698:	60 e0       	ldi	r22, 0x00	; 0
    469a:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    469e:	fe 01       	movw	r30, r28
    46a0:	e3 57       	subi	r30, 0x73	; 115
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	80 83       	st	Z, r24
    46a6:	05 c0       	rjmp	.+10     	; 0x46b2 <HLCD_sendCmd+0xd96>
			else lcdRet = HLCD_NOK;
    46a8:	fe 01       	movw	r30, r28
    46aa:	e2 57       	subi	r30, 0x72	; 114
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	80 83       	st	Z, r24
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	a0 e8       	ldi	r26, 0x80	; 128
    46b8:	bf e3       	ldi	r27, 0x3F	; 63
    46ba:	8b 87       	std	Y+11, r24	; 0x0b
    46bc:	9c 87       	std	Y+12, r25	; 0x0c
    46be:	ad 87       	std	Y+13, r26	; 0x0d
    46c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	4a ef       	ldi	r20, 0xFA	; 250
    46d0:	54 e4       	ldi	r21, 0x44	; 68
    46d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	8f 83       	std	Y+7, r24	; 0x07
    46dc:	98 87       	std	Y+8, r25	; 0x08
    46de:	a9 87       	std	Y+9, r26	; 0x09
    46e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46e2:	6f 81       	ldd	r22, Y+7	; 0x07
    46e4:	78 85       	ldd	r23, Y+8	; 0x08
    46e6:	89 85       	ldd	r24, Y+9	; 0x09
    46e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	40 e8       	ldi	r20, 0x80	; 128
    46f0:	5f e3       	ldi	r21, 0x3F	; 63
    46f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46f6:	88 23       	and	r24, r24
    46f8:	2c f4       	brge	.+10     	; 0x4704 <HLCD_sendCmd+0xde8>
		__ticks = 1;
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	9e 83       	std	Y+6, r25	; 0x06
    4700:	8d 83       	std	Y+5, r24	; 0x05
    4702:	3f c0       	rjmp	.+126    	; 0x4782 <HLCD_sendCmd+0xe66>
	else if (__tmp > 65535)
    4704:	6f 81       	ldd	r22, Y+7	; 0x07
    4706:	78 85       	ldd	r23, Y+8	; 0x08
    4708:	89 85       	ldd	r24, Y+9	; 0x09
    470a:	9a 85       	ldd	r25, Y+10	; 0x0a
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	3f ef       	ldi	r19, 0xFF	; 255
    4710:	4f e7       	ldi	r20, 0x7F	; 127
    4712:	57 e4       	ldi	r21, 0x47	; 71
    4714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4718:	18 16       	cp	r1, r24
    471a:	4c f5       	brge	.+82     	; 0x476e <HLCD_sendCmd+0xe52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    471c:	6b 85       	ldd	r22, Y+11	; 0x0b
    471e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4720:	8d 85       	ldd	r24, Y+13	; 0x0d
    4722:	9e 85       	ldd	r25, Y+14	; 0x0e
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	40 e2       	ldi	r20, 0x20	; 32
    472a:	51 e4       	ldi	r21, 0x41	; 65
    472c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4730:	dc 01       	movw	r26, r24
    4732:	cb 01       	movw	r24, r22
    4734:	bc 01       	movw	r22, r24
    4736:	cd 01       	movw	r24, r26
    4738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473c:	dc 01       	movw	r26, r24
    473e:	cb 01       	movw	r24, r22
    4740:	9e 83       	std	Y+6, r25	; 0x06
    4742:	8d 83       	std	Y+5, r24	; 0x05
    4744:	0f c0       	rjmp	.+30     	; 0x4764 <HLCD_sendCmd+0xe48>
    4746:	88 ec       	ldi	r24, 0xC8	; 200
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	9c 83       	std	Y+4, r25	; 0x04
    474c:	8b 83       	std	Y+3, r24	; 0x03
    474e:	8b 81       	ldd	r24, Y+3	; 0x03
    4750:	9c 81       	ldd	r25, Y+4	; 0x04
    4752:	01 97       	sbiw	r24, 0x01	; 1
    4754:	f1 f7       	brne	.-4      	; 0x4752 <HLCD_sendCmd+0xe36>
    4756:	9c 83       	std	Y+4, r25	; 0x04
    4758:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475a:	8d 81       	ldd	r24, Y+5	; 0x05
    475c:	9e 81       	ldd	r25, Y+6	; 0x06
    475e:	01 97       	sbiw	r24, 0x01	; 1
    4760:	9e 83       	std	Y+6, r25	; 0x06
    4762:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4764:	8d 81       	ldd	r24, Y+5	; 0x05
    4766:	9e 81       	ldd	r25, Y+6	; 0x06
    4768:	00 97       	sbiw	r24, 0x00	; 0
    476a:	69 f7       	brne	.-38     	; 0x4746 <HLCD_sendCmd+0xe2a>
    476c:	1a c0       	rjmp	.+52     	; 0x47a2 <HLCD_sendCmd+0xe86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    476e:	6f 81       	ldd	r22, Y+7	; 0x07
    4770:	78 85       	ldd	r23, Y+8	; 0x08
    4772:	89 85       	ldd	r24, Y+9	; 0x09
    4774:	9a 85       	ldd	r25, Y+10	; 0x0a
    4776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477a:	dc 01       	movw	r26, r24
    477c:	cb 01       	movw	r24, r22
    477e:	9e 83       	std	Y+6, r25	; 0x06
    4780:	8d 83       	std	Y+5, r24	; 0x05
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	9a 83       	std	Y+2, r25	; 0x02
    4788:	89 83       	std	Y+1, r24	; 0x01
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	9a 81       	ldd	r25, Y+2	; 0x02
    478e:	01 97       	sbiw	r24, 0x01	; 1
    4790:	f1 f7       	brne	.-4      	; 0x478e <HLCD_sendCmd+0xe72>
    4792:	9a 83       	std	Y+2, r25	; 0x02
    4794:	89 83       	std	Y+1, r24	; 0x01
    4796:	05 c0       	rjmp	.+10     	; 0x47a2 <HLCD_sendCmd+0xe86>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4798:	fe 01       	movw	r30, r28
    479a:	e2 57       	subi	r30, 0x72	; 114
    479c:	ff 4f       	sbci	r31, 0xFF	; 255
    479e:	83 e0       	ldi	r24, 0x03	; 3
    47a0:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    47a2:	fe 01       	movw	r30, r28
    47a4:	e3 57       	subi	r30, 0x73	; 115
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	80 81       	ld	r24, Z
    47aa:	88 23       	and	r24, r24
    47ac:	29 f4       	brne	.+10     	; 0x47b8 <HLCD_sendCmd+0xe9c>
    47ae:	fe 01       	movw	r30, r28
    47b0:	e2 57       	subi	r30, 0x72	; 114
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	10 82       	st	Z, r1
    47b6:	0b c0       	rjmp	.+22     	; 0x47ce <HLCD_sendCmd+0xeb2>
		else lcdRet = HLCD_NOK;
    47b8:	fe 01       	movw	r30, r28
    47ba:	e2 57       	subi	r30, 0x72	; 114
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	80 83       	st	Z, r24
    47c2:	05 c0       	rjmp	.+10     	; 0x47ce <HLCD_sendCmd+0xeb2>
	}
	else
	{
		lcdRet = HLCD_NOK;
    47c4:	fe 01       	movw	r30, r28
    47c6:	e2 57       	subi	r30, 0x72	; 114
    47c8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	80 83       	st	Z, r24
	}

	return lcdRet;
    47ce:	fe 01       	movw	r30, r28
    47d0:	e2 57       	subi	r30, 0x72	; 114
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	80 81       	ld	r24, Z
}
    47d6:	c2 56       	subi	r28, 0x62	; 98
    47d8:	df 4f       	sbci	r29, 0xFF	; 255
    47da:	0f b6       	in	r0, 0x3f	; 63
    47dc:	f8 94       	cli
    47de:	de bf       	out	0x3e, r29	; 62
    47e0:	0f be       	out	0x3f, r0	; 63
    47e2:	cd bf       	out	0x3d, r28	; 61
    47e4:	cf 91       	pop	r28
    47e6:	df 91       	pop	r29
    47e8:	1f 91       	pop	r17
    47ea:	0f 91       	pop	r16
    47ec:	08 95       	ret

000047ee <HLCD_displayChar>:

EN_HLCD_systemState_t HLCD_displayChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Char)
{
    47ee:	0f 93       	push	r16
    47f0:	1f 93       	push	r17
    47f2:	df 93       	push	r29
    47f4:	cf 93       	push	r28
    47f6:	cd b7       	in	r28, 0x3d	; 61
    47f8:	de b7       	in	r29, 0x3e	; 62
    47fa:	ce 59       	subi	r28, 0x9E	; 158
    47fc:	d0 40       	sbci	r29, 0x00	; 0
    47fe:	0f b6       	in	r0, 0x3f	; 63
    4800:	f8 94       	cli
    4802:	de bf       	out	0x3e, r29	; 62
    4804:	0f be       	out	0x3f, r0	; 63
    4806:	cd bf       	out	0x3d, r28	; 61
    4808:	fe 01       	movw	r30, r28
    480a:	e5 56       	subi	r30, 0x65	; 101
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	91 83       	std	Z+1, r25	; 0x01
    4810:	80 83       	st	Z, r24
    4812:	fe 01       	movw	r30, r28
    4814:	e3 56       	subi	r30, 0x63	; 99
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    481a:	fe 01       	movw	r30, r28
    481c:	e2 57       	subi	r30, 0x72	; 114
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	81 e0       	ldi	r24, 0x01	; 1
    4822:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    4824:	fe 01       	movw	r30, r28
    4826:	e3 57       	subi	r30, 0x73	; 115
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    482e:	fe 01       	movw	r30, r28
    4830:	e5 56       	subi	r30, 0x65	; 101
    4832:	ff 4f       	sbci	r31, 0xFF	; 255
    4834:	80 81       	ld	r24, Z
    4836:	91 81       	ldd	r25, Z+1	; 0x01
    4838:	00 97       	sbiw	r24, 0x00	; 0
    483a:	09 f4       	brne	.+2      	; 0x483e <HLCD_displayChar+0x50>
    483c:	2c c7       	rjmp	.+3672   	; 0x5696 <HLCD_displayChar+0xea8>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    483e:	fe 01       	movw	r30, r28
    4840:	e5 56       	subi	r30, 0x65	; 101
    4842:	ff 4f       	sbci	r31, 0xFF	; 255
    4844:	01 90       	ld	r0, Z+
    4846:	f0 81       	ld	r31, Z
    4848:	e0 2d       	mov	r30, r0
    484a:	81 81       	ldd	r24, Z+1	; 0x01
    484c:	fe 01       	movw	r30, r28
    484e:	e5 56       	subi	r30, 0x65	; 101
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	01 90       	ld	r0, Z+
    4854:	f0 81       	ld	r31, Z
    4856:	e0 2d       	mov	r30, r0
    4858:	93 81       	ldd	r25, Z+3	; 0x03
    485a:	fe 01       	movw	r30, r28
    485c:	e1 57       	subi	r30, 0x71	; 113
    485e:	ff 4f       	sbci	r31, 0xFF	; 255
    4860:	80 83       	st	Z, r24
    4862:	fe 01       	movw	r30, r28
    4864:	e1 57       	subi	r30, 0x71	; 113
    4866:	ff 4f       	sbci	r31, 0xFF	; 255
    4868:	91 83       	std	Z+1, r25	; 0x01
    486a:	fe 01       	movw	r30, r28
    486c:	e1 57       	subi	r30, 0x71	; 113
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	81 e0       	ldi	r24, 0x01	; 1
    4872:	82 83       	std	Z+2, r24	; 0x02
    4874:	fe 01       	movw	r30, r28
    4876:	e1 57       	subi	r30, 0x71	; 113
    4878:	ff 4f       	sbci	r31, 0xFF	; 255
    487a:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    487c:	fe 01       	movw	r30, r28
    487e:	e5 56       	subi	r30, 0x65	; 101
    4880:	ff 4f       	sbci	r31, 0xFF	; 255
    4882:	01 90       	ld	r0, Z+
    4884:	f0 81       	ld	r31, Z
    4886:	e0 2d       	mov	r30, r0
    4888:	81 81       	ldd	r24, Z+1	; 0x01
    488a:	fe 01       	movw	r30, r28
    488c:	e5 56       	subi	r30, 0x65	; 101
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	01 90       	ld	r0, Z+
    4892:	f0 81       	ld	r31, Z
    4894:	e0 2d       	mov	r30, r0
    4896:	94 81       	ldd	r25, Z+4	; 0x04
    4898:	fe 01       	movw	r30, r28
    489a:	ed 56       	subi	r30, 0x6D	; 109
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	80 83       	st	Z, r24
    48a0:	fe 01       	movw	r30, r28
    48a2:	ed 56       	subi	r30, 0x6D	; 109
    48a4:	ff 4f       	sbci	r31, 0xFF	; 255
    48a6:	91 83       	std	Z+1, r25	; 0x01
    48a8:	fe 01       	movw	r30, r28
    48aa:	ed 56       	subi	r30, 0x6D	; 109
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	82 83       	std	Z+2, r24	; 0x02
    48b2:	fe 01       	movw	r30, r28
    48b4:	ed 56       	subi	r30, 0x6D	; 109
    48b6:	ff 4f       	sbci	r31, 0xFF	; 255
    48b8:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    48ba:	fe 01       	movw	r30, r28
    48bc:	e5 56       	subi	r30, 0x65	; 101
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	01 90       	ld	r0, Z+
    48c2:	f0 81       	ld	r31, Z
    48c4:	e0 2d       	mov	r30, r0
    48c6:	81 81       	ldd	r24, Z+1	; 0x01
    48c8:	fe 01       	movw	r30, r28
    48ca:	e5 56       	subi	r30, 0x65	; 101
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	01 90       	ld	r0, Z+
    48d0:	f0 81       	ld	r31, Z
    48d2:	e0 2d       	mov	r30, r0
    48d4:	95 81       	ldd	r25, Z+5	; 0x05
    48d6:	fe 01       	movw	r30, r28
    48d8:	e9 56       	subi	r30, 0x69	; 105
    48da:	ff 4f       	sbci	r31, 0xFF	; 255
    48dc:	80 83       	st	Z, r24
    48de:	fe 01       	movw	r30, r28
    48e0:	e9 56       	subi	r30, 0x69	; 105
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	91 83       	std	Z+1, r25	; 0x01
    48e6:	fe 01       	movw	r30, r28
    48e8:	e9 56       	subi	r30, 0x69	; 105
    48ea:	ff 4f       	sbci	r31, 0xFF	; 255
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	82 83       	std	Z+2, r24	; 0x02
    48f0:	fe 01       	movw	r30, r28
    48f2:	e9 56       	subi	r30, 0x69	; 105
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_HIGH);
    48f8:	ce 01       	movw	r24, r28
    48fa:	81 57       	subi	r24, 0x71	; 113
    48fc:	9f 4f       	sbci	r25, 0xFF	; 255
    48fe:	61 e0       	ldi	r22, 0x01	; 1
    4900:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    4904:	fe 01       	movw	r30, r28
    4906:	e3 57       	subi	r30, 0x73	; 115
    4908:	ff 4f       	sbci	r31, 0xFF	; 255
    490a:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    490c:	fe 01       	movw	r30, r28
    490e:	e3 57       	subi	r30, 0x73	; 115
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	80 81       	ld	r24, Z
    4914:	88 23       	and	r24, r24
    4916:	59 f4       	brne	.+22     	; 0x492e <HLCD_displayChar+0x140>
    4918:	ce 01       	movw	r24, r28
    491a:	8d 56       	subi	r24, 0x6D	; 109
    491c:	9f 4f       	sbci	r25, 0xFF	; 255
    491e:	60 e0       	ldi	r22, 0x00	; 0
    4920:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    4924:	fe 01       	movw	r30, r28
    4926:	e3 57       	subi	r30, 0x73	; 115
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	80 83       	st	Z, r24
    492c:	05 c0       	rjmp	.+10     	; 0x4938 <HLCD_displayChar+0x14a>
		else lcdRet = HLCD_NOK;
    492e:	fe 01       	movw	r30, r28
    4930:	e2 57       	subi	r30, 0x72	; 114
    4932:	ff 4f       	sbci	r31, 0xFF	; 255
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	80 83       	st	Z, r24
    4938:	fe 01       	movw	r30, r28
    493a:	e7 57       	subi	r30, 0x77	; 119
    493c:	ff 4f       	sbci	r31, 0xFF	; 255
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	a0 ef       	ldi	r26, 0xF0	; 240
    4944:	b1 e4       	ldi	r27, 0x41	; 65
    4946:	80 83       	st	Z, r24
    4948:	91 83       	std	Z+1, r25	; 0x01
    494a:	a2 83       	std	Z+2, r26	; 0x02
    494c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    494e:	8e 01       	movw	r16, r28
    4950:	0b 57       	subi	r16, 0x7B	; 123
    4952:	1f 4f       	sbci	r17, 0xFF	; 255
    4954:	fe 01       	movw	r30, r28
    4956:	e7 57       	subi	r30, 0x77	; 119
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	4a ef       	ldi	r20, 0xFA	; 250
    4968:	54 e4       	ldi	r21, 0x44	; 68
    496a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	f8 01       	movw	r30, r16
    4974:	80 83       	st	Z, r24
    4976:	91 83       	std	Z+1, r25	; 0x01
    4978:	a2 83       	std	Z+2, r26	; 0x02
    497a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    497c:	fe 01       	movw	r30, r28
    497e:	eb 57       	subi	r30, 0x7B	; 123
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	60 81       	ld	r22, Z
    4984:	71 81       	ldd	r23, Z+1	; 0x01
    4986:	82 81       	ldd	r24, Z+2	; 0x02
    4988:	93 81       	ldd	r25, Z+3	; 0x03
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	40 e8       	ldi	r20, 0x80	; 128
    4990:	5f e3       	ldi	r21, 0x3F	; 63
    4992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4996:	88 23       	and	r24, r24
    4998:	44 f4       	brge	.+16     	; 0x49aa <HLCD_displayChar+0x1bc>
		__ticks = 1;
    499a:	fe 01       	movw	r30, r28
    499c:	ed 57       	subi	r30, 0x7D	; 125
    499e:	ff 4f       	sbci	r31, 0xFF	; 255
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	91 83       	std	Z+1, r25	; 0x01
    49a6:	80 83       	st	Z, r24
    49a8:	64 c0       	rjmp	.+200    	; 0x4a72 <HLCD_displayChar+0x284>
	else if (__tmp > 65535)
    49aa:	fe 01       	movw	r30, r28
    49ac:	eb 57       	subi	r30, 0x7B	; 123
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	60 81       	ld	r22, Z
    49b2:	71 81       	ldd	r23, Z+1	; 0x01
    49b4:	82 81       	ldd	r24, Z+2	; 0x02
    49b6:	93 81       	ldd	r25, Z+3	; 0x03
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	3f ef       	ldi	r19, 0xFF	; 255
    49bc:	4f e7       	ldi	r20, 0x7F	; 127
    49be:	57 e4       	ldi	r21, 0x47	; 71
    49c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49c4:	18 16       	cp	r1, r24
    49c6:	0c f0       	brlt	.+2      	; 0x49ca <HLCD_displayChar+0x1dc>
    49c8:	43 c0       	rjmp	.+134    	; 0x4a50 <HLCD_displayChar+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ca:	fe 01       	movw	r30, r28
    49cc:	e7 57       	subi	r30, 0x77	; 119
    49ce:	ff 4f       	sbci	r31, 0xFF	; 255
    49d0:	60 81       	ld	r22, Z
    49d2:	71 81       	ldd	r23, Z+1	; 0x01
    49d4:	82 81       	ldd	r24, Z+2	; 0x02
    49d6:	93 81       	ldd	r25, Z+3	; 0x03
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	40 e2       	ldi	r20, 0x20	; 32
    49de:	51 e4       	ldi	r21, 0x41	; 65
    49e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49e4:	dc 01       	movw	r26, r24
    49e6:	cb 01       	movw	r24, r22
    49e8:	8e 01       	movw	r16, r28
    49ea:	0d 57       	subi	r16, 0x7D	; 125
    49ec:	1f 4f       	sbci	r17, 0xFF	; 255
    49ee:	bc 01       	movw	r22, r24
    49f0:	cd 01       	movw	r24, r26
    49f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f6:	dc 01       	movw	r26, r24
    49f8:	cb 01       	movw	r24, r22
    49fa:	f8 01       	movw	r30, r16
    49fc:	91 83       	std	Z+1, r25	; 0x01
    49fe:	80 83       	st	Z, r24
    4a00:	1f c0       	rjmp	.+62     	; 0x4a40 <HLCD_displayChar+0x252>
    4a02:	fe 01       	movw	r30, r28
    4a04:	ef 57       	subi	r30, 0x7F	; 127
    4a06:	ff 4f       	sbci	r31, 0xFF	; 255
    4a08:	88 ec       	ldi	r24, 0xC8	; 200
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	91 83       	std	Z+1, r25	; 0x01
    4a0e:	80 83       	st	Z, r24
    4a10:	fe 01       	movw	r30, r28
    4a12:	ef 57       	subi	r30, 0x7F	; 127
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	80 81       	ld	r24, Z
    4a18:	91 81       	ldd	r25, Z+1	; 0x01
    4a1a:	01 97       	sbiw	r24, 0x01	; 1
    4a1c:	f1 f7       	brne	.-4      	; 0x4a1a <HLCD_displayChar+0x22c>
    4a1e:	fe 01       	movw	r30, r28
    4a20:	ef 57       	subi	r30, 0x7F	; 127
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	91 83       	std	Z+1, r25	; 0x01
    4a26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a28:	de 01       	movw	r26, r28
    4a2a:	ad 57       	subi	r26, 0x7D	; 125
    4a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a2e:	fe 01       	movw	r30, r28
    4a30:	ed 57       	subi	r30, 0x7D	; 125
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	80 81       	ld	r24, Z
    4a36:	91 81       	ldd	r25, Z+1	; 0x01
    4a38:	01 97       	sbiw	r24, 0x01	; 1
    4a3a:	11 96       	adiw	r26, 0x01	; 1
    4a3c:	9c 93       	st	X, r25
    4a3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a40:	fe 01       	movw	r30, r28
    4a42:	ed 57       	subi	r30, 0x7D	; 125
    4a44:	ff 4f       	sbci	r31, 0xFF	; 255
    4a46:	80 81       	ld	r24, Z
    4a48:	91 81       	ldd	r25, Z+1	; 0x01
    4a4a:	00 97       	sbiw	r24, 0x00	; 0
    4a4c:	d1 f6       	brne	.-76     	; 0x4a02 <HLCD_displayChar+0x214>
    4a4e:	28 c0       	rjmp	.+80     	; 0x4aa0 <HLCD_displayChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a50:	8e 01       	movw	r16, r28
    4a52:	0d 57       	subi	r16, 0x7D	; 125
    4a54:	1f 4f       	sbci	r17, 0xFF	; 255
    4a56:	fe 01       	movw	r30, r28
    4a58:	eb 57       	subi	r30, 0x7B	; 123
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	60 81       	ld	r22, Z
    4a5e:	71 81       	ldd	r23, Z+1	; 0x01
    4a60:	82 81       	ldd	r24, Z+2	; 0x02
    4a62:	93 81       	ldd	r25, Z+3	; 0x03
    4a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a68:	dc 01       	movw	r26, r24
    4a6a:	cb 01       	movw	r24, r22
    4a6c:	f8 01       	movw	r30, r16
    4a6e:	91 83       	std	Z+1, r25	; 0x01
    4a70:	80 83       	st	Z, r24
    4a72:	de 01       	movw	r26, r28
    4a74:	a1 58       	subi	r26, 0x81	; 129
    4a76:	bf 4f       	sbci	r27, 0xFF	; 255
    4a78:	fe 01       	movw	r30, r28
    4a7a:	ed 57       	subi	r30, 0x7D	; 125
    4a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7e:	80 81       	ld	r24, Z
    4a80:	91 81       	ldd	r25, Z+1	; 0x01
    4a82:	11 96       	adiw	r26, 0x01	; 1
    4a84:	9c 93       	st	X, r25
    4a86:	8e 93       	st	-X, r24
    4a88:	fe 01       	movw	r30, r28
    4a8a:	e1 58       	subi	r30, 0x81	; 129
    4a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8e:	80 81       	ld	r24, Z
    4a90:	91 81       	ldd	r25, Z+1	; 0x01
    4a92:	01 97       	sbiw	r24, 0x01	; 1
    4a94:	f1 f7       	brne	.-4      	; 0x4a92 <HLCD_displayChar+0x2a4>
    4a96:	fe 01       	movw	r30, r28
    4a98:	e1 58       	subi	r30, 0x81	; 129
    4a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9c:	91 83       	std	Z+1, r25	; 0x01
    4a9e:	80 83       	st	Z, r24

		_delay_ms(30);

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	e5 56       	subi	r30, 0x65	; 101
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	01 90       	ld	r0, Z+
    4aa8:	f0 81       	ld	r31, Z
    4aaa:	e0 2d       	mov	r30, r0
    4aac:	80 81       	ld	r24, Z
    4aae:	88 23       	and	r24, r24
    4ab0:	09 f0       	breq	.+2      	; 0x4ab4 <HLCD_displayChar+0x2c6>
    4ab2:	3d c4       	rjmp	.+2170   	; 0x532e <HLCD_displayChar+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4ab4:	fe 01       	movw	r30, r28
    4ab6:	e3 57       	subi	r30, 0x73	; 115
    4ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aba:	80 81       	ld	r24, Z
    4abc:	88 23       	and	r24, r24
    4abe:	59 f4       	brne	.+22     	; 0x4ad6 <HLCD_displayChar+0x2e8>
    4ac0:	ce 01       	movw	r24, r28
    4ac2:	89 56       	subi	r24, 0x69	; 105
    4ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac6:	61 e0       	ldi	r22, 0x01	; 1
    4ac8:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    4acc:	fe 01       	movw	r30, r28
    4ace:	e3 57       	subi	r30, 0x73	; 115
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	80 83       	st	Z, r24
    4ad4:	05 c0       	rjmp	.+10     	; 0x4ae0 <HLCD_displayChar+0x2f2>
			else lcdRet = HLCD_NOK;
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	e2 57       	subi	r30, 0x72	; 114
    4ada:	ff 4f       	sbci	r31, 0xFF	; 255
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	80 83       	st	Z, r24
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	e5 58       	subi	r30, 0x85	; 133
    4ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	a0 ef       	ldi	r26, 0xF0	; 240
    4aec:	b1 e4       	ldi	r27, 0x41	; 65
    4aee:	80 83       	st	Z, r24
    4af0:	91 83       	std	Z+1, r25	; 0x01
    4af2:	a2 83       	std	Z+2, r26	; 0x02
    4af4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4af6:	8e 01       	movw	r16, r28
    4af8:	09 58       	subi	r16, 0x89	; 137
    4afa:	1f 4f       	sbci	r17, 0xFF	; 255
    4afc:	fe 01       	movw	r30, r28
    4afe:	e5 58       	subi	r30, 0x85	; 133
    4b00:	ff 4f       	sbci	r31, 0xFF	; 255
    4b02:	60 81       	ld	r22, Z
    4b04:	71 81       	ldd	r23, Z+1	; 0x01
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	4a ef       	ldi	r20, 0xFA	; 250
    4b10:	54 e4       	ldi	r21, 0x44	; 68
    4b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	f8 01       	movw	r30, r16
    4b1c:	80 83       	st	Z, r24
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	a2 83       	std	Z+2, r26	; 0x02
    4b22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b24:	fe 01       	movw	r30, r28
    4b26:	e9 58       	subi	r30, 0x89	; 137
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	60 81       	ld	r22, Z
    4b2c:	71 81       	ldd	r23, Z+1	; 0x01
    4b2e:	82 81       	ldd	r24, Z+2	; 0x02
    4b30:	93 81       	ldd	r25, Z+3	; 0x03
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	40 e8       	ldi	r20, 0x80	; 128
    4b38:	5f e3       	ldi	r21, 0x3F	; 63
    4b3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b3e:	88 23       	and	r24, r24
    4b40:	44 f4       	brge	.+16     	; 0x4b52 <HLCD_displayChar+0x364>
		__ticks = 1;
    4b42:	fe 01       	movw	r30, r28
    4b44:	eb 58       	subi	r30, 0x8B	; 139
    4b46:	ff 4f       	sbci	r31, 0xFF	; 255
    4b48:	81 e0       	ldi	r24, 0x01	; 1
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	91 83       	std	Z+1, r25	; 0x01
    4b4e:	80 83       	st	Z, r24
    4b50:	64 c0       	rjmp	.+200    	; 0x4c1a <HLCD_displayChar+0x42c>
	else if (__tmp > 65535)
    4b52:	fe 01       	movw	r30, r28
    4b54:	e9 58       	subi	r30, 0x89	; 137
    4b56:	ff 4f       	sbci	r31, 0xFF	; 255
    4b58:	60 81       	ld	r22, Z
    4b5a:	71 81       	ldd	r23, Z+1	; 0x01
    4b5c:	82 81       	ldd	r24, Z+2	; 0x02
    4b5e:	93 81       	ldd	r25, Z+3	; 0x03
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	3f ef       	ldi	r19, 0xFF	; 255
    4b64:	4f e7       	ldi	r20, 0x7F	; 127
    4b66:	57 e4       	ldi	r21, 0x47	; 71
    4b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b6c:	18 16       	cp	r1, r24
    4b6e:	0c f0       	brlt	.+2      	; 0x4b72 <HLCD_displayChar+0x384>
    4b70:	43 c0       	rjmp	.+134    	; 0x4bf8 <HLCD_displayChar+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b72:	fe 01       	movw	r30, r28
    4b74:	e5 58       	subi	r30, 0x85	; 133
    4b76:	ff 4f       	sbci	r31, 0xFF	; 255
    4b78:	60 81       	ld	r22, Z
    4b7a:	71 81       	ldd	r23, Z+1	; 0x01
    4b7c:	82 81       	ldd	r24, Z+2	; 0x02
    4b7e:	93 81       	ldd	r25, Z+3	; 0x03
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	40 e2       	ldi	r20, 0x20	; 32
    4b86:	51 e4       	ldi	r21, 0x41	; 65
    4b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	8e 01       	movw	r16, r28
    4b92:	0b 58       	subi	r16, 0x8B	; 139
    4b94:	1f 4f       	sbci	r17, 0xFF	; 255
    4b96:	bc 01       	movw	r22, r24
    4b98:	cd 01       	movw	r24, r26
    4b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	cb 01       	movw	r24, r22
    4ba2:	f8 01       	movw	r30, r16
    4ba4:	91 83       	std	Z+1, r25	; 0x01
    4ba6:	80 83       	st	Z, r24
    4ba8:	1f c0       	rjmp	.+62     	; 0x4be8 <HLCD_displayChar+0x3fa>
    4baa:	fe 01       	movw	r30, r28
    4bac:	ed 58       	subi	r30, 0x8D	; 141
    4bae:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb0:	88 ec       	ldi	r24, 0xC8	; 200
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	91 83       	std	Z+1, r25	; 0x01
    4bb6:	80 83       	st	Z, r24
    4bb8:	fe 01       	movw	r30, r28
    4bba:	ed 58       	subi	r30, 0x8D	; 141
    4bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbe:	80 81       	ld	r24, Z
    4bc0:	91 81       	ldd	r25, Z+1	; 0x01
    4bc2:	01 97       	sbiw	r24, 0x01	; 1
    4bc4:	f1 f7       	brne	.-4      	; 0x4bc2 <HLCD_displayChar+0x3d4>
    4bc6:	fe 01       	movw	r30, r28
    4bc8:	ed 58       	subi	r30, 0x8D	; 141
    4bca:	ff 4f       	sbci	r31, 0xFF	; 255
    4bcc:	91 83       	std	Z+1, r25	; 0x01
    4bce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd0:	de 01       	movw	r26, r28
    4bd2:	ab 58       	subi	r26, 0x8B	; 139
    4bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    4bd6:	fe 01       	movw	r30, r28
    4bd8:	eb 58       	subi	r30, 0x8B	; 139
    4bda:	ff 4f       	sbci	r31, 0xFF	; 255
    4bdc:	80 81       	ld	r24, Z
    4bde:	91 81       	ldd	r25, Z+1	; 0x01
    4be0:	01 97       	sbiw	r24, 0x01	; 1
    4be2:	11 96       	adiw	r26, 0x01	; 1
    4be4:	9c 93       	st	X, r25
    4be6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be8:	fe 01       	movw	r30, r28
    4bea:	eb 58       	subi	r30, 0x8B	; 139
    4bec:	ff 4f       	sbci	r31, 0xFF	; 255
    4bee:	80 81       	ld	r24, Z
    4bf0:	91 81       	ldd	r25, Z+1	; 0x01
    4bf2:	00 97       	sbiw	r24, 0x00	; 0
    4bf4:	d1 f6       	brne	.-76     	; 0x4baa <HLCD_displayChar+0x3bc>
    4bf6:	27 c0       	rjmp	.+78     	; 0x4c46 <HLCD_displayChar+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bf8:	8e 01       	movw	r16, r28
    4bfa:	0b 58       	subi	r16, 0x8B	; 139
    4bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bfe:	fe 01       	movw	r30, r28
    4c00:	e9 58       	subi	r30, 0x89	; 137
    4c02:	ff 4f       	sbci	r31, 0xFF	; 255
    4c04:	60 81       	ld	r22, Z
    4c06:	71 81       	ldd	r23, Z+1	; 0x01
    4c08:	82 81       	ldd	r24, Z+2	; 0x02
    4c0a:	93 81       	ldd	r25, Z+3	; 0x03
    4c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c10:	dc 01       	movw	r26, r24
    4c12:	cb 01       	movw	r24, r22
    4c14:	f8 01       	movw	r30, r16
    4c16:	91 83       	std	Z+1, r25	; 0x01
    4c18:	80 83       	st	Z, r24
    4c1a:	de 01       	movw	r26, r28
    4c1c:	af 58       	subi	r26, 0x8F	; 143
    4c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    4c20:	fe 01       	movw	r30, r28
    4c22:	eb 58       	subi	r30, 0x8B	; 139
    4c24:	ff 4f       	sbci	r31, 0xFF	; 255
    4c26:	80 81       	ld	r24, Z
    4c28:	91 81       	ldd	r25, Z+1	; 0x01
    4c2a:	8d 93       	st	X+, r24
    4c2c:	9c 93       	st	X, r25
    4c2e:	fe 01       	movw	r30, r28
    4c30:	ef 58       	subi	r30, 0x8F	; 143
    4c32:	ff 4f       	sbci	r31, 0xFF	; 255
    4c34:	80 81       	ld	r24, Z
    4c36:	91 81       	ldd	r25, Z+1	; 0x01
    4c38:	01 97       	sbiw	r24, 0x01	; 1
    4c3a:	f1 f7       	brne	.-4      	; 0x4c38 <HLCD_displayChar+0x44a>
    4c3c:	fe 01       	movw	r30, r28
    4c3e:	ef 58       	subi	r30, 0x8F	; 143
    4c40:	ff 4f       	sbci	r31, 0xFF	; 255
    4c42:	91 83       	std	Z+1, r25	; 0x01
    4c44:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Char;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Char & 0xF0);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char>>4);
    4c46:	fe 01       	movw	r30, r28
    4c48:	e5 56       	subi	r30, 0x65	; 101
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	01 90       	ld	r0, Z+
    4c4e:	f0 81       	ld	r31, Z
    4c50:	e0 2d       	mov	r30, r0
    4c52:	22 81       	ldd	r18, Z+2	; 0x02
    4c54:	fe 01       	movw	r30, r28
    4c56:	e3 56       	subi	r30, 0x63	; 99
    4c58:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5a:	80 81       	ld	r24, Z
    4c5c:	98 2f       	mov	r25, r24
    4c5e:	92 95       	swap	r25
    4c60:	9f 70       	andi	r25, 0x0F	; 15
    4c62:	82 2f       	mov	r24, r18
    4c64:	69 2f       	mov	r22, r25
    4c66:	0e 94 9e 08 	call	0x113c	; 0x113c <GPIO_set4msbValue>
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	e3 59       	subi	r30, 0x93	; 147
    4c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	a0 ef       	ldi	r26, 0xF0	; 240
    4c76:	b1 e4       	ldi	r27, 0x41	; 65
    4c78:	80 83       	st	Z, r24
    4c7a:	91 83       	std	Z+1, r25	; 0x01
    4c7c:	a2 83       	std	Z+2, r26	; 0x02
    4c7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c80:	8e 01       	movw	r16, r28
    4c82:	07 59       	subi	r16, 0x97	; 151
    4c84:	1f 4f       	sbci	r17, 0xFF	; 255
    4c86:	fe 01       	movw	r30, r28
    4c88:	e3 59       	subi	r30, 0x93	; 147
    4c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8c:	60 81       	ld	r22, Z
    4c8e:	71 81       	ldd	r23, Z+1	; 0x01
    4c90:	82 81       	ldd	r24, Z+2	; 0x02
    4c92:	93 81       	ldd	r25, Z+3	; 0x03
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	4a ef       	ldi	r20, 0xFA	; 250
    4c9a:	54 e4       	ldi	r21, 0x44	; 68
    4c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	f8 01       	movw	r30, r16
    4ca6:	80 83       	st	Z, r24
    4ca8:	91 83       	std	Z+1, r25	; 0x01
    4caa:	a2 83       	std	Z+2, r26	; 0x02
    4cac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cae:	fe 01       	movw	r30, r28
    4cb0:	e7 59       	subi	r30, 0x97	; 151
    4cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb4:	60 81       	ld	r22, Z
    4cb6:	71 81       	ldd	r23, Z+1	; 0x01
    4cb8:	82 81       	ldd	r24, Z+2	; 0x02
    4cba:	93 81       	ldd	r25, Z+3	; 0x03
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	40 e8       	ldi	r20, 0x80	; 128
    4cc2:	5f e3       	ldi	r21, 0x3F	; 63
    4cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cc8:	88 23       	and	r24, r24
    4cca:	44 f4       	brge	.+16     	; 0x4cdc <HLCD_displayChar+0x4ee>
		__ticks = 1;
    4ccc:	fe 01       	movw	r30, r28
    4cce:	e9 59       	subi	r30, 0x99	; 153
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	91 83       	std	Z+1, r25	; 0x01
    4cd8:	80 83       	st	Z, r24
    4cda:	64 c0       	rjmp	.+200    	; 0x4da4 <HLCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    4cdc:	fe 01       	movw	r30, r28
    4cde:	e7 59       	subi	r30, 0x97	; 151
    4ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce2:	60 81       	ld	r22, Z
    4ce4:	71 81       	ldd	r23, Z+1	; 0x01
    4ce6:	82 81       	ldd	r24, Z+2	; 0x02
    4ce8:	93 81       	ldd	r25, Z+3	; 0x03
    4cea:	20 e0       	ldi	r18, 0x00	; 0
    4cec:	3f ef       	ldi	r19, 0xFF	; 255
    4cee:	4f e7       	ldi	r20, 0x7F	; 127
    4cf0:	57 e4       	ldi	r21, 0x47	; 71
    4cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cf6:	18 16       	cp	r1, r24
    4cf8:	0c f0       	brlt	.+2      	; 0x4cfc <HLCD_displayChar+0x50e>
    4cfa:	43 c0       	rjmp	.+134    	; 0x4d82 <HLCD_displayChar+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	e3 59       	subi	r30, 0x93	; 147
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	60 81       	ld	r22, Z
    4d04:	71 81       	ldd	r23, Z+1	; 0x01
    4d06:	82 81       	ldd	r24, Z+2	; 0x02
    4d08:	93 81       	ldd	r25, Z+3	; 0x03
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	40 e2       	ldi	r20, 0x20	; 32
    4d10:	51 e4       	ldi	r21, 0x41	; 65
    4d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d16:	dc 01       	movw	r26, r24
    4d18:	cb 01       	movw	r24, r22
    4d1a:	8e 01       	movw	r16, r28
    4d1c:	09 59       	subi	r16, 0x99	; 153
    4d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d20:	bc 01       	movw	r22, r24
    4d22:	cd 01       	movw	r24, r26
    4d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	f8 01       	movw	r30, r16
    4d2e:	91 83       	std	Z+1, r25	; 0x01
    4d30:	80 83       	st	Z, r24
    4d32:	1f c0       	rjmp	.+62     	; 0x4d72 <HLCD_displayChar+0x584>
    4d34:	fe 01       	movw	r30, r28
    4d36:	eb 59       	subi	r30, 0x9B	; 155
    4d38:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3a:	88 ec       	ldi	r24, 0xC8	; 200
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	91 83       	std	Z+1, r25	; 0x01
    4d40:	80 83       	st	Z, r24
    4d42:	fe 01       	movw	r30, r28
    4d44:	eb 59       	subi	r30, 0x9B	; 155
    4d46:	ff 4f       	sbci	r31, 0xFF	; 255
    4d48:	80 81       	ld	r24, Z
    4d4a:	91 81       	ldd	r25, Z+1	; 0x01
    4d4c:	01 97       	sbiw	r24, 0x01	; 1
    4d4e:	f1 f7       	brne	.-4      	; 0x4d4c <HLCD_displayChar+0x55e>
    4d50:	fe 01       	movw	r30, r28
    4d52:	eb 59       	subi	r30, 0x9B	; 155
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	91 83       	std	Z+1, r25	; 0x01
    4d58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d5a:	de 01       	movw	r26, r28
    4d5c:	a9 59       	subi	r26, 0x99	; 153
    4d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    4d60:	fe 01       	movw	r30, r28
    4d62:	e9 59       	subi	r30, 0x99	; 153
    4d64:	ff 4f       	sbci	r31, 0xFF	; 255
    4d66:	80 81       	ld	r24, Z
    4d68:	91 81       	ldd	r25, Z+1	; 0x01
    4d6a:	01 97       	sbiw	r24, 0x01	; 1
    4d6c:	11 96       	adiw	r26, 0x01	; 1
    4d6e:	9c 93       	st	X, r25
    4d70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d72:	fe 01       	movw	r30, r28
    4d74:	e9 59       	subi	r30, 0x99	; 153
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	80 81       	ld	r24, Z
    4d7a:	91 81       	ldd	r25, Z+1	; 0x01
    4d7c:	00 97       	sbiw	r24, 0x00	; 0
    4d7e:	d1 f6       	brne	.-76     	; 0x4d34 <HLCD_displayChar+0x546>
    4d80:	28 c0       	rjmp	.+80     	; 0x4dd2 <HLCD_displayChar+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d82:	8e 01       	movw	r16, r28
    4d84:	09 59       	subi	r16, 0x99	; 153
    4d86:	1f 4f       	sbci	r17, 0xFF	; 255
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e7 59       	subi	r30, 0x97	; 151
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	60 81       	ld	r22, Z
    4d90:	71 81       	ldd	r23, Z+1	; 0x01
    4d92:	82 81       	ldd	r24, Z+2	; 0x02
    4d94:	93 81       	ldd	r25, Z+3	; 0x03
    4d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d9a:	dc 01       	movw	r26, r24
    4d9c:	cb 01       	movw	r24, r22
    4d9e:	f8 01       	movw	r30, r16
    4da0:	91 83       	std	Z+1, r25	; 0x01
    4da2:	80 83       	st	Z, r24
    4da4:	de 01       	movw	r26, r28
    4da6:	ad 59       	subi	r26, 0x9D	; 157
    4da8:	bf 4f       	sbci	r27, 0xFF	; 255
    4daa:	fe 01       	movw	r30, r28
    4dac:	e9 59       	subi	r30, 0x99	; 153
    4dae:	ff 4f       	sbci	r31, 0xFF	; 255
    4db0:	80 81       	ld	r24, Z
    4db2:	91 81       	ldd	r25, Z+1	; 0x01
    4db4:	11 96       	adiw	r26, 0x01	; 1
    4db6:	9c 93       	st	X, r25
    4db8:	8e 93       	st	-X, r24
    4dba:	fe 01       	movw	r30, r28
    4dbc:	ed 59       	subi	r30, 0x9D	; 157
    4dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc0:	80 81       	ld	r24, Z
    4dc2:	91 81       	ldd	r25, Z+1	; 0x01
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	f1 f7       	brne	.-4      	; 0x4dc4 <HLCD_displayChar+0x5d6>
    4dc8:	fe 01       	movw	r30, r28
    4dca:	ed 59       	subi	r30, 0x9D	; 157
    4dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dce:	91 83       	std	Z+1, r25	; 0x01
    4dd0:	80 83       	st	Z, r24


			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	e3 57       	subi	r30, 0x73	; 115
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	80 81       	ld	r24, Z
    4dda:	88 23       	and	r24, r24
    4ddc:	59 f4       	brne	.+22     	; 0x4df4 <HLCD_displayChar+0x606>
    4dde:	ce 01       	movw	r24, r28
    4de0:	89 56       	subi	r24, 0x69	; 105
    4de2:	9f 4f       	sbci	r25, 0xFF	; 255
    4de4:	60 e0       	ldi	r22, 0x00	; 0
    4de6:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    4dea:	fe 01       	movw	r30, r28
    4dec:	e3 57       	subi	r30, 0x73	; 115
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	80 83       	st	Z, r24
    4df2:	05 c0       	rjmp	.+10     	; 0x4dfe <HLCD_displayChar+0x610>
			else lcdRet = HLCD_NOK;
    4df4:	fe 01       	movw	r30, r28
    4df6:	e2 57       	subi	r30, 0x72	; 114
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	80 83       	st	Z, r24
    4dfe:	fe 01       	movw	r30, r28
    4e00:	e1 5a       	subi	r30, 0xA1	; 161
    4e02:	ff 4f       	sbci	r31, 0xFF	; 255
    4e04:	80 e0       	ldi	r24, 0x00	; 0
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	a0 ef       	ldi	r26, 0xF0	; 240
    4e0a:	b1 e4       	ldi	r27, 0x41	; 65
    4e0c:	80 83       	st	Z, r24
    4e0e:	91 83       	std	Z+1, r25	; 0x01
    4e10:	a2 83       	std	Z+2, r26	; 0x02
    4e12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e14:	8e 01       	movw	r16, r28
    4e16:	05 5a       	subi	r16, 0xA5	; 165
    4e18:	1f 4f       	sbci	r17, 0xFF	; 255
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	e1 5a       	subi	r30, 0xA1	; 161
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e20:	60 81       	ld	r22, Z
    4e22:	71 81       	ldd	r23, Z+1	; 0x01
    4e24:	82 81       	ldd	r24, Z+2	; 0x02
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	20 e0       	ldi	r18, 0x00	; 0
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	4a ef       	ldi	r20, 0xFA	; 250
    4e2e:	54 e4       	ldi	r21, 0x44	; 68
    4e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e34:	dc 01       	movw	r26, r24
    4e36:	cb 01       	movw	r24, r22
    4e38:	f8 01       	movw	r30, r16
    4e3a:	80 83       	st	Z, r24
    4e3c:	91 83       	std	Z+1, r25	; 0x01
    4e3e:	a2 83       	std	Z+2, r26	; 0x02
    4e40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e42:	fe 01       	movw	r30, r28
    4e44:	e5 5a       	subi	r30, 0xA5	; 165
    4e46:	ff 4f       	sbci	r31, 0xFF	; 255
    4e48:	60 81       	ld	r22, Z
    4e4a:	71 81       	ldd	r23, Z+1	; 0x01
    4e4c:	82 81       	ldd	r24, Z+2	; 0x02
    4e4e:	93 81       	ldd	r25, Z+3	; 0x03
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	40 e8       	ldi	r20, 0x80	; 128
    4e56:	5f e3       	ldi	r21, 0x3F	; 63
    4e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e5c:	88 23       	and	r24, r24
    4e5e:	44 f4       	brge	.+16     	; 0x4e70 <HLCD_displayChar+0x682>
		__ticks = 1;
    4e60:	fe 01       	movw	r30, r28
    4e62:	e7 5a       	subi	r30, 0xA7	; 167
    4e64:	ff 4f       	sbci	r31, 0xFF	; 255
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	91 83       	std	Z+1, r25	; 0x01
    4e6c:	80 83       	st	Z, r24
    4e6e:	64 c0       	rjmp	.+200    	; 0x4f38 <HLCD_displayChar+0x74a>
	else if (__tmp > 65535)
    4e70:	fe 01       	movw	r30, r28
    4e72:	e5 5a       	subi	r30, 0xA5	; 165
    4e74:	ff 4f       	sbci	r31, 0xFF	; 255
    4e76:	60 81       	ld	r22, Z
    4e78:	71 81       	ldd	r23, Z+1	; 0x01
    4e7a:	82 81       	ldd	r24, Z+2	; 0x02
    4e7c:	93 81       	ldd	r25, Z+3	; 0x03
    4e7e:	20 e0       	ldi	r18, 0x00	; 0
    4e80:	3f ef       	ldi	r19, 0xFF	; 255
    4e82:	4f e7       	ldi	r20, 0x7F	; 127
    4e84:	57 e4       	ldi	r21, 0x47	; 71
    4e86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e8a:	18 16       	cp	r1, r24
    4e8c:	0c f0       	brlt	.+2      	; 0x4e90 <HLCD_displayChar+0x6a2>
    4e8e:	43 c0       	rjmp	.+134    	; 0x4f16 <HLCD_displayChar+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e90:	fe 01       	movw	r30, r28
    4e92:	e1 5a       	subi	r30, 0xA1	; 161
    4e94:	ff 4f       	sbci	r31, 0xFF	; 255
    4e96:	60 81       	ld	r22, Z
    4e98:	71 81       	ldd	r23, Z+1	; 0x01
    4e9a:	82 81       	ldd	r24, Z+2	; 0x02
    4e9c:	93 81       	ldd	r25, Z+3	; 0x03
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	40 e2       	ldi	r20, 0x20	; 32
    4ea4:	51 e4       	ldi	r21, 0x41	; 65
    4ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	8e 01       	movw	r16, r28
    4eb0:	07 5a       	subi	r16, 0xA7	; 167
    4eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb4:	bc 01       	movw	r22, r24
    4eb6:	cd 01       	movw	r24, r26
    4eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ebc:	dc 01       	movw	r26, r24
    4ebe:	cb 01       	movw	r24, r22
    4ec0:	f8 01       	movw	r30, r16
    4ec2:	91 83       	std	Z+1, r25	; 0x01
    4ec4:	80 83       	st	Z, r24
    4ec6:	1f c0       	rjmp	.+62     	; 0x4f06 <HLCD_displayChar+0x718>
    4ec8:	fe 01       	movw	r30, r28
    4eca:	e9 5a       	subi	r30, 0xA9	; 169
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	88 ec       	ldi	r24, 0xC8	; 200
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	91 83       	std	Z+1, r25	; 0x01
    4ed4:	80 83       	st	Z, r24
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	e9 5a       	subi	r30, 0xA9	; 169
    4eda:	ff 4f       	sbci	r31, 0xFF	; 255
    4edc:	80 81       	ld	r24, Z
    4ede:	91 81       	ldd	r25, Z+1	; 0x01
    4ee0:	01 97       	sbiw	r24, 0x01	; 1
    4ee2:	f1 f7       	brne	.-4      	; 0x4ee0 <HLCD_displayChar+0x6f2>
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e9 5a       	subi	r30, 0xA9	; 169
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	91 83       	std	Z+1, r25	; 0x01
    4eec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eee:	de 01       	movw	r26, r28
    4ef0:	a7 5a       	subi	r26, 0xA7	; 167
    4ef2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ef4:	fe 01       	movw	r30, r28
    4ef6:	e7 5a       	subi	r30, 0xA7	; 167
    4ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    4efa:	80 81       	ld	r24, Z
    4efc:	91 81       	ldd	r25, Z+1	; 0x01
    4efe:	01 97       	sbiw	r24, 0x01	; 1
    4f00:	11 96       	adiw	r26, 0x01	; 1
    4f02:	9c 93       	st	X, r25
    4f04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f06:	fe 01       	movw	r30, r28
    4f08:	e7 5a       	subi	r30, 0xA7	; 167
    4f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0c:	80 81       	ld	r24, Z
    4f0e:	91 81       	ldd	r25, Z+1	; 0x01
    4f10:	00 97       	sbiw	r24, 0x00	; 0
    4f12:	d1 f6       	brne	.-76     	; 0x4ec8 <HLCD_displayChar+0x6da>
    4f14:	28 c0       	rjmp	.+80     	; 0x4f66 <HLCD_displayChar+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f16:	8e 01       	movw	r16, r28
    4f18:	07 5a       	subi	r16, 0xA7	; 167
    4f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	e5 5a       	subi	r30, 0xA5	; 165
    4f20:	ff 4f       	sbci	r31, 0xFF	; 255
    4f22:	60 81       	ld	r22, Z
    4f24:	71 81       	ldd	r23, Z+1	; 0x01
    4f26:	82 81       	ldd	r24, Z+2	; 0x02
    4f28:	93 81       	ldd	r25, Z+3	; 0x03
    4f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f2e:	dc 01       	movw	r26, r24
    4f30:	cb 01       	movw	r24, r22
    4f32:	f8 01       	movw	r30, r16
    4f34:	91 83       	std	Z+1, r25	; 0x01
    4f36:	80 83       	st	Z, r24
    4f38:	de 01       	movw	r26, r28
    4f3a:	ab 5a       	subi	r26, 0xAB	; 171
    4f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4f3e:	fe 01       	movw	r30, r28
    4f40:	e7 5a       	subi	r30, 0xA7	; 167
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	80 81       	ld	r24, Z
    4f46:	91 81       	ldd	r25, Z+1	; 0x01
    4f48:	11 96       	adiw	r26, 0x01	; 1
    4f4a:	9c 93       	st	X, r25
    4f4c:	8e 93       	st	-X, r24
    4f4e:	fe 01       	movw	r30, r28
    4f50:	eb 5a       	subi	r30, 0xAB	; 171
    4f52:	ff 4f       	sbci	r31, 0xFF	; 255
    4f54:	80 81       	ld	r24, Z
    4f56:	91 81       	ldd	r25, Z+1	; 0x01
    4f58:	01 97       	sbiw	r24, 0x01	; 1
    4f5a:	f1 f7       	brne	.-4      	; 0x4f58 <HLCD_displayChar+0x76a>
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	eb 5a       	subi	r30, 0xAB	; 171
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	91 83       	std	Z+1, r25	; 0x01
    4f64:	80 83       	st	Z, r24

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4f66:	fe 01       	movw	r30, r28
    4f68:	e3 57       	subi	r30, 0x73	; 115
    4f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6c:	80 81       	ld	r24, Z
    4f6e:	88 23       	and	r24, r24
    4f70:	59 f4       	brne	.+22     	; 0x4f88 <HLCD_displayChar+0x79a>
    4f72:	ce 01       	movw	r24, r28
    4f74:	89 56       	subi	r24, 0x69	; 105
    4f76:	9f 4f       	sbci	r25, 0xFF	; 255
    4f78:	61 e0       	ldi	r22, 0x01	; 1
    4f7a:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    4f7e:	fe 01       	movw	r30, r28
    4f80:	e3 57       	subi	r30, 0x73	; 115
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	80 83       	st	Z, r24
    4f86:	05 c0       	rjmp	.+10     	; 0x4f92 <HLCD_displayChar+0x7a4>
			else lcdRet = HLCD_NOK;
    4f88:	fe 01       	movw	r30, r28
    4f8a:	e2 57       	subi	r30, 0x72	; 114
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	80 83       	st	Z, r24
    4f92:	fe 01       	movw	r30, r28
    4f94:	ef 5a       	subi	r30, 0xAF	; 175
    4f96:	ff 4f       	sbci	r31, 0xFF	; 255
    4f98:	80 e0       	ldi	r24, 0x00	; 0
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	a0 ef       	ldi	r26, 0xF0	; 240
    4f9e:	b1 e4       	ldi	r27, 0x41	; 65
    4fa0:	80 83       	st	Z, r24
    4fa2:	91 83       	std	Z+1, r25	; 0x01
    4fa4:	a2 83       	std	Z+2, r26	; 0x02
    4fa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fa8:	8e 01       	movw	r16, r28
    4faa:	03 5b       	subi	r16, 0xB3	; 179
    4fac:	1f 4f       	sbci	r17, 0xFF	; 255
    4fae:	fe 01       	movw	r30, r28
    4fb0:	ef 5a       	subi	r30, 0xAF	; 175
    4fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb4:	60 81       	ld	r22, Z
    4fb6:	71 81       	ldd	r23, Z+1	; 0x01
    4fb8:	82 81       	ldd	r24, Z+2	; 0x02
    4fba:	93 81       	ldd	r25, Z+3	; 0x03
    4fbc:	20 e0       	ldi	r18, 0x00	; 0
    4fbe:	30 e0       	ldi	r19, 0x00	; 0
    4fc0:	4a ef       	ldi	r20, 0xFA	; 250
    4fc2:	54 e4       	ldi	r21, 0x44	; 68
    4fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc8:	dc 01       	movw	r26, r24
    4fca:	cb 01       	movw	r24, r22
    4fcc:	f8 01       	movw	r30, r16
    4fce:	80 83       	st	Z, r24
    4fd0:	91 83       	std	Z+1, r25	; 0x01
    4fd2:	a2 83       	std	Z+2, r26	; 0x02
    4fd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fd6:	fe 01       	movw	r30, r28
    4fd8:	e3 5b       	subi	r30, 0xB3	; 179
    4fda:	ff 4f       	sbci	r31, 0xFF	; 255
    4fdc:	60 81       	ld	r22, Z
    4fde:	71 81       	ldd	r23, Z+1	; 0x01
    4fe0:	82 81       	ldd	r24, Z+2	; 0x02
    4fe2:	93 81       	ldd	r25, Z+3	; 0x03
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	40 e8       	ldi	r20, 0x80	; 128
    4fea:	5f e3       	ldi	r21, 0x3F	; 63
    4fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ff0:	88 23       	and	r24, r24
    4ff2:	44 f4       	brge	.+16     	; 0x5004 <HLCD_displayChar+0x816>
		__ticks = 1;
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	e5 5b       	subi	r30, 0xB5	; 181
    4ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffa:	81 e0       	ldi	r24, 0x01	; 1
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	91 83       	std	Z+1, r25	; 0x01
    5000:	80 83       	st	Z, r24
    5002:	64 c0       	rjmp	.+200    	; 0x50cc <HLCD_displayChar+0x8de>
	else if (__tmp > 65535)
    5004:	fe 01       	movw	r30, r28
    5006:	e3 5b       	subi	r30, 0xB3	; 179
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	60 81       	ld	r22, Z
    500c:	71 81       	ldd	r23, Z+1	; 0x01
    500e:	82 81       	ldd	r24, Z+2	; 0x02
    5010:	93 81       	ldd	r25, Z+3	; 0x03
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	3f ef       	ldi	r19, 0xFF	; 255
    5016:	4f e7       	ldi	r20, 0x7F	; 127
    5018:	57 e4       	ldi	r21, 0x47	; 71
    501a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    501e:	18 16       	cp	r1, r24
    5020:	0c f0       	brlt	.+2      	; 0x5024 <HLCD_displayChar+0x836>
    5022:	43 c0       	rjmp	.+134    	; 0x50aa <HLCD_displayChar+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5024:	fe 01       	movw	r30, r28
    5026:	ef 5a       	subi	r30, 0xAF	; 175
    5028:	ff 4f       	sbci	r31, 0xFF	; 255
    502a:	60 81       	ld	r22, Z
    502c:	71 81       	ldd	r23, Z+1	; 0x01
    502e:	82 81       	ldd	r24, Z+2	; 0x02
    5030:	93 81       	ldd	r25, Z+3	; 0x03
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	40 e2       	ldi	r20, 0x20	; 32
    5038:	51 e4       	ldi	r21, 0x41	; 65
    503a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    503e:	dc 01       	movw	r26, r24
    5040:	cb 01       	movw	r24, r22
    5042:	8e 01       	movw	r16, r28
    5044:	05 5b       	subi	r16, 0xB5	; 181
    5046:	1f 4f       	sbci	r17, 0xFF	; 255
    5048:	bc 01       	movw	r22, r24
    504a:	cd 01       	movw	r24, r26
    504c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5050:	dc 01       	movw	r26, r24
    5052:	cb 01       	movw	r24, r22
    5054:	f8 01       	movw	r30, r16
    5056:	91 83       	std	Z+1, r25	; 0x01
    5058:	80 83       	st	Z, r24
    505a:	1f c0       	rjmp	.+62     	; 0x509a <HLCD_displayChar+0x8ac>
    505c:	fe 01       	movw	r30, r28
    505e:	e7 5b       	subi	r30, 0xB7	; 183
    5060:	ff 4f       	sbci	r31, 0xFF	; 255
    5062:	88 ec       	ldi	r24, 0xC8	; 200
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	91 83       	std	Z+1, r25	; 0x01
    5068:	80 83       	st	Z, r24
    506a:	fe 01       	movw	r30, r28
    506c:	e7 5b       	subi	r30, 0xB7	; 183
    506e:	ff 4f       	sbci	r31, 0xFF	; 255
    5070:	80 81       	ld	r24, Z
    5072:	91 81       	ldd	r25, Z+1	; 0x01
    5074:	01 97       	sbiw	r24, 0x01	; 1
    5076:	f1 f7       	brne	.-4      	; 0x5074 <HLCD_displayChar+0x886>
    5078:	fe 01       	movw	r30, r28
    507a:	e7 5b       	subi	r30, 0xB7	; 183
    507c:	ff 4f       	sbci	r31, 0xFF	; 255
    507e:	91 83       	std	Z+1, r25	; 0x01
    5080:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5082:	de 01       	movw	r26, r28
    5084:	a5 5b       	subi	r26, 0xB5	; 181
    5086:	bf 4f       	sbci	r27, 0xFF	; 255
    5088:	fe 01       	movw	r30, r28
    508a:	e5 5b       	subi	r30, 0xB5	; 181
    508c:	ff 4f       	sbci	r31, 0xFF	; 255
    508e:	80 81       	ld	r24, Z
    5090:	91 81       	ldd	r25, Z+1	; 0x01
    5092:	01 97       	sbiw	r24, 0x01	; 1
    5094:	11 96       	adiw	r26, 0x01	; 1
    5096:	9c 93       	st	X, r25
    5098:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    509a:	fe 01       	movw	r30, r28
    509c:	e5 5b       	subi	r30, 0xB5	; 181
    509e:	ff 4f       	sbci	r31, 0xFF	; 255
    50a0:	80 81       	ld	r24, Z
    50a2:	91 81       	ldd	r25, Z+1	; 0x01
    50a4:	00 97       	sbiw	r24, 0x00	; 0
    50a6:	d1 f6       	brne	.-76     	; 0x505c <HLCD_displayChar+0x86e>
    50a8:	27 c0       	rjmp	.+78     	; 0x50f8 <HLCD_displayChar+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50aa:	8e 01       	movw	r16, r28
    50ac:	05 5b       	subi	r16, 0xB5	; 181
    50ae:	1f 4f       	sbci	r17, 0xFF	; 255
    50b0:	fe 01       	movw	r30, r28
    50b2:	e3 5b       	subi	r30, 0xB3	; 179
    50b4:	ff 4f       	sbci	r31, 0xFF	; 255
    50b6:	60 81       	ld	r22, Z
    50b8:	71 81       	ldd	r23, Z+1	; 0x01
    50ba:	82 81       	ldd	r24, Z+2	; 0x02
    50bc:	93 81       	ldd	r25, Z+3	; 0x03
    50be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	f8 01       	movw	r30, r16
    50c8:	91 83       	std	Z+1, r25	; 0x01
    50ca:	80 83       	st	Z, r24
    50cc:	de 01       	movw	r26, r28
    50ce:	a9 5b       	subi	r26, 0xB9	; 185
    50d0:	bf 4f       	sbci	r27, 0xFF	; 255
    50d2:	fe 01       	movw	r30, r28
    50d4:	e5 5b       	subi	r30, 0xB5	; 181
    50d6:	ff 4f       	sbci	r31, 0xFF	; 255
    50d8:	80 81       	ld	r24, Z
    50da:	91 81       	ldd	r25, Z+1	; 0x01
    50dc:	8d 93       	st	X+, r24
    50de:	9c 93       	st	X, r25
    50e0:	fe 01       	movw	r30, r28
    50e2:	e9 5b       	subi	r30, 0xB9	; 185
    50e4:	ff 4f       	sbci	r31, 0xFF	; 255
    50e6:	80 81       	ld	r24, Z
    50e8:	91 81       	ldd	r25, Z+1	; 0x01
    50ea:	01 97       	sbiw	r24, 0x01	; 1
    50ec:	f1 f7       	brne	.-4      	; 0x50ea <HLCD_displayChar+0x8fc>
    50ee:	fe 01       	movw	r30, r28
    50f0:	e9 5b       	subi	r30, 0xB9	; 185
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	91 83       	std	Z+1, r25	; 0x01
    50f6:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Char<<4);

			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Char& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char);
    50f8:	fe 01       	movw	r30, r28
    50fa:	e5 56       	subi	r30, 0x65	; 101
    50fc:	ff 4f       	sbci	r31, 0xFF	; 255
    50fe:	01 90       	ld	r0, Z+
    5100:	f0 81       	ld	r31, Z
    5102:	e0 2d       	mov	r30, r0
    5104:	82 81       	ldd	r24, Z+2	; 0x02
    5106:	fe 01       	movw	r30, r28
    5108:	e3 56       	subi	r30, 0x63	; 99
    510a:	ff 4f       	sbci	r31, 0xFF	; 255
    510c:	60 81       	ld	r22, Z
    510e:	0e 94 9e 08 	call	0x113c	; 0x113c <GPIO_set4msbValue>
    5112:	fe 01       	movw	r30, r28
    5114:	ed 5b       	subi	r30, 0xBD	; 189
    5116:	ff 4f       	sbci	r31, 0xFF	; 255
    5118:	80 e0       	ldi	r24, 0x00	; 0
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	a0 ef       	ldi	r26, 0xF0	; 240
    511e:	b1 e4       	ldi	r27, 0x41	; 65
    5120:	80 83       	st	Z, r24
    5122:	91 83       	std	Z+1, r25	; 0x01
    5124:	a2 83       	std	Z+2, r26	; 0x02
    5126:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5128:	8e 01       	movw	r16, r28
    512a:	01 5c       	subi	r16, 0xC1	; 193
    512c:	1f 4f       	sbci	r17, 0xFF	; 255
    512e:	fe 01       	movw	r30, r28
    5130:	ed 5b       	subi	r30, 0xBD	; 189
    5132:	ff 4f       	sbci	r31, 0xFF	; 255
    5134:	60 81       	ld	r22, Z
    5136:	71 81       	ldd	r23, Z+1	; 0x01
    5138:	82 81       	ldd	r24, Z+2	; 0x02
    513a:	93 81       	ldd	r25, Z+3	; 0x03
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	4a ef       	ldi	r20, 0xFA	; 250
    5142:	54 e4       	ldi	r21, 0x44	; 68
    5144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5148:	dc 01       	movw	r26, r24
    514a:	cb 01       	movw	r24, r22
    514c:	f8 01       	movw	r30, r16
    514e:	80 83       	st	Z, r24
    5150:	91 83       	std	Z+1, r25	; 0x01
    5152:	a2 83       	std	Z+2, r26	; 0x02
    5154:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5156:	fe 01       	movw	r30, r28
    5158:	ff 96       	adiw	r30, 0x3f	; 63
    515a:	60 81       	ld	r22, Z
    515c:	71 81       	ldd	r23, Z+1	; 0x01
    515e:	82 81       	ldd	r24, Z+2	; 0x02
    5160:	93 81       	ldd	r25, Z+3	; 0x03
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	40 e8       	ldi	r20, 0x80	; 128
    5168:	5f e3       	ldi	r21, 0x3F	; 63
    516a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    516e:	88 23       	and	r24, r24
    5170:	2c f4       	brge	.+10     	; 0x517c <HLCD_displayChar+0x98e>
		__ticks = 1;
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	9e af       	std	Y+62, r25	; 0x3e
    5178:	8d af       	std	Y+61, r24	; 0x3d
    517a:	46 c0       	rjmp	.+140    	; 0x5208 <HLCD_displayChar+0xa1a>
	else if (__tmp > 65535)
    517c:	fe 01       	movw	r30, r28
    517e:	ff 96       	adiw	r30, 0x3f	; 63
    5180:	60 81       	ld	r22, Z
    5182:	71 81       	ldd	r23, Z+1	; 0x01
    5184:	82 81       	ldd	r24, Z+2	; 0x02
    5186:	93 81       	ldd	r25, Z+3	; 0x03
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	3f ef       	ldi	r19, 0xFF	; 255
    518c:	4f e7       	ldi	r20, 0x7F	; 127
    518e:	57 e4       	ldi	r21, 0x47	; 71
    5190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5194:	18 16       	cp	r1, r24
    5196:	64 f5       	brge	.+88     	; 0x51f0 <HLCD_displayChar+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5198:	fe 01       	movw	r30, r28
    519a:	ed 5b       	subi	r30, 0xBD	; 189
    519c:	ff 4f       	sbci	r31, 0xFF	; 255
    519e:	60 81       	ld	r22, Z
    51a0:	71 81       	ldd	r23, Z+1	; 0x01
    51a2:	82 81       	ldd	r24, Z+2	; 0x02
    51a4:	93 81       	ldd	r25, Z+3	; 0x03
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	40 e2       	ldi	r20, 0x20	; 32
    51ac:	51 e4       	ldi	r21, 0x41	; 65
    51ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51b2:	dc 01       	movw	r26, r24
    51b4:	cb 01       	movw	r24, r22
    51b6:	bc 01       	movw	r22, r24
    51b8:	cd 01       	movw	r24, r26
    51ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51be:	dc 01       	movw	r26, r24
    51c0:	cb 01       	movw	r24, r22
    51c2:	9e af       	std	Y+62, r25	; 0x3e
    51c4:	8d af       	std	Y+61, r24	; 0x3d
    51c6:	0f c0       	rjmp	.+30     	; 0x51e6 <HLCD_displayChar+0x9f8>
    51c8:	88 ec       	ldi	r24, 0xC8	; 200
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	9c af       	std	Y+60, r25	; 0x3c
    51ce:	8b af       	std	Y+59, r24	; 0x3b
    51d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    51d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    51d4:	01 97       	sbiw	r24, 0x01	; 1
    51d6:	f1 f7       	brne	.-4      	; 0x51d4 <HLCD_displayChar+0x9e6>
    51d8:	9c af       	std	Y+60, r25	; 0x3c
    51da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    51de:	9e ad       	ldd	r25, Y+62	; 0x3e
    51e0:	01 97       	sbiw	r24, 0x01	; 1
    51e2:	9e af       	std	Y+62, r25	; 0x3e
    51e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    51e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    51ea:	00 97       	sbiw	r24, 0x00	; 0
    51ec:	69 f7       	brne	.-38     	; 0x51c8 <HLCD_displayChar+0x9da>
    51ee:	16 c0       	rjmp	.+44     	; 0x521c <HLCD_displayChar+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51f0:	fe 01       	movw	r30, r28
    51f2:	ff 96       	adiw	r30, 0x3f	; 63
    51f4:	60 81       	ld	r22, Z
    51f6:	71 81       	ldd	r23, Z+1	; 0x01
    51f8:	82 81       	ldd	r24, Z+2	; 0x02
    51fa:	93 81       	ldd	r25, Z+3	; 0x03
    51fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5200:	dc 01       	movw	r26, r24
    5202:	cb 01       	movw	r24, r22
    5204:	9e af       	std	Y+62, r25	; 0x3e
    5206:	8d af       	std	Y+61, r24	; 0x3d
    5208:	8d ad       	ldd	r24, Y+61	; 0x3d
    520a:	9e ad       	ldd	r25, Y+62	; 0x3e
    520c:	9a af       	std	Y+58, r25	; 0x3a
    520e:	89 af       	std	Y+57, r24	; 0x39
    5210:	89 ad       	ldd	r24, Y+57	; 0x39
    5212:	9a ad       	ldd	r25, Y+58	; 0x3a
    5214:	01 97       	sbiw	r24, 0x01	; 1
    5216:	f1 f7       	brne	.-4      	; 0x5214 <HLCD_displayChar+0xa26>
    5218:	9a af       	std	Y+58, r25	; 0x3a
    521a:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    521c:	fe 01       	movw	r30, r28
    521e:	e3 57       	subi	r30, 0x73	; 115
    5220:	ff 4f       	sbci	r31, 0xFF	; 255
    5222:	80 81       	ld	r24, Z
    5224:	88 23       	and	r24, r24
    5226:	59 f4       	brne	.+22     	; 0x523e <HLCD_displayChar+0xa50>
    5228:	ce 01       	movw	r24, r28
    522a:	89 56       	subi	r24, 0x69	; 105
    522c:	9f 4f       	sbci	r25, 0xFF	; 255
    522e:	60 e0       	ldi	r22, 0x00	; 0
    5230:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    5234:	fe 01       	movw	r30, r28
    5236:	e3 57       	subi	r30, 0x73	; 115
    5238:	ff 4f       	sbci	r31, 0xFF	; 255
    523a:	80 83       	st	Z, r24
    523c:	05 c0       	rjmp	.+10     	; 0x5248 <HLCD_displayChar+0xa5a>
			else lcdRet = HLCD_NOK;
    523e:	fe 01       	movw	r30, r28
    5240:	e2 57       	subi	r30, 0x72	; 114
    5242:	ff 4f       	sbci	r31, 0xFF	; 255
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	80 83       	st	Z, r24
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	90 e0       	ldi	r25, 0x00	; 0
    524c:	a0 ef       	ldi	r26, 0xF0	; 240
    524e:	b1 e4       	ldi	r27, 0x41	; 65
    5250:	8d ab       	std	Y+53, r24	; 0x35
    5252:	9e ab       	std	Y+54, r25	; 0x36
    5254:	af ab       	std	Y+55, r26	; 0x37
    5256:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5258:	6d a9       	ldd	r22, Y+53	; 0x35
    525a:	7e a9       	ldd	r23, Y+54	; 0x36
    525c:	8f a9       	ldd	r24, Y+55	; 0x37
    525e:	98 ad       	ldd	r25, Y+56	; 0x38
    5260:	20 e0       	ldi	r18, 0x00	; 0
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	4a ef       	ldi	r20, 0xFA	; 250
    5266:	54 e4       	ldi	r21, 0x44	; 68
    5268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    526c:	dc 01       	movw	r26, r24
    526e:	cb 01       	movw	r24, r22
    5270:	89 ab       	std	Y+49, r24	; 0x31
    5272:	9a ab       	std	Y+50, r25	; 0x32
    5274:	ab ab       	std	Y+51, r26	; 0x33
    5276:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5278:	69 a9       	ldd	r22, Y+49	; 0x31
    527a:	7a a9       	ldd	r23, Y+50	; 0x32
    527c:	8b a9       	ldd	r24, Y+51	; 0x33
    527e:	9c a9       	ldd	r25, Y+52	; 0x34
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	40 e8       	ldi	r20, 0x80	; 128
    5286:	5f e3       	ldi	r21, 0x3F	; 63
    5288:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    528c:	88 23       	and	r24, r24
    528e:	2c f4       	brge	.+10     	; 0x529a <HLCD_displayChar+0xaac>
		__ticks = 1;
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	98 ab       	std	Y+48, r25	; 0x30
    5296:	8f a7       	std	Y+47, r24	; 0x2f
    5298:	3f c0       	rjmp	.+126    	; 0x5318 <HLCD_displayChar+0xb2a>
	else if (__tmp > 65535)
    529a:	69 a9       	ldd	r22, Y+49	; 0x31
    529c:	7a a9       	ldd	r23, Y+50	; 0x32
    529e:	8b a9       	ldd	r24, Y+51	; 0x33
    52a0:	9c a9       	ldd	r25, Y+52	; 0x34
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	3f ef       	ldi	r19, 0xFF	; 255
    52a6:	4f e7       	ldi	r20, 0x7F	; 127
    52a8:	57 e4       	ldi	r21, 0x47	; 71
    52aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52ae:	18 16       	cp	r1, r24
    52b0:	4c f5       	brge	.+82     	; 0x5304 <HLCD_displayChar+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52b2:	6d a9       	ldd	r22, Y+53	; 0x35
    52b4:	7e a9       	ldd	r23, Y+54	; 0x36
    52b6:	8f a9       	ldd	r24, Y+55	; 0x37
    52b8:	98 ad       	ldd	r25, Y+56	; 0x38
    52ba:	20 e0       	ldi	r18, 0x00	; 0
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	40 e2       	ldi	r20, 0x20	; 32
    52c0:	51 e4       	ldi	r21, 0x41	; 65
    52c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52c6:	dc 01       	movw	r26, r24
    52c8:	cb 01       	movw	r24, r22
    52ca:	bc 01       	movw	r22, r24
    52cc:	cd 01       	movw	r24, r26
    52ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d2:	dc 01       	movw	r26, r24
    52d4:	cb 01       	movw	r24, r22
    52d6:	98 ab       	std	Y+48, r25	; 0x30
    52d8:	8f a7       	std	Y+47, r24	; 0x2f
    52da:	0f c0       	rjmp	.+30     	; 0x52fa <HLCD_displayChar+0xb0c>
    52dc:	88 ec       	ldi	r24, 0xC8	; 200
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	9e a7       	std	Y+46, r25	; 0x2e
    52e2:	8d a7       	std	Y+45, r24	; 0x2d
    52e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    52e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    52e8:	01 97       	sbiw	r24, 0x01	; 1
    52ea:	f1 f7       	brne	.-4      	; 0x52e8 <HLCD_displayChar+0xafa>
    52ec:	9e a7       	std	Y+46, r25	; 0x2e
    52ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    52f2:	98 a9       	ldd	r25, Y+48	; 0x30
    52f4:	01 97       	sbiw	r24, 0x01	; 1
    52f6:	98 ab       	std	Y+48, r25	; 0x30
    52f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    52fc:	98 a9       	ldd	r25, Y+48	; 0x30
    52fe:	00 97       	sbiw	r24, 0x00	; 0
    5300:	69 f7       	brne	.-38     	; 0x52dc <HLCD_displayChar+0xaee>
    5302:	b8 c1       	rjmp	.+880    	; 0x5674 <HLCD_displayChar+0xe86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5304:	69 a9       	ldd	r22, Y+49	; 0x31
    5306:	7a a9       	ldd	r23, Y+50	; 0x32
    5308:	8b a9       	ldd	r24, Y+51	; 0x33
    530a:	9c a9       	ldd	r25, Y+52	; 0x34
    530c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5310:	dc 01       	movw	r26, r24
    5312:	cb 01       	movw	r24, r22
    5314:	98 ab       	std	Y+48, r25	; 0x30
    5316:	8f a7       	std	Y+47, r24	; 0x2f
    5318:	8f a5       	ldd	r24, Y+47	; 0x2f
    531a:	98 a9       	ldd	r25, Y+48	; 0x30
    531c:	9c a7       	std	Y+44, r25	; 0x2c
    531e:	8b a7       	std	Y+43, r24	; 0x2b
    5320:	8b a5       	ldd	r24, Y+43	; 0x2b
    5322:	9c a5       	ldd	r25, Y+44	; 0x2c
    5324:	01 97       	sbiw	r24, 0x01	; 1
    5326:	f1 f7       	brne	.-4      	; 0x5324 <HLCD_displayChar+0xb36>
    5328:	9c a7       	std	Y+44, r25	; 0x2c
    532a:	8b a7       	std	Y+43, r24	; 0x2b
    532c:	a3 c1       	rjmp	.+838    	; 0x5674 <HLCD_displayChar+0xe86>

			_delay_ms(30);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    532e:	fe 01       	movw	r30, r28
    5330:	e5 56       	subi	r30, 0x65	; 101
    5332:	ff 4f       	sbci	r31, 0xFF	; 255
    5334:	01 90       	ld	r0, Z+
    5336:	f0 81       	ld	r31, Z
    5338:	e0 2d       	mov	r30, r0
    533a:	80 81       	ld	r24, Z
    533c:	81 30       	cpi	r24, 0x01	; 1
    533e:	09 f0       	breq	.+2      	; 0x5342 <HLCD_displayChar+0xb54>
    5340:	94 c1       	rjmp	.+808    	; 0x566a <HLCD_displayChar+0xe7c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    5342:	fe 01       	movw	r30, r28
    5344:	e3 57       	subi	r30, 0x73	; 115
    5346:	ff 4f       	sbci	r31, 0xFF	; 255
    5348:	80 81       	ld	r24, Z
    534a:	88 23       	and	r24, r24
    534c:	59 f4       	brne	.+22     	; 0x5364 <HLCD_displayChar+0xb76>
    534e:	ce 01       	movw	r24, r28
    5350:	89 56       	subi	r24, 0x69	; 105
    5352:	9f 4f       	sbci	r25, 0xFF	; 255
    5354:	61 e0       	ldi	r22, 0x01	; 1
    5356:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    535a:	fe 01       	movw	r30, r28
    535c:	e3 57       	subi	r30, 0x73	; 115
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	80 83       	st	Z, r24
    5362:	05 c0       	rjmp	.+10     	; 0x536e <HLCD_displayChar+0xb80>
			else lcdRet = HLCD_NOK;
    5364:	fe 01       	movw	r30, r28
    5366:	e2 57       	subi	r30, 0x72	; 114
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	80 83       	st	Z, r24
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	a0 e8       	ldi	r26, 0x80	; 128
    5374:	bf e3       	ldi	r27, 0x3F	; 63
    5376:	8f a3       	std	Y+39, r24	; 0x27
    5378:	98 a7       	std	Y+40, r25	; 0x28
    537a:	a9 a7       	std	Y+41, r26	; 0x29
    537c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    537e:	6f a1       	ldd	r22, Y+39	; 0x27
    5380:	78 a5       	ldd	r23, Y+40	; 0x28
    5382:	89 a5       	ldd	r24, Y+41	; 0x29
    5384:	9a a5       	ldd	r25, Y+42	; 0x2a
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	4a ef       	ldi	r20, 0xFA	; 250
    538c:	54 e4       	ldi	r21, 0x44	; 68
    538e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5392:	dc 01       	movw	r26, r24
    5394:	cb 01       	movw	r24, r22
    5396:	8b a3       	std	Y+35, r24	; 0x23
    5398:	9c a3       	std	Y+36, r25	; 0x24
    539a:	ad a3       	std	Y+37, r26	; 0x25
    539c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    539e:	6b a1       	ldd	r22, Y+35	; 0x23
    53a0:	7c a1       	ldd	r23, Y+36	; 0x24
    53a2:	8d a1       	ldd	r24, Y+37	; 0x25
    53a4:	9e a1       	ldd	r25, Y+38	; 0x26
    53a6:	20 e0       	ldi	r18, 0x00	; 0
    53a8:	30 e0       	ldi	r19, 0x00	; 0
    53aa:	40 e8       	ldi	r20, 0x80	; 128
    53ac:	5f e3       	ldi	r21, 0x3F	; 63
    53ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53b2:	88 23       	and	r24, r24
    53b4:	2c f4       	brge	.+10     	; 0x53c0 <HLCD_displayChar+0xbd2>
		__ticks = 1;
    53b6:	81 e0       	ldi	r24, 0x01	; 1
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	9a a3       	std	Y+34, r25	; 0x22
    53bc:	89 a3       	std	Y+33, r24	; 0x21
    53be:	3f c0       	rjmp	.+126    	; 0x543e <HLCD_displayChar+0xc50>
	else if (__tmp > 65535)
    53c0:	6b a1       	ldd	r22, Y+35	; 0x23
    53c2:	7c a1       	ldd	r23, Y+36	; 0x24
    53c4:	8d a1       	ldd	r24, Y+37	; 0x25
    53c6:	9e a1       	ldd	r25, Y+38	; 0x26
    53c8:	20 e0       	ldi	r18, 0x00	; 0
    53ca:	3f ef       	ldi	r19, 0xFF	; 255
    53cc:	4f e7       	ldi	r20, 0x7F	; 127
    53ce:	57 e4       	ldi	r21, 0x47	; 71
    53d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    53d4:	18 16       	cp	r1, r24
    53d6:	4c f5       	brge	.+82     	; 0x542a <HLCD_displayChar+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53d8:	6f a1       	ldd	r22, Y+39	; 0x27
    53da:	78 a5       	ldd	r23, Y+40	; 0x28
    53dc:	89 a5       	ldd	r24, Y+41	; 0x29
    53de:	9a a5       	ldd	r25, Y+42	; 0x2a
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	40 e2       	ldi	r20, 0x20	; 32
    53e6:	51 e4       	ldi	r21, 0x41	; 65
    53e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ec:	dc 01       	movw	r26, r24
    53ee:	cb 01       	movw	r24, r22
    53f0:	bc 01       	movw	r22, r24
    53f2:	cd 01       	movw	r24, r26
    53f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53f8:	dc 01       	movw	r26, r24
    53fa:	cb 01       	movw	r24, r22
    53fc:	9a a3       	std	Y+34, r25	; 0x22
    53fe:	89 a3       	std	Y+33, r24	; 0x21
    5400:	0f c0       	rjmp	.+30     	; 0x5420 <HLCD_displayChar+0xc32>
    5402:	88 ec       	ldi	r24, 0xC8	; 200
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	98 a3       	std	Y+32, r25	; 0x20
    5408:	8f 8f       	std	Y+31, r24	; 0x1f
    540a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    540c:	98 a1       	ldd	r25, Y+32	; 0x20
    540e:	01 97       	sbiw	r24, 0x01	; 1
    5410:	f1 f7       	brne	.-4      	; 0x540e <HLCD_displayChar+0xc20>
    5412:	98 a3       	std	Y+32, r25	; 0x20
    5414:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5416:	89 a1       	ldd	r24, Y+33	; 0x21
    5418:	9a a1       	ldd	r25, Y+34	; 0x22
    541a:	01 97       	sbiw	r24, 0x01	; 1
    541c:	9a a3       	std	Y+34, r25	; 0x22
    541e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5420:	89 a1       	ldd	r24, Y+33	; 0x21
    5422:	9a a1       	ldd	r25, Y+34	; 0x22
    5424:	00 97       	sbiw	r24, 0x00	; 0
    5426:	69 f7       	brne	.-38     	; 0x5402 <HLCD_displayChar+0xc14>
    5428:	14 c0       	rjmp	.+40     	; 0x5452 <HLCD_displayChar+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    542a:	6b a1       	ldd	r22, Y+35	; 0x23
    542c:	7c a1       	ldd	r23, Y+36	; 0x24
    542e:	8d a1       	ldd	r24, Y+37	; 0x25
    5430:	9e a1       	ldd	r25, Y+38	; 0x26
    5432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	9a a3       	std	Y+34, r25	; 0x22
    543c:	89 a3       	std	Y+33, r24	; 0x21
    543e:	89 a1       	ldd	r24, Y+33	; 0x21
    5440:	9a a1       	ldd	r25, Y+34	; 0x22
    5442:	9e 8f       	std	Y+30, r25	; 0x1e
    5444:	8d 8f       	std	Y+29, r24	; 0x1d
    5446:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5448:	9e 8d       	ldd	r25, Y+30	; 0x1e
    544a:	01 97       	sbiw	r24, 0x01	; 1
    544c:	f1 f7       	brne	.-4      	; 0x544a <HLCD_displayChar+0xc5c>
    544e:	9e 8f       	std	Y+30, r25	; 0x1e
    5450:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			PORTB_REG &= 0;
    5452:	e8 e3       	ldi	r30, 0x38	; 56
    5454:	f0 e0       	ldi	r31, 0x00	; 0
    5456:	80 81       	ld	r24, Z
    5458:	e8 e3       	ldi	r30, 0x38	; 56
    545a:	f0 e0       	ldi	r31, 0x00	; 0
    545c:	10 82       	st	Z, r1
			PORTB_REG |= Copy_u8Char;
    545e:	a8 e3       	ldi	r26, 0x38	; 56
    5460:	b0 e0       	ldi	r27, 0x00	; 0
    5462:	e8 e3       	ldi	r30, 0x38	; 56
    5464:	f0 e0       	ldi	r31, 0x00	; 0
    5466:	90 81       	ld	r25, Z
    5468:	fe 01       	movw	r30, r28
    546a:	e3 56       	subi	r30, 0x63	; 99
    546c:	ff 4f       	sbci	r31, 0xFF	; 255
    546e:	80 81       	ld	r24, Z
    5470:	89 2b       	or	r24, r25
    5472:	8c 93       	st	X, r24
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	a0 e8       	ldi	r26, 0x80	; 128
    547a:	bf e3       	ldi	r27, 0x3F	; 63
    547c:	89 8f       	std	Y+25, r24	; 0x19
    547e:	9a 8f       	std	Y+26, r25	; 0x1a
    5480:	ab 8f       	std	Y+27, r26	; 0x1b
    5482:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5484:	69 8d       	ldd	r22, Y+25	; 0x19
    5486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    548a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    548c:	20 e0       	ldi	r18, 0x00	; 0
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	4a ef       	ldi	r20, 0xFA	; 250
    5492:	54 e4       	ldi	r21, 0x44	; 68
    5494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5498:	dc 01       	movw	r26, r24
    549a:	cb 01       	movw	r24, r22
    549c:	8d 8b       	std	Y+21, r24	; 0x15
    549e:	9e 8b       	std	Y+22, r25	; 0x16
    54a0:	af 8b       	std	Y+23, r26	; 0x17
    54a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    54a4:	6d 89       	ldd	r22, Y+21	; 0x15
    54a6:	7e 89       	ldd	r23, Y+22	; 0x16
    54a8:	8f 89       	ldd	r24, Y+23	; 0x17
    54aa:	98 8d       	ldd	r25, Y+24	; 0x18
    54ac:	20 e0       	ldi	r18, 0x00	; 0
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	40 e8       	ldi	r20, 0x80	; 128
    54b2:	5f e3       	ldi	r21, 0x3F	; 63
    54b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54b8:	88 23       	and	r24, r24
    54ba:	2c f4       	brge	.+10     	; 0x54c6 <HLCD_displayChar+0xcd8>
		__ticks = 1;
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	9c 8b       	std	Y+20, r25	; 0x14
    54c2:	8b 8b       	std	Y+19, r24	; 0x13
    54c4:	3f c0       	rjmp	.+126    	; 0x5544 <HLCD_displayChar+0xd56>
	else if (__tmp > 65535)
    54c6:	6d 89       	ldd	r22, Y+21	; 0x15
    54c8:	7e 89       	ldd	r23, Y+22	; 0x16
    54ca:	8f 89       	ldd	r24, Y+23	; 0x17
    54cc:	98 8d       	ldd	r25, Y+24	; 0x18
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	3f ef       	ldi	r19, 0xFF	; 255
    54d2:	4f e7       	ldi	r20, 0x7F	; 127
    54d4:	57 e4       	ldi	r21, 0x47	; 71
    54d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54da:	18 16       	cp	r1, r24
    54dc:	4c f5       	brge	.+82     	; 0x5530 <HLCD_displayChar+0xd42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54de:	69 8d       	ldd	r22, Y+25	; 0x19
    54e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54e6:	20 e0       	ldi	r18, 0x00	; 0
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	40 e2       	ldi	r20, 0x20	; 32
    54ec:	51 e4       	ldi	r21, 0x41	; 65
    54ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54f2:	dc 01       	movw	r26, r24
    54f4:	cb 01       	movw	r24, r22
    54f6:	bc 01       	movw	r22, r24
    54f8:	cd 01       	movw	r24, r26
    54fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54fe:	dc 01       	movw	r26, r24
    5500:	cb 01       	movw	r24, r22
    5502:	9c 8b       	std	Y+20, r25	; 0x14
    5504:	8b 8b       	std	Y+19, r24	; 0x13
    5506:	0f c0       	rjmp	.+30     	; 0x5526 <HLCD_displayChar+0xd38>
    5508:	88 ec       	ldi	r24, 0xC8	; 200
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	9a 8b       	std	Y+18, r25	; 0x12
    550e:	89 8b       	std	Y+17, r24	; 0x11
    5510:	89 89       	ldd	r24, Y+17	; 0x11
    5512:	9a 89       	ldd	r25, Y+18	; 0x12
    5514:	01 97       	sbiw	r24, 0x01	; 1
    5516:	f1 f7       	brne	.-4      	; 0x5514 <HLCD_displayChar+0xd26>
    5518:	9a 8b       	std	Y+18, r25	; 0x12
    551a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    551c:	8b 89       	ldd	r24, Y+19	; 0x13
    551e:	9c 89       	ldd	r25, Y+20	; 0x14
    5520:	01 97       	sbiw	r24, 0x01	; 1
    5522:	9c 8b       	std	Y+20, r25	; 0x14
    5524:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5526:	8b 89       	ldd	r24, Y+19	; 0x13
    5528:	9c 89       	ldd	r25, Y+20	; 0x14
    552a:	00 97       	sbiw	r24, 0x00	; 0
    552c:	69 f7       	brne	.-38     	; 0x5508 <HLCD_displayChar+0xd1a>
    552e:	14 c0       	rjmp	.+40     	; 0x5558 <HLCD_displayChar+0xd6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5530:	6d 89       	ldd	r22, Y+21	; 0x15
    5532:	7e 89       	ldd	r23, Y+22	; 0x16
    5534:	8f 89       	ldd	r24, Y+23	; 0x17
    5536:	98 8d       	ldd	r25, Y+24	; 0x18
    5538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    553c:	dc 01       	movw	r26, r24
    553e:	cb 01       	movw	r24, r22
    5540:	9c 8b       	std	Y+20, r25	; 0x14
    5542:	8b 8b       	std	Y+19, r24	; 0x13
    5544:	8b 89       	ldd	r24, Y+19	; 0x13
    5546:	9c 89       	ldd	r25, Y+20	; 0x14
    5548:	98 8b       	std	Y+16, r25	; 0x10
    554a:	8f 87       	std	Y+15, r24	; 0x0f
    554c:	8f 85       	ldd	r24, Y+15	; 0x0f
    554e:	98 89       	ldd	r25, Y+16	; 0x10
    5550:	01 97       	sbiw	r24, 0x01	; 1
    5552:	f1 f7       	brne	.-4      	; 0x5550 <HLCD_displayChar+0xd62>
    5554:	98 8b       	std	Y+16, r25	; 0x10
    5556:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    5558:	fe 01       	movw	r30, r28
    555a:	e3 57       	subi	r30, 0x73	; 115
    555c:	ff 4f       	sbci	r31, 0xFF	; 255
    555e:	80 81       	ld	r24, Z
    5560:	88 23       	and	r24, r24
    5562:	59 f4       	brne	.+22     	; 0x557a <HLCD_displayChar+0xd8c>
    5564:	ce 01       	movw	r24, r28
    5566:	89 56       	subi	r24, 0x69	; 105
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	60 e0       	ldi	r22, 0x00	; 0
    556c:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    5570:	fe 01       	movw	r30, r28
    5572:	e3 57       	subi	r30, 0x73	; 115
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	80 83       	st	Z, r24
    5578:	05 c0       	rjmp	.+10     	; 0x5584 <HLCD_displayChar+0xd96>
			else lcdRet = HLCD_NOK;
    557a:	fe 01       	movw	r30, r28
    557c:	e2 57       	subi	r30, 0x72	; 114
    557e:	ff 4f       	sbci	r31, 0xFF	; 255
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	80 83       	st	Z, r24
    5584:	80 e0       	ldi	r24, 0x00	; 0
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	a0 e8       	ldi	r26, 0x80	; 128
    558a:	bf e3       	ldi	r27, 0x3F	; 63
    558c:	8b 87       	std	Y+11, r24	; 0x0b
    558e:	9c 87       	std	Y+12, r25	; 0x0c
    5590:	ad 87       	std	Y+13, r26	; 0x0d
    5592:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5594:	6b 85       	ldd	r22, Y+11	; 0x0b
    5596:	7c 85       	ldd	r23, Y+12	; 0x0c
    5598:	8d 85       	ldd	r24, Y+13	; 0x0d
    559a:	9e 85       	ldd	r25, Y+14	; 0x0e
    559c:	20 e0       	ldi	r18, 0x00	; 0
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	4a ef       	ldi	r20, 0xFA	; 250
    55a2:	54 e4       	ldi	r21, 0x44	; 68
    55a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a8:	dc 01       	movw	r26, r24
    55aa:	cb 01       	movw	r24, r22
    55ac:	8f 83       	std	Y+7, r24	; 0x07
    55ae:	98 87       	std	Y+8, r25	; 0x08
    55b0:	a9 87       	std	Y+9, r26	; 0x09
    55b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55b4:	6f 81       	ldd	r22, Y+7	; 0x07
    55b6:	78 85       	ldd	r23, Y+8	; 0x08
    55b8:	89 85       	ldd	r24, Y+9	; 0x09
    55ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	40 e8       	ldi	r20, 0x80	; 128
    55c2:	5f e3       	ldi	r21, 0x3F	; 63
    55c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55c8:	88 23       	and	r24, r24
    55ca:	2c f4       	brge	.+10     	; 0x55d6 <HLCD_displayChar+0xde8>
		__ticks = 1;
    55cc:	81 e0       	ldi	r24, 0x01	; 1
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	9e 83       	std	Y+6, r25	; 0x06
    55d2:	8d 83       	std	Y+5, r24	; 0x05
    55d4:	3f c0       	rjmp	.+126    	; 0x5654 <HLCD_displayChar+0xe66>
	else if (__tmp > 65535)
    55d6:	6f 81       	ldd	r22, Y+7	; 0x07
    55d8:	78 85       	ldd	r23, Y+8	; 0x08
    55da:	89 85       	ldd	r24, Y+9	; 0x09
    55dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	3f ef       	ldi	r19, 0xFF	; 255
    55e2:	4f e7       	ldi	r20, 0x7F	; 127
    55e4:	57 e4       	ldi	r21, 0x47	; 71
    55e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55ea:	18 16       	cp	r1, r24
    55ec:	4c f5       	brge	.+82     	; 0x5640 <HLCD_displayChar+0xe52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    55f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    55f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    55f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	40 e2       	ldi	r20, 0x20	; 32
    55fc:	51 e4       	ldi	r21, 0x41	; 65
    55fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5602:	dc 01       	movw	r26, r24
    5604:	cb 01       	movw	r24, r22
    5606:	bc 01       	movw	r22, r24
    5608:	cd 01       	movw	r24, r26
    560a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560e:	dc 01       	movw	r26, r24
    5610:	cb 01       	movw	r24, r22
    5612:	9e 83       	std	Y+6, r25	; 0x06
    5614:	8d 83       	std	Y+5, r24	; 0x05
    5616:	0f c0       	rjmp	.+30     	; 0x5636 <HLCD_displayChar+0xe48>
    5618:	88 ec       	ldi	r24, 0xC8	; 200
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	9c 83       	std	Y+4, r25	; 0x04
    561e:	8b 83       	std	Y+3, r24	; 0x03
    5620:	8b 81       	ldd	r24, Y+3	; 0x03
    5622:	9c 81       	ldd	r25, Y+4	; 0x04
    5624:	01 97       	sbiw	r24, 0x01	; 1
    5626:	f1 f7       	brne	.-4      	; 0x5624 <HLCD_displayChar+0xe36>
    5628:	9c 83       	std	Y+4, r25	; 0x04
    562a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    562c:	8d 81       	ldd	r24, Y+5	; 0x05
    562e:	9e 81       	ldd	r25, Y+6	; 0x06
    5630:	01 97       	sbiw	r24, 0x01	; 1
    5632:	9e 83       	std	Y+6, r25	; 0x06
    5634:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5636:	8d 81       	ldd	r24, Y+5	; 0x05
    5638:	9e 81       	ldd	r25, Y+6	; 0x06
    563a:	00 97       	sbiw	r24, 0x00	; 0
    563c:	69 f7       	brne	.-38     	; 0x5618 <HLCD_displayChar+0xe2a>
    563e:	1a c0       	rjmp	.+52     	; 0x5674 <HLCD_displayChar+0xe86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5640:	6f 81       	ldd	r22, Y+7	; 0x07
    5642:	78 85       	ldd	r23, Y+8	; 0x08
    5644:	89 85       	ldd	r24, Y+9	; 0x09
    5646:	9a 85       	ldd	r25, Y+10	; 0x0a
    5648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564c:	dc 01       	movw	r26, r24
    564e:	cb 01       	movw	r24, r22
    5650:	9e 83       	std	Y+6, r25	; 0x06
    5652:	8d 83       	std	Y+5, r24	; 0x05
    5654:	8d 81       	ldd	r24, Y+5	; 0x05
    5656:	9e 81       	ldd	r25, Y+6	; 0x06
    5658:	9a 83       	std	Y+2, r25	; 0x02
    565a:	89 83       	std	Y+1, r24	; 0x01
    565c:	89 81       	ldd	r24, Y+1	; 0x01
    565e:	9a 81       	ldd	r25, Y+2	; 0x02
    5660:	01 97       	sbiw	r24, 0x01	; 1
    5662:	f1 f7       	brne	.-4      	; 0x5660 <HLCD_displayChar+0xe72>
    5664:	9a 83       	std	Y+2, r25	; 0x02
    5666:	89 83       	std	Y+1, r24	; 0x01
    5668:	05 c0       	rjmp	.+10     	; 0x5674 <HLCD_displayChar+0xe86>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    566a:	fe 01       	movw	r30, r28
    566c:	e2 57       	subi	r30, 0x72	; 114
    566e:	ff 4f       	sbci	r31, 0xFF	; 255
    5670:	83 e0       	ldi	r24, 0x03	; 3
    5672:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    5674:	fe 01       	movw	r30, r28
    5676:	e3 57       	subi	r30, 0x73	; 115
    5678:	ff 4f       	sbci	r31, 0xFF	; 255
    567a:	80 81       	ld	r24, Z
    567c:	88 23       	and	r24, r24
    567e:	29 f4       	brne	.+10     	; 0x568a <HLCD_displayChar+0xe9c>
    5680:	fe 01       	movw	r30, r28
    5682:	e2 57       	subi	r30, 0x72	; 114
    5684:	ff 4f       	sbci	r31, 0xFF	; 255
    5686:	10 82       	st	Z, r1
    5688:	0b c0       	rjmp	.+22     	; 0x56a0 <HLCD_displayChar+0xeb2>
		else lcdRet = HLCD_NOK;
    568a:	fe 01       	movw	r30, r28
    568c:	e2 57       	subi	r30, 0x72	; 114
    568e:	ff 4f       	sbci	r31, 0xFF	; 255
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	80 83       	st	Z, r24
    5694:	05 c0       	rjmp	.+10     	; 0x56a0 <HLCD_displayChar+0xeb2>
	}
	else
	{
		lcdRet = HLCD_NOK;
    5696:	fe 01       	movw	r30, r28
    5698:	e2 57       	subi	r30, 0x72	; 114
    569a:	ff 4f       	sbci	r31, 0xFF	; 255
    569c:	81 e0       	ldi	r24, 0x01	; 1
    569e:	80 83       	st	Z, r24
	}

	return lcdRet;
    56a0:	fe 01       	movw	r30, r28
    56a2:	e2 57       	subi	r30, 0x72	; 114
    56a4:	ff 4f       	sbci	r31, 0xFF	; 255
    56a6:	80 81       	ld	r24, Z
}
    56a8:	c2 56       	subi	r28, 0x62	; 98
    56aa:	df 4f       	sbci	r29, 0xFF	; 255
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	de bf       	out	0x3e, r29	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	cd bf       	out	0x3d, r28	; 61
    56b6:	cf 91       	pop	r28
    56b8:	df 91       	pop	r29
    56ba:	1f 91       	pop	r17
    56bc:	0f 91       	pop	r16
    56be:	08 95       	ret

000056c0 <HLCD_displayString>:

EN_HLCD_systemState_t HLCD_displayString(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t *Copy_u8String)
{
    56c0:	df 93       	push	r29
    56c2:	cf 93       	push	r28
    56c4:	00 d0       	rcall	.+0      	; 0x56c6 <HLCD_displayString+0x6>
    56c6:	00 d0       	rcall	.+0      	; 0x56c8 <HLCD_displayString+0x8>
    56c8:	00 d0       	rcall	.+0      	; 0x56ca <HLCD_displayString+0xa>
    56ca:	cd b7       	in	r28, 0x3d	; 61
    56cc:	de b7       	in	r29, 0x3e	; 62
    56ce:	9c 83       	std	Y+4, r25	; 0x04
    56d0:	8b 83       	std	Y+3, r24	; 0x03
    56d2:	7e 83       	std	Y+6, r23	; 0x06
    56d4:	6d 83       	std	Y+5, r22	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    56d6:	81 e0       	ldi	r24, 0x01	; 1
    56d8:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    56da:	8b 81       	ldd	r24, Y+3	; 0x03
    56dc:	9c 81       	ldd	r25, Y+4	; 0x04
    56de:	00 97       	sbiw	r24, 0x00	; 0
    56e0:	69 f1       	breq	.+90     	; 0x573c <HLCD_displayString+0x7c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    56e2:	eb 81       	ldd	r30, Y+3	; 0x03
    56e4:	fc 81       	ldd	r31, Y+4	; 0x04
    56e6:	80 81       	ld	r24, Z
    56e8:	88 23       	and	r24, r24
    56ea:	51 f1       	breq	.+84     	; 0x5740 <HLCD_displayString+0x80>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    56ec:	eb 81       	ldd	r30, Y+3	; 0x03
    56ee:	fc 81       	ldd	r31, Y+4	; 0x04
    56f0:	80 81       	ld	r24, Z
    56f2:	81 30       	cpi	r24, 0x01	; 1
    56f4:	01 f5       	brne	.+64     	; 0x5736 <HLCD_displayString+0x76>
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    56f6:	19 82       	std	Y+1, r1	; 0x01
    56f8:	12 c0       	rjmp	.+36     	; 0x571e <HLCD_displayString+0x5e>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
    56fa:	89 81       	ldd	r24, Y+1	; 0x01
    56fc:	28 2f       	mov	r18, r24
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	8d 81       	ldd	r24, Y+5	; 0x05
    5702:	9e 81       	ldd	r25, Y+6	; 0x06
    5704:	fc 01       	movw	r30, r24
    5706:	e2 0f       	add	r30, r18
    5708:	f3 1f       	adc	r31, r19
    570a:	20 81       	ld	r18, Z
    570c:	8b 81       	ldd	r24, Y+3	; 0x03
    570e:	9c 81       	ldd	r25, Y+4	; 0x04
    5710:	62 2f       	mov	r22, r18
    5712:	0e 94 f7 23 	call	0x47ee	; 0x47ee <HLCD_displayChar>
    5716:	8a 83       	std	Y+2, r24	; 0x02
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    5718:	89 81       	ldd	r24, Y+1	; 0x01
    571a:	8f 5f       	subi	r24, 0xFF	; 255
    571c:	89 83       	std	Y+1, r24	; 0x01
    571e:	89 81       	ldd	r24, Y+1	; 0x01
    5720:	28 2f       	mov	r18, r24
    5722:	30 e0       	ldi	r19, 0x00	; 0
    5724:	8d 81       	ldd	r24, Y+5	; 0x05
    5726:	9e 81       	ldd	r25, Y+6	; 0x06
    5728:	fc 01       	movw	r30, r24
    572a:	e2 0f       	add	r30, r18
    572c:	f3 1f       	adc	r31, r19
    572e:	80 81       	ld	r24, Z
    5730:	88 23       	and	r24, r24
    5732:	19 f7       	brne	.-58     	; 0x56fa <HLCD_displayString+0x3a>
    5734:	05 c0       	rjmp	.+10     	; 0x5740 <HLCD_displayString+0x80>
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    5736:	83 e0       	ldi	r24, 0x03	; 3
    5738:	8a 83       	std	Y+2, r24	; 0x02
    573a:	02 c0       	rjmp	.+4      	; 0x5740 <HLCD_displayString+0x80>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    573c:	82 e0       	ldi	r24, 0x02	; 2
    573e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    5740:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5742:	26 96       	adiw	r28, 0x06	; 6
    5744:	0f b6       	in	r0, 0x3f	; 63
    5746:	f8 94       	cli
    5748:	de bf       	out	0x3e, r29	; 62
    574a:	0f be       	out	0x3f, r0	; 63
    574c:	cd bf       	out	0x3d, r28	; 61
    574e:	cf 91       	pop	r28
    5750:	df 91       	pop	r29
    5752:	08 95       	ret

00005754 <HLCD_displayNumber>:

EN_HLCD_systemState_t HLCD_displayNumber(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint32_t Copy_u8Number)
{
    5754:	0f 93       	push	r16
    5756:	1f 93       	push	r17
    5758:	df 93       	push	r29
    575a:	cf 93       	push	r28
    575c:	cd b7       	in	r28, 0x3d	; 61
    575e:	de b7       	in	r29, 0x3e	; 62
    5760:	64 97       	sbiw	r28, 0x14	; 20
    5762:	0f b6       	in	r0, 0x3f	; 63
    5764:	f8 94       	cli
    5766:	de bf       	out	0x3e, r29	; 62
    5768:	0f be       	out	0x3f, r0	; 63
    576a:	cd bf       	out	0x3d, r28	; 61
    576c:	98 8b       	std	Y+16, r25	; 0x10
    576e:	8f 87       	std	Y+15, r24	; 0x0f
    5770:	49 8b       	std	Y+17, r20	; 0x11
    5772:	5a 8b       	std	Y+18, r21	; 0x12
    5774:	6b 8b       	std	Y+19, r22	; 0x13
    5776:	7c 8b       	std	Y+20, r23	; 0x14
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    5778:	81 e0       	ldi	r24, 0x01	; 1
    577a:	8b 83       	std	Y+3, r24	; 0x03

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    577c:	8f 85       	ldd	r24, Y+15	; 0x0f
    577e:	98 89       	ldd	r25, Y+16	; 0x10
    5780:	00 97       	sbiw	r24, 0x00	; 0
    5782:	09 f4       	brne	.+2      	; 0x5786 <HLCD_displayNumber+0x32>
    5784:	8b c0       	rjmp	.+278    	; 0x589c <HLCD_displayNumber+0x148>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    5786:	ef 85       	ldd	r30, Y+15	; 0x0f
    5788:	f8 89       	ldd	r31, Y+16	; 0x10
    578a:	80 81       	ld	r24, Z
    578c:	88 23       	and	r24, r24
    578e:	09 f4       	brne	.+2      	; 0x5792 <HLCD_displayNumber+0x3e>
    5790:	87 c0       	rjmp	.+270    	; 0x58a0 <HLCD_displayNumber+0x14c>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    5792:	ef 85       	ldd	r30, Y+15	; 0x0f
    5794:	f8 89       	ldd	r31, Y+16	; 0x10
    5796:	80 81       	ld	r24, Z
    5798:	81 30       	cpi	r24, 0x01	; 1
    579a:	09 f0       	breq	.+2      	; 0x579e <HLCD_displayNumber+0x4a>
    579c:	7c c0       	rjmp	.+248    	; 0x5896 <HLCD_displayNumber+0x142>
		{
			uint8_t numberCounter = 0;
    579e:	1a 82       	std	Y+2, r1	; 0x02
			uint8_t digitsCounter = 0;
    57a0:	19 82       	std	Y+1, r1	; 0x01
			uint8_t bufferForNumbers[11];

			if(Copy_u8Number == 0)
    57a2:	89 89       	ldd	r24, Y+17	; 0x11
    57a4:	9a 89       	ldd	r25, Y+18	; 0x12
    57a6:	ab 89       	ldd	r26, Y+19	; 0x13
    57a8:	bc 89       	ldd	r27, Y+20	; 0x14
    57aa:	00 97       	sbiw	r24, 0x00	; 0
    57ac:	a1 05       	cpc	r26, r1
    57ae:	b1 05       	cpc	r27, r1
    57b0:	09 f0       	breq	.+2      	; 0x57b4 <HLCD_displayNumber+0x60>
    57b2:	44 c0       	rjmp	.+136    	; 0x583c <HLCD_displayNumber+0xe8>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,'0');
    57b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    57b6:	98 89       	ldd	r25, Y+16	; 0x10
    57b8:	60 e3       	ldi	r22, 0x30	; 48
    57ba:	0e 94 f7 23 	call	0x47ee	; 0x47ee <HLCD_displayChar>
    57be:	8b 83       	std	Y+3, r24	; 0x03
    57c0:	6f c0       	rjmp	.+222    	; 0x58a0 <HLCD_displayNumber+0x14c>
			}
			else
			{
				while(Copy_u8Number)
				{
					if(digitsCounter == 0)
    57c2:	89 81       	ldd	r24, Y+1	; 0x01
    57c4:	88 23       	and	r24, r24
    57c6:	69 f4       	brne	.+26     	; 0x57e2 <HLCD_displayNumber+0x8e>
					{
						bufferForNumbers[digitsCounter] = STR_NULL;
    57c8:	89 81       	ldd	r24, Y+1	; 0x01
    57ca:	28 2f       	mov	r18, r24
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	ce 01       	movw	r24, r28
    57d0:	04 96       	adiw	r24, 0x04	; 4
    57d2:	fc 01       	movw	r30, r24
    57d4:	e2 0f       	add	r30, r18
    57d6:	f3 1f       	adc	r31, r19
    57d8:	10 82       	st	Z, r1
						digitsCounter++;
    57da:	89 81       	ldd	r24, Y+1	; 0x01
    57dc:	8f 5f       	subi	r24, 0xFF	; 255
    57de:	89 83       	std	Y+1, r24	; 0x01
    57e0:	2d c0       	rjmp	.+90     	; 0x583c <HLCD_displayNumber+0xe8>
					}
					else
					{
						bufferForNumbers[digitsCounter] = Copy_u8Number%10;
    57e2:	89 81       	ldd	r24, Y+1	; 0x01
    57e4:	08 2f       	mov	r16, r24
    57e6:	10 e0       	ldi	r17, 0x00	; 0
    57e8:	89 89       	ldd	r24, Y+17	; 0x11
    57ea:	9a 89       	ldd	r25, Y+18	; 0x12
    57ec:	ab 89       	ldd	r26, Y+19	; 0x13
    57ee:	bc 89       	ldd	r27, Y+20	; 0x14
    57f0:	2a e0       	ldi	r18, 0x0A	; 10
    57f2:	30 e0       	ldi	r19, 0x00	; 0
    57f4:	40 e0       	ldi	r20, 0x00	; 0
    57f6:	50 e0       	ldi	r21, 0x00	; 0
    57f8:	bc 01       	movw	r22, r24
    57fa:	cd 01       	movw	r24, r26
    57fc:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <__udivmodsi4>
    5800:	dc 01       	movw	r26, r24
    5802:	cb 01       	movw	r24, r22
    5804:	28 2f       	mov	r18, r24
    5806:	ce 01       	movw	r24, r28
    5808:	04 96       	adiw	r24, 0x04	; 4
    580a:	fc 01       	movw	r30, r24
    580c:	e0 0f       	add	r30, r16
    580e:	f1 1f       	adc	r31, r17
    5810:	20 83       	st	Z, r18
						Copy_u8Number /=10;
    5812:	89 89       	ldd	r24, Y+17	; 0x11
    5814:	9a 89       	ldd	r25, Y+18	; 0x12
    5816:	ab 89       	ldd	r26, Y+19	; 0x13
    5818:	bc 89       	ldd	r27, Y+20	; 0x14
    581a:	2a e0       	ldi	r18, 0x0A	; 10
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	40 e0       	ldi	r20, 0x00	; 0
    5820:	50 e0       	ldi	r21, 0x00	; 0
    5822:	bc 01       	movw	r22, r24
    5824:	cd 01       	movw	r24, r26
    5826:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <__udivmodsi4>
    582a:	da 01       	movw	r26, r20
    582c:	c9 01       	movw	r24, r18
    582e:	89 8b       	std	Y+17, r24	; 0x11
    5830:	9a 8b       	std	Y+18, r25	; 0x12
    5832:	ab 8b       	std	Y+19, r26	; 0x13
    5834:	bc 8b       	std	Y+20, r27	; 0x14
						digitsCounter++;
    5836:	89 81       	ldd	r24, Y+1	; 0x01
    5838:	8f 5f       	subi	r24, 0xFF	; 255
    583a:	89 83       	std	Y+1, r24	; 0x01
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,'0');
			}
			else
			{
				while(Copy_u8Number)
    583c:	89 89       	ldd	r24, Y+17	; 0x11
    583e:	9a 89       	ldd	r25, Y+18	; 0x12
    5840:	ab 89       	ldd	r26, Y+19	; 0x13
    5842:	bc 89       	ldd	r27, Y+20	; 0x14
    5844:	00 97       	sbiw	r24, 0x00	; 0
    5846:	a1 05       	cpc	r26, r1
    5848:	b1 05       	cpc	r27, r1
    584a:	09 f0       	breq	.+2      	; 0x584e <HLCD_displayNumber+0xfa>
    584c:	ba cf       	rjmp	.-140    	; 0x57c2 <HLCD_displayNumber+0x6e>
						Copy_u8Number /=10;
						digitsCounter++;
					}
				}

				numberCounter = (digitsCounter-1);
    584e:	89 81       	ldd	r24, Y+1	; 0x01
    5850:	81 50       	subi	r24, 0x01	; 1
    5852:	8a 83       	std	Y+2, r24	; 0x02
    5854:	14 c0       	rjmp	.+40     	; 0x587e <HLCD_displayNumber+0x12a>
				for(; bufferForNumbers[numberCounter] != STR_NULL ; numberCounter--)
				{
					lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,((bufferForNumbers[numberCounter])+48));
    5856:	8a 81       	ldd	r24, Y+2	; 0x02
    5858:	28 2f       	mov	r18, r24
    585a:	30 e0       	ldi	r19, 0x00	; 0
    585c:	ce 01       	movw	r24, r28
    585e:	04 96       	adiw	r24, 0x04	; 4
    5860:	fc 01       	movw	r30, r24
    5862:	e2 0f       	add	r30, r18
    5864:	f3 1f       	adc	r31, r19
    5866:	80 81       	ld	r24, Z
    5868:	28 2f       	mov	r18, r24
    586a:	20 5d       	subi	r18, 0xD0	; 208
    586c:	8f 85       	ldd	r24, Y+15	; 0x0f
    586e:	98 89       	ldd	r25, Y+16	; 0x10
    5870:	62 2f       	mov	r22, r18
    5872:	0e 94 f7 23 	call	0x47ee	; 0x47ee <HLCD_displayChar>
    5876:	8b 83       	std	Y+3, r24	; 0x03
						digitsCounter++;
					}
				}

				numberCounter = (digitsCounter-1);
				for(; bufferForNumbers[numberCounter] != STR_NULL ; numberCounter--)
    5878:	8a 81       	ldd	r24, Y+2	; 0x02
    587a:	81 50       	subi	r24, 0x01	; 1
    587c:	8a 83       	std	Y+2, r24	; 0x02
    587e:	8a 81       	ldd	r24, Y+2	; 0x02
    5880:	28 2f       	mov	r18, r24
    5882:	30 e0       	ldi	r19, 0x00	; 0
    5884:	ce 01       	movw	r24, r28
    5886:	04 96       	adiw	r24, 0x04	; 4
    5888:	fc 01       	movw	r30, r24
    588a:	e2 0f       	add	r30, r18
    588c:	f3 1f       	adc	r31, r19
    588e:	80 81       	ld	r24, Z
    5890:	88 23       	and	r24, r24
    5892:	09 f7       	brne	.-62     	; 0x5856 <HLCD_displayNumber+0x102>
    5894:	05 c0       	rjmp	.+10     	; 0x58a0 <HLCD_displayNumber+0x14c>
				}
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    5896:	83 e0       	ldi	r24, 0x03	; 3
    5898:	8b 83       	std	Y+3, r24	; 0x03
    589a:	02 c0       	rjmp	.+4      	; 0x58a0 <HLCD_displayNumber+0x14c>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    589c:	82 e0       	ldi	r24, 0x02	; 2
    589e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return lcdRet;
    58a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    58a2:	64 96       	adiw	r28, 0x14	; 20
    58a4:	0f b6       	in	r0, 0x3f	; 63
    58a6:	f8 94       	cli
    58a8:	de bf       	out	0x3e, r29	; 62
    58aa:	0f be       	out	0x3f, r0	; 63
    58ac:	cd bf       	out	0x3d, r28	; 61
    58ae:	cf 91       	pop	r28
    58b0:	df 91       	pop	r29
    58b2:	1f 91       	pop	r17
    58b4:	0f 91       	pop	r16
    58b6:	08 95       	ret

000058b8 <HLCD_changeCursorPosation>:

EN_HLCD_systemState_t HLCD_changeCursorPosation(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Row,uint8_t Copy_u8Column)
{
    58b8:	df 93       	push	r29
    58ba:	cf 93       	push	r28
    58bc:	00 d0       	rcall	.+0      	; 0x58be <HLCD_changeCursorPosation+0x6>
    58be:	00 d0       	rcall	.+0      	; 0x58c0 <HLCD_changeCursorPosation+0x8>
    58c0:	0f 92       	push	r0
    58c2:	cd b7       	in	r28, 0x3d	; 61
    58c4:	de b7       	in	r29, 0x3e	; 62
    58c6:	9b 83       	std	Y+3, r25	; 0x03
    58c8:	8a 83       	std	Y+2, r24	; 0x02
    58ca:	6c 83       	std	Y+4, r22	; 0x04
    58cc:	4d 83       	std	Y+5, r20	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    58d2:	8a 81       	ldd	r24, Y+2	; 0x02
    58d4:	9b 81       	ldd	r25, Y+3	; 0x03
    58d6:	00 97       	sbiw	r24, 0x00	; 0
    58d8:	91 f1       	breq	.+100    	; 0x593e <HLCD_changeCursorPosation+0x86>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    58da:	ea 81       	ldd	r30, Y+2	; 0x02
    58dc:	fb 81       	ldd	r31, Y+3	; 0x03
    58de:	80 81       	ld	r24, Z
    58e0:	88 23       	and	r24, r24
    58e2:	79 f1       	breq	.+94     	; 0x5942 <HLCD_changeCursorPosation+0x8a>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    58e4:	ea 81       	ldd	r30, Y+2	; 0x02
    58e6:	fb 81       	ldd	r31, Y+3	; 0x03
    58e8:	80 81       	ld	r24, Z
    58ea:	81 30       	cpi	r24, 0x01	; 1
    58ec:	29 f5       	brne	.+74     	; 0x5938 <HLCD_changeCursorPosation+0x80>
		{
			if (Copy_u8Row == ROW_ZERO && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    58ee:	8c 81       	ldd	r24, Y+4	; 0x04
    58f0:	88 23       	and	r24, r24
    58f2:	71 f4       	brne	.+28     	; 0x5910 <HLCD_changeCursorPosation+0x58>
    58f4:	8d 81       	ldd	r24, Y+5	; 0x05
    58f6:	80 31       	cpi	r24, 0x10	; 16
    58f8:	58 f4       	brcc	.+22     	; 0x5910 <HLCD_changeCursorPosation+0x58>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0x80));
    58fa:	8d 81       	ldd	r24, Y+5	; 0x05
    58fc:	8f 70       	andi	r24, 0x0F	; 15
    58fe:	80 68       	ori	r24, 0x80	; 128
    5900:	28 2f       	mov	r18, r24
    5902:	8a 81       	ldd	r24, Y+2	; 0x02
    5904:	9b 81       	ldd	r25, Y+3	; 0x03
    5906:	62 2f       	mov	r22, r18
    5908:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    590c:	89 83       	std	Y+1, r24	; 0x01
    590e:	19 c0       	rjmp	.+50     	; 0x5942 <HLCD_changeCursorPosation+0x8a>
			else if (Copy_u8Row == ROW_ONE && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    5910:	8c 81       	ldd	r24, Y+4	; 0x04
    5912:	81 30       	cpi	r24, 0x01	; 1
    5914:	71 f4       	brne	.+28     	; 0x5932 <HLCD_changeCursorPosation+0x7a>
    5916:	8d 81       	ldd	r24, Y+5	; 0x05
    5918:	80 31       	cpi	r24, 0x10	; 16
    591a:	58 f4       	brcc	.+22     	; 0x5932 <HLCD_changeCursorPosation+0x7a>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0xC0));
    591c:	8d 81       	ldd	r24, Y+5	; 0x05
    591e:	8f 70       	andi	r24, 0x0F	; 15
    5920:	80 6c       	ori	r24, 0xC0	; 192
    5922:	28 2f       	mov	r18, r24
    5924:	8a 81       	ldd	r24, Y+2	; 0x02
    5926:	9b 81       	ldd	r25, Y+3	; 0x03
    5928:	62 2f       	mov	r22, r18
    592a:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    592e:	89 83       	std	Y+1, r24	; 0x01
    5930:	08 c0       	rjmp	.+16     	; 0x5942 <HLCD_changeCursorPosation+0x8a>
			else lcdRet = HLCD_INVALID_PARAMTERS;
    5932:	84 e0       	ldi	r24, 0x04	; 4
    5934:	89 83       	std	Y+1, r24	; 0x01
    5936:	05 c0       	rjmp	.+10     	; 0x5942 <HLCD_changeCursorPosation+0x8a>
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    5938:	83 e0       	ldi	r24, 0x03	; 3
    593a:	89 83       	std	Y+1, r24	; 0x01
    593c:	02 c0       	rjmp	.+4      	; 0x5942 <HLCD_changeCursorPosation+0x8a>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    593e:	82 e0       	ldi	r24, 0x02	; 2
    5940:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    5942:	89 81       	ldd	r24, Y+1	; 0x01
}
    5944:	0f 90       	pop	r0
    5946:	0f 90       	pop	r0
    5948:	0f 90       	pop	r0
    594a:	0f 90       	pop	r0
    594c:	0f 90       	pop	r0
    594e:	cf 91       	pop	r28
    5950:	df 91       	pop	r29
    5952:	08 95       	ret

00005954 <HLCD_shiftDisplay>:

EN_HLCD_systemState_t HLCD_shiftDisplay(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t Copy_u8ShiftItirations,uint8_t Copy_u8ShiftDirection)
{
    5954:	df 93       	push	r29
    5956:	cf 93       	push	r28
    5958:	00 d0       	rcall	.+0      	; 0x595a <HLCD_shiftDisplay+0x6>
    595a:	00 d0       	rcall	.+0      	; 0x595c <HLCD_shiftDisplay+0x8>
    595c:	00 d0       	rcall	.+0      	; 0x595e <HLCD_shiftDisplay+0xa>
    595e:	cd b7       	in	r28, 0x3d	; 61
    5960:	de b7       	in	r29, 0x3e	; 62
    5962:	9c 83       	std	Y+4, r25	; 0x04
    5964:	8b 83       	std	Y+3, r24	; 0x03
    5966:	6d 83       	std	Y+5, r22	; 0x05
    5968:	4e 83       	std	Y+6, r20	; 0x06
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    596a:	81 e0       	ldi	r24, 0x01	; 1
    596c:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    596e:	8b 81       	ldd	r24, Y+3	; 0x03
    5970:	9c 81       	ldd	r25, Y+4	; 0x04
    5972:	00 97       	sbiw	r24, 0x00	; 0
    5974:	31 f1       	breq	.+76     	; 0x59c2 <HLCD_shiftDisplay+0x6e>
	{
		if(Copy_u8ShiftDirection == RIGHT || Copy_u8ShiftDirection == LEFT)
    5976:	8e 81       	ldd	r24, Y+6	; 0x06
    5978:	8c 31       	cpi	r24, 0x1C	; 28
    597a:	19 f0       	breq	.+6      	; 0x5982 <HLCD_shiftDisplay+0x2e>
    597c:	8e 81       	ldd	r24, Y+6	; 0x06
    597e:	88 31       	cpi	r24, 0x18	; 24
    5980:	e9 f4       	brne	.+58     	; 0x59bc <HLCD_shiftDisplay+0x68>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    5982:	eb 81       	ldd	r30, Y+3	; 0x03
    5984:	fc 81       	ldd	r31, Y+4	; 0x04
    5986:	80 81       	ld	r24, Z
    5988:	88 23       	and	r24, r24
    598a:	e9 f0       	breq	.+58     	; 0x59c6 <HLCD_shiftDisplay+0x72>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    598c:	eb 81       	ldd	r30, Y+3	; 0x03
    598e:	fc 81       	ldd	r31, Y+4	; 0x04
    5990:	80 81       	ld	r24, Z
    5992:	81 30       	cpi	r24, 0x01	; 1
    5994:	81 f4       	brne	.+32     	; 0x59b6 <HLCD_shiftDisplay+0x62>
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    5996:	19 82       	std	Y+1, r1	; 0x01
    5998:	09 c0       	rjmp	.+18     	; 0x59ac <HLCD_shiftDisplay+0x58>
				{
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
    599a:	8b 81       	ldd	r24, Y+3	; 0x03
    599c:	9c 81       	ldd	r25, Y+4	; 0x04
    599e:	6e 81       	ldd	r22, Y+6	; 0x06
    59a0:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    59a4:	8a 83       	std	Y+2, r24	; 0x02
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    59a6:	89 81       	ldd	r24, Y+1	; 0x01
    59a8:	8f 5f       	subi	r24, 0xFF	; 255
    59aa:	89 83       	std	Y+1, r24	; 0x01
    59ac:	99 81       	ldd	r25, Y+1	; 0x01
    59ae:	8d 81       	ldd	r24, Y+5	; 0x05
    59b0:	98 17       	cp	r25, r24
    59b2:	98 f3       	brcs	.-26     	; 0x599a <HLCD_shiftDisplay+0x46>
    59b4:	08 c0       	rjmp	.+16     	; 0x59c6 <HLCD_shiftDisplay+0x72>
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
				}
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    59b6:	83 e0       	ldi	r24, 0x03	; 3
    59b8:	8a 83       	std	Y+2, r24	; 0x02
    59ba:	05 c0       	rjmp	.+10     	; 0x59c6 <HLCD_shiftDisplay+0x72>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    59bc:	84 e0       	ldi	r24, 0x04	; 4
    59be:	8a 83       	std	Y+2, r24	; 0x02
    59c0:	02 c0       	rjmp	.+4      	; 0x59c6 <HLCD_shiftDisplay+0x72>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    59c2:	82 e0       	ldi	r24, 0x02	; 2
    59c4:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    59c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    59c8:	26 96       	adiw	r28, 0x06	; 6
    59ca:	0f b6       	in	r0, 0x3f	; 63
    59cc:	f8 94       	cli
    59ce:	de bf       	out	0x3e, r29	; 62
    59d0:	0f be       	out	0x3f, r0	; 63
    59d2:	cd bf       	out	0x3d, r28	; 61
    59d4:	cf 91       	pop	r28
    59d6:	df 91       	pop	r29
    59d8:	08 95       	ret

000059da <HLCD_createNewCustomChar>:

EN_HLCD_systemState_t HLCD_createNewCustomChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t *Copy_u8ArrayOfChar , uint8_t Copy_u8CgramPosition)
{
    59da:	df 93       	push	r29
    59dc:	cf 93       	push	r28
    59de:	cd b7       	in	r28, 0x3d	; 61
    59e0:	de b7       	in	r29, 0x3e	; 62
    59e2:	27 97       	sbiw	r28, 0x07	; 7
    59e4:	0f b6       	in	r0, 0x3f	; 63
    59e6:	f8 94       	cli
    59e8:	de bf       	out	0x3e, r29	; 62
    59ea:	0f be       	out	0x3f, r0	; 63
    59ec:	cd bf       	out	0x3d, r28	; 61
    59ee:	9c 83       	std	Y+4, r25	; 0x04
    59f0:	8b 83       	std	Y+3, r24	; 0x03
    59f2:	7e 83       	std	Y+6, r23	; 0x06
    59f4:	6d 83       	std	Y+5, r22	; 0x05
    59f6:	4f 83       	std	Y+7, r20	; 0x07
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    59f8:	81 e0       	ldi	r24, 0x01	; 1
    59fa:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance && PTR_NULL != Copy_u8ArrayOfChar)
    59fc:	8b 81       	ldd	r24, Y+3	; 0x03
    59fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5a00:	00 97       	sbiw	r24, 0x00	; 0
    5a02:	09 f4       	brne	.+2      	; 0x5a06 <HLCD_createNewCustomChar+0x2c>
    5a04:	4f c0       	rjmp	.+158    	; 0x5aa4 <HLCD_createNewCustomChar+0xca>
    5a06:	8d 81       	ldd	r24, Y+5	; 0x05
    5a08:	9e 81       	ldd	r25, Y+6	; 0x06
    5a0a:	00 97       	sbiw	r24, 0x00	; 0
    5a0c:	09 f4       	brne	.+2      	; 0x5a10 <HLCD_createNewCustomChar+0x36>
    5a0e:	4a c0       	rjmp	.+148    	; 0x5aa4 <HLCD_createNewCustomChar+0xca>
	{
		if((Copy_u8CgramPosition >= 0) && (Copy_u8CgramPosition <= 7))
    5a10:	8f 81       	ldd	r24, Y+7	; 0x07
    5a12:	88 30       	cpi	r24, 0x08	; 8
    5a14:	08 f0       	brcs	.+2      	; 0x5a18 <HLCD_createNewCustomChar+0x3e>
    5a16:	43 c0       	rjmp	.+134    	; 0x5a9e <HLCD_createNewCustomChar+0xc4>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    5a18:	eb 81       	ldd	r30, Y+3	; 0x03
    5a1a:	fc 81       	ldd	r31, Y+4	; 0x04
    5a1c:	80 81       	ld	r24, Z
    5a1e:	88 23       	and	r24, r24
    5a20:	09 f4       	brne	.+2      	; 0x5a24 <HLCD_createNewCustomChar+0x4a>
    5a22:	42 c0       	rjmp	.+132    	; 0x5aa8 <HLCD_createNewCustomChar+0xce>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    5a24:	eb 81       	ldd	r30, Y+3	; 0x03
    5a26:	fc 81       	ldd	r31, Y+4	; 0x04
    5a28:	80 81       	ld	r24, Z
    5a2a:	81 30       	cpi	r24, 0x01	; 1
    5a2c:	a9 f5       	brne	.+106    	; 0x5a98 <HLCD_createNewCustomChar+0xbe>
			{
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
    5a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    5a30:	88 2f       	mov	r24, r24
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	88 0f       	add	r24, r24
    5a36:	99 1f       	adc	r25, r25
    5a38:	88 0f       	add	r24, r24
    5a3a:	99 1f       	adc	r25, r25
    5a3c:	88 0f       	add	r24, r24
    5a3e:	99 1f       	adc	r25, r25
    5a40:	80 64       	ori	r24, 0x40	; 64
    5a42:	28 2f       	mov	r18, r24
    5a44:	8b 81       	ldd	r24, Y+3	; 0x03
    5a46:	9c 81       	ldd	r25, Y+4	; 0x04
    5a48:	62 2f       	mov	r22, r18
    5a4a:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    5a4e:	8a 83       	std	Y+2, r24	; 0x02
				if(lcdRet == HLCD_OK)
    5a50:	8a 81       	ldd	r24, Y+2	; 0x02
    5a52:	88 23       	and	r24, r24
    5a54:	d1 f4       	brne	.+52     	; 0x5a8a <HLCD_createNewCustomChar+0xb0>
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    5a56:	19 82       	std	Y+1, r1	; 0x01
    5a58:	15 c0       	rjmp	.+42     	; 0x5a84 <HLCD_createNewCustomChar+0xaa>
					{
						lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,Copy_u8ArrayOfChar[loopCounter]);
    5a5a:	89 81       	ldd	r24, Y+1	; 0x01
    5a5c:	28 2f       	mov	r18, r24
    5a5e:	30 e0       	ldi	r19, 0x00	; 0
    5a60:	8d 81       	ldd	r24, Y+5	; 0x05
    5a62:	9e 81       	ldd	r25, Y+6	; 0x06
    5a64:	fc 01       	movw	r30, r24
    5a66:	e2 0f       	add	r30, r18
    5a68:	f3 1f       	adc	r31, r19
    5a6a:	20 81       	ld	r18, Z
    5a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    5a70:	62 2f       	mov	r22, r18
    5a72:	0e 94 f7 23 	call	0x47ee	; 0x47ee <HLCD_displayChar>
    5a76:	8a 83       	std	Y+2, r24	; 0x02
						if(lcdRet != HLCD_OK) break; else /*Do Notjhint*/;
    5a78:	8a 81       	ldd	r24, Y+2	; 0x02
    5a7a:	88 23       	and	r24, r24
    5a7c:	31 f4       	brne	.+12     	; 0x5a8a <HLCD_createNewCustomChar+0xb0>
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
				if(lcdRet == HLCD_OK)
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    5a7e:	89 81       	ldd	r24, Y+1	; 0x01
    5a80:	8f 5f       	subi	r24, 0xFF	; 255
    5a82:	89 83       	std	Y+1, r24	; 0x01
    5a84:	89 81       	ldd	r24, Y+1	; 0x01
    5a86:	88 30       	cpi	r24, 0x08	; 8
    5a88:	40 f3       	brcs	.-48     	; 0x5a5a <HLCD_createNewCustomChar+0x80>
				else
				{
					/* Do Nothing */
				}

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,SET_CURSOR_LOCATION);
    5a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    5a8e:	60 e8       	ldi	r22, 0x80	; 128
    5a90:	0e 94 8e 1c 	call	0x391c	; 0x391c <HLCD_sendCmd>
    5a94:	8a 83       	std	Y+2, r24	; 0x02
    5a96:	08 c0       	rjmp	.+16     	; 0x5aa8 <HLCD_createNewCustomChar+0xce>
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    5a98:	83 e0       	ldi	r24, 0x03	; 3
    5a9a:	8a 83       	std	Y+2, r24	; 0x02
    5a9c:	05 c0       	rjmp	.+10     	; 0x5aa8 <HLCD_createNewCustomChar+0xce>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    5a9e:	84 e0       	ldi	r24, 0x04	; 4
    5aa0:	8a 83       	std	Y+2, r24	; 0x02
    5aa2:	02 c0       	rjmp	.+4      	; 0x5aa8 <HLCD_createNewCustomChar+0xce>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    5aa4:	82 e0       	ldi	r24, 0x02	; 2
    5aa6:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    5aa8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5aaa:	27 96       	adiw	r28, 0x07	; 7
    5aac:	0f b6       	in	r0, 0x3f	; 63
    5aae:	f8 94       	cli
    5ab0:	de bf       	out	0x3e, r29	; 62
    5ab2:	0f be       	out	0x3f, r0	; 63
    5ab4:	cd bf       	out	0x3d, r28	; 61
    5ab6:	cf 91       	pop	r28
    5ab8:	df 91       	pop	r29
    5aba:	08 95       	ret

00005abc <EKP_init>:

ST_GPIO_cfg_t arrOfRows[KEYPAD_ROWS_SIZE];
ST_GPIO_cfg_t arrOfColumns[KEYPAD_COLUMNS_SIZE];


EN_EKP_systemStatus_t EKP_init(ST_EKP_cfg_t const *ST_ptrKeypadInstance) {
    5abc:	df 93       	push	r29
    5abe:	cf 93       	push	r28
    5ac0:	00 d0       	rcall	.+0      	; 0x5ac2 <EKP_init+0x6>
    5ac2:	00 d0       	rcall	.+0      	; 0x5ac4 <EKP_init+0x8>
    5ac4:	00 d0       	rcall	.+0      	; 0x5ac6 <EKP_init+0xa>
    5ac6:	cd b7       	in	r28, 0x3d	; 61
    5ac8:	de b7       	in	r29, 0x3e	; 62
    5aca:	9e 83       	std	Y+6, r25	; 0x06
    5acc:	8d 83       	std	Y+5, r24	; 0x05
	EN_EKP_systemStatus_t kpRet = EKP_NOK;
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    5ad2:	81 e0       	ldi	r24, 0x01	; 1
    5ad4:	8b 83       	std	Y+3, r24	; 0x03
	if (PTR_NULL != ST_ptrKeypadInstance) {
    5ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    5ada:	00 97       	sbiw	r24, 0x00	; 0
    5adc:	09 f4       	brne	.+2      	; 0x5ae0 <EKP_init+0x24>
    5ade:	40 c0       	rjmp	.+128    	; 0x5b60 <EKP_init+0xa4>
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    5ae0:	1a 82       	std	Y+2, r1	; 0x02
    5ae2:	14 c0       	rjmp	.+40     	; 0x5b0c <EKP_init+0x50>

			gpioRet = GPIO_initPin(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]));
    5ae4:	2d 81       	ldd	r18, Y+5	; 0x05
    5ae6:	3e 81       	ldd	r19, Y+6	; 0x06
    5ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    5aea:	88 2f       	mov	r24, r24
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	88 0f       	add	r24, r24
    5af0:	99 1f       	adc	r25, r25
    5af2:	88 0f       	add	r24, r24
    5af4:	99 1f       	adc	r25, r25
    5af6:	82 0f       	add	r24, r18
    5af8:	93 1f       	adc	r25, r19
    5afa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    5afe:	8b 83       	std	Y+3, r24	; 0x03
			if (gpioRet == GPIO_NOK)
    5b00:	8b 81       	ldd	r24, Y+3	; 0x03
    5b02:	81 30       	cpi	r24, 0x01	; 1
    5b04:	31 f0       	breq	.+12     	; 0x5b12 <EKP_init+0x56>
EN_EKP_systemStatus_t EKP_init(ST_EKP_cfg_t const *ST_ptrKeypadInstance) {
	EN_EKP_systemStatus_t kpRet = EKP_NOK;
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
	if (PTR_NULL != ST_ptrKeypadInstance) {
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    5b06:	8a 81       	ldd	r24, Y+2	; 0x02
    5b08:	8f 5f       	subi	r24, 0xFF	; 255
    5b0a:	8a 83       	std	Y+2, r24	; 0x02
    5b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b0e:	84 30       	cpi	r24, 0x04	; 4
    5b10:	48 f3       	brcs	.-46     	; 0x5ae4 <EKP_init+0x28>

			gpioRet = GPIO_initPin(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]));
			if (gpioRet == GPIO_NOK)
				break;
		}
		if (gpioRet == GPIO_OK) {
    5b12:	8b 81       	ldd	r24, Y+3	; 0x03
    5b14:	88 23       	and	r24, r24
    5b16:	e1 f4       	brne	.+56     	; 0x5b50 <EKP_init+0x94>
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5b18:	19 82       	std	Y+1, r1	; 0x01
    5b1a:	17 c0       	rjmp	.+46     	; 0x5b4a <EKP_init+0x8e>

				gpioRet = GPIO_initPin(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]));
    5b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b20:	9c 01       	movw	r18, r24
    5b22:	20 5f       	subi	r18, 0xF0	; 240
    5b24:	3f 4f       	sbci	r19, 0xFF	; 255
    5b26:	89 81       	ldd	r24, Y+1	; 0x01
    5b28:	88 2f       	mov	r24, r24
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	88 0f       	add	r24, r24
    5b2e:	99 1f       	adc	r25, r25
    5b30:	88 0f       	add	r24, r24
    5b32:	99 1f       	adc	r25, r25
    5b34:	82 0f       	add	r24, r18
    5b36:	93 1f       	adc	r25, r19
    5b38:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    5b3c:	8b 83       	std	Y+3, r24	; 0x03
				if (gpioRet == GPIO_NOK)
    5b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b40:	81 30       	cpi	r24, 0x01	; 1
    5b42:	31 f0       	breq	.+12     	; 0x5b50 <EKP_init+0x94>
			gpioRet = GPIO_initPin(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]));
			if (gpioRet == GPIO_NOK)
				break;
		}
		if (gpioRet == GPIO_OK) {
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5b44:	89 81       	ldd	r24, Y+1	; 0x01
    5b46:	8f 5f       	subi	r24, 0xFF	; 255
    5b48:	89 83       	std	Y+1, r24	; 0x01
    5b4a:	89 81       	ldd	r24, Y+1	; 0x01
    5b4c:	84 30       	cpi	r24, 0x04	; 4
    5b4e:	30 f3       	brcs	.-52     	; 0x5b1c <EKP_init+0x60>
			}
		} else {
			/* Do Nothing */
		}

		if (gpioRet == GPIO_OK) {
    5b50:	8b 81       	ldd	r24, Y+3	; 0x03
    5b52:	88 23       	and	r24, r24
    5b54:	11 f4       	brne	.+4      	; 0x5b5a <EKP_init+0x9e>
			kpRet = EKP_OK;
    5b56:	1c 82       	std	Y+4, r1	; 0x04
    5b58:	05 c0       	rjmp	.+10     	; 0x5b64 <EKP_init+0xa8>
		} else {
			kpRet = EKP_NOK;
    5b5a:	81 e0       	ldi	r24, 0x01	; 1
    5b5c:	8c 83       	std	Y+4, r24	; 0x04
    5b5e:	02 c0       	rjmp	.+4      	; 0x5b64 <EKP_init+0xa8>
		}

	} else {
		kpRet = EKP_PTR_NULL;
    5b60:	82 e0       	ldi	r24, 0x02	; 2
    5b62:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    5b64:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5b66:	26 96       	adiw	r28, 0x06	; 6
    5b68:	0f b6       	in	r0, 0x3f	; 63
    5b6a:	f8 94       	cli
    5b6c:	de bf       	out	0x3e, r29	; 62
    5b6e:	0f be       	out	0x3f, r0	; 63
    5b70:	cd bf       	out	0x3d, r28	; 61
    5b72:	cf 91       	pop	r28
    5b74:	df 91       	pop	r29
    5b76:	08 95       	ret

00005b78 <EKP_scanningForPressedBtn>:


EN_EKP_systemStatus_t
EKP_scanningForPressedBtn(ST_EKP_cfg_t const *ST_ptrKeypadInstance,
		uint8_t *pressedBtnVal) {
    5b78:	df 93       	push	r29
    5b7a:	cf 93       	push	r28
    5b7c:	cd b7       	in	r28, 0x3d	; 61
    5b7e:	de b7       	in	r29, 0x3e	; 62
    5b80:	29 97       	sbiw	r28, 0x09	; 9
    5b82:	0f b6       	in	r0, 0x3f	; 63
    5b84:	f8 94       	cli
    5b86:	de bf       	out	0x3e, r29	; 62
    5b88:	0f be       	out	0x3f, r0	; 63
    5b8a:	cd bf       	out	0x3d, r28	; 61
    5b8c:	9f 83       	std	Y+7, r25	; 0x07
    5b8e:	8e 83       	std	Y+6, r24	; 0x06
    5b90:	79 87       	std	Y+9, r23	; 0x09
    5b92:	68 87       	std	Y+8, r22	; 0x08

	EN_EKP_systemStatus_t kpRet = EKP_NOK;
    5b94:	81 e0       	ldi	r24, 0x01	; 1
    5b96:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    5b98:	81 e0       	ldi	r24, 0x01	; 1
    5b9a:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != ST_ptrKeypadInstance && PTR_NULL != pressedBtnVal) {
    5b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    5b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    5ba0:	00 97       	sbiw	r24, 0x00	; 0
    5ba2:	09 f4       	brne	.+2      	; 0x5ba6 <EKP_scanningForPressedBtn+0x2e>
    5ba4:	7c c0       	rjmp	.+248    	; 0x5c9e <EKP_scanningForPressedBtn+0x126>
    5ba6:	88 85       	ldd	r24, Y+8	; 0x08
    5ba8:	99 85       	ldd	r25, Y+9	; 0x09
    5baa:	00 97       	sbiw	r24, 0x00	; 0
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <EKP_scanningForPressedBtn+0x38>
    5bae:	77 c0       	rjmp	.+238    	; 0x5c9e <EKP_scanningForPressedBtn+0x126>
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    5bb0:	1a 82       	std	Y+2, r1	; 0x02
    5bb2:	70 c0       	rjmp	.+224    	; 0x5c94 <EKP_scanningForPressedBtn+0x11c>

			gpioRet = GPIO_writePinLogic(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]),GPIO_LOW);
    5bb4:	2e 81       	ldd	r18, Y+6	; 0x06
    5bb6:	3f 81       	ldd	r19, Y+7	; 0x07
    5bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bba:	88 2f       	mov	r24, r24
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	88 0f       	add	r24, r24
    5bc0:	99 1f       	adc	r25, r25
    5bc2:	88 0f       	add	r24, r24
    5bc4:	99 1f       	adc	r25, r25
    5bc6:	82 0f       	add	r24, r18
    5bc8:	93 1f       	adc	r25, r19
    5bca:	60 e0       	ldi	r22, 0x00	; 0
    5bcc:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    5bd0:	8b 83       	std	Y+3, r24	; 0x03

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5bd2:	19 82       	std	Y+1, r1	; 0x01
    5bd4:	49 c0       	rjmp	.+146    	; 0x5c68 <EKP_scanningForPressedBtn+0xf0>

				gpioRet = GPIO_readPinLogic(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]),&valOfPressedBtn);
    5bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    5bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    5bda:	9c 01       	movw	r18, r24
    5bdc:	20 5f       	subi	r18, 0xF0	; 240
    5bde:	3f 4f       	sbci	r19, 0xFF	; 255
    5be0:	89 81       	ldd	r24, Y+1	; 0x01
    5be2:	88 2f       	mov	r24, r24
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	88 0f       	add	r24, r24
    5be8:	99 1f       	adc	r25, r25
    5bea:	88 0f       	add	r24, r24
    5bec:	99 1f       	adc	r25, r25
    5bee:	82 0f       	add	r24, r18
    5bf0:	93 1f       	adc	r25, r19
    5bf2:	9e 01       	movw	r18, r28
    5bf4:	2b 5f       	subi	r18, 0xFB	; 251
    5bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf8:	b9 01       	movw	r22, r18
    5bfa:	0e 94 da 06 	call	0xdb4	; 0xdb4 <GPIO_readPinLogic>
    5bfe:	8b 83       	std	Y+3, r24	; 0x03

				if (valOfPressedBtn == GPIO_LOW) {
    5c00:	8d 81       	ldd	r24, Y+5	; 0x05
    5c02:	88 23       	and	r24, r24
    5c04:	71 f5       	brne	.+92     	; 0x5c62 <EKP_scanningForPressedBtn+0xea>
    5c06:	15 c0       	rjmp	.+42     	; 0x5c32 <EKP_scanningForPressedBtn+0xba>
					while(valOfPressedBtn == GPIO_LOW)
					{
						gpioRet = GPIO_readPinLogic(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]),&valOfPressedBtn);
    5c08:	8e 81       	ldd	r24, Y+6	; 0x06
    5c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    5c0c:	9c 01       	movw	r18, r24
    5c0e:	20 5f       	subi	r18, 0xF0	; 240
    5c10:	3f 4f       	sbci	r19, 0xFF	; 255
    5c12:	89 81       	ldd	r24, Y+1	; 0x01
    5c14:	88 2f       	mov	r24, r24
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	88 0f       	add	r24, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	88 0f       	add	r24, r24
    5c1e:	99 1f       	adc	r25, r25
    5c20:	82 0f       	add	r24, r18
    5c22:	93 1f       	adc	r25, r19
    5c24:	9e 01       	movw	r18, r28
    5c26:	2b 5f       	subi	r18, 0xFB	; 251
    5c28:	3f 4f       	sbci	r19, 0xFF	; 255
    5c2a:	b9 01       	movw	r22, r18
    5c2c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <GPIO_readPinLogic>
    5c30:	8b 83       	std	Y+3, r24	; 0x03
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {

				gpioRet = GPIO_readPinLogic(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]),&valOfPressedBtn);

				if (valOfPressedBtn == GPIO_LOW) {
					while(valOfPressedBtn == GPIO_LOW)
    5c32:	8d 81       	ldd	r24, Y+5	; 0x05
    5c34:	88 23       	and	r24, r24
    5c36:	41 f3       	breq	.-48     	; 0x5c08 <EKP_scanningForPressedBtn+0x90>
					{
						gpioRet = GPIO_readPinLogic(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]),&valOfPressedBtn);
					}
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
    5c38:	8a 81       	ldd	r24, Y+2	; 0x02
    5c3a:	48 2f       	mov	r20, r24
    5c3c:	50 e0       	ldi	r21, 0x00	; 0
    5c3e:	89 81       	ldd	r24, Y+1	; 0x01
    5c40:	28 2f       	mov	r18, r24
    5c42:	30 e0       	ldi	r19, 0x00	; 0
    5c44:	ca 01       	movw	r24, r20
    5c46:	88 0f       	add	r24, r24
    5c48:	99 1f       	adc	r25, r25
    5c4a:	88 0f       	add	r24, r24
    5c4c:	99 1f       	adc	r25, r25
    5c4e:	82 0f       	add	r24, r18
    5c50:	93 1f       	adc	r25, r19
    5c52:	fc 01       	movw	r30, r24
    5c54:	e4 5f       	subi	r30, 0xF4	; 244
    5c56:	fe 4f       	sbci	r31, 0xFE	; 254
    5c58:	80 81       	ld	r24, Z
    5c5a:	e8 85       	ldd	r30, Y+8	; 0x08
    5c5c:	f9 85       	ldd	r31, Y+9	; 0x09
    5c5e:	80 83       	st	Z, r24
    5c60:	07 c0       	rjmp	.+14     	; 0x5c70 <EKP_scanningForPressedBtn+0xf8>

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {

			gpioRet = GPIO_writePinLogic(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]),GPIO_LOW);

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5c62:	89 81       	ldd	r24, Y+1	; 0x01
    5c64:	8f 5f       	subi	r24, 0xFF	; 255
    5c66:	89 83       	std	Y+1, r24	; 0x01
    5c68:	89 81       	ldd	r24, Y+1	; 0x01
    5c6a:	84 30       	cpi	r24, 0x04	; 4
    5c6c:	08 f4       	brcc	.+2      	; 0x5c70 <EKP_scanningForPressedBtn+0xf8>
    5c6e:	b3 cf       	rjmp	.-154    	; 0x5bd6 <EKP_scanningForPressedBtn+0x5e>
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
					break;
				}
			}

			gpioRet = GPIO_writePinLogic(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]),GPIO_HIGH);
    5c70:	2e 81       	ldd	r18, Y+6	; 0x06
    5c72:	3f 81       	ldd	r19, Y+7	; 0x07
    5c74:	8a 81       	ldd	r24, Y+2	; 0x02
    5c76:	88 2f       	mov	r24, r24
    5c78:	90 e0       	ldi	r25, 0x00	; 0
    5c7a:	88 0f       	add	r24, r24
    5c7c:	99 1f       	adc	r25, r25
    5c7e:	88 0f       	add	r24, r24
    5c80:	99 1f       	adc	r25, r25
    5c82:	82 0f       	add	r24, r18
    5c84:	93 1f       	adc	r25, r19
    5c86:	61 e0       	ldi	r22, 0x01	; 1
    5c88:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    5c8c:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != ST_ptrKeypadInstance && PTR_NULL != pressedBtnVal) {
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    5c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    5c90:	8f 5f       	subi	r24, 0xFF	; 255
    5c92:	8a 83       	std	Y+2, r24	; 0x02
    5c94:	8a 81       	ldd	r24, Y+2	; 0x02
    5c96:	84 30       	cpi	r24, 0x04	; 4
    5c98:	08 f4       	brcc	.+2      	; 0x5c9c <EKP_scanningForPressedBtn+0x124>
    5c9a:	8c cf       	rjmp	.-232    	; 0x5bb4 <EKP_scanningForPressedBtn+0x3c>
    5c9c:	02 c0       	rjmp	.+4      	; 0x5ca2 <EKP_scanningForPressedBtn+0x12a>
			}

			gpioRet = GPIO_writePinLogic(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]),GPIO_HIGH);
		}
	} else {
		kpRet = EKP_PTR_NULL;
    5c9e:	82 e0       	ldi	r24, 0x02	; 2
    5ca0:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    5ca2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5ca4:	29 96       	adiw	r28, 0x09	; 9
    5ca6:	0f b6       	in	r0, 0x3f	; 63
    5ca8:	f8 94       	cli
    5caa:	de bf       	out	0x3e, r29	; 62
    5cac:	0f be       	out	0x3f, r0	; 63
    5cae:	cd bf       	out	0x3d, r28	; 61
    5cb0:	cf 91       	pop	r28
    5cb2:	df 91       	pop	r29
    5cb4:	08 95       	ret

00005cb6 <EDIP_init>:
// GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "../../HAL/dip/dip_interface.h"

EN_EDIP_systemState_t EDIP_init(ST_EDIP_cfg_t const *ST_ptrEdipCfgInstance) {
    5cb6:	df 93       	push	r29
    5cb8:	cf 93       	push	r28
    5cba:	cd b7       	in	r28, 0x3d	; 61
    5cbc:	de b7       	in	r29, 0x3e	; 62
    5cbe:	28 97       	sbiw	r28, 0x08	; 8
    5cc0:	0f b6       	in	r0, 0x3f	; 63
    5cc2:	f8 94       	cli
    5cc4:	de bf       	out	0x3e, r29	; 62
    5cc6:	0f be       	out	0x3f, r0	; 63
    5cc8:	cd bf       	out	0x3d, r28	; 61
    5cca:	98 87       	std	Y+8, r25	; 0x08
    5ccc:	8f 83       	std	Y+7, r24	; 0x07
  EN_EDIP_systemState_t dipRet = EDIP_NOK;
    5cce:	81 e0       	ldi	r24, 0x01	; 1
    5cd0:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    5cd2:	81 e0       	ldi	r24, 0x01	; 1
    5cd4:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrEdipCfgInstance) {
    5cd6:	8f 81       	ldd	r24, Y+7	; 0x07
    5cd8:	98 85       	ldd	r25, Y+8	; 0x08
    5cda:	00 97       	sbiw	r24, 0x00	; 0
    5cdc:	c1 f0       	breq	.+48     	; 0x5d0e <EDIP_init+0x58>
    ST_GPIO_cfg_t dipPinCfg = {.pinDirection = GPIO_INPUT,
                               .pinNumber = ST_ptrEdipCfgInstance->dipPin,
                               .portName = ST_ptrEdipCfgInstance->dipPort,
                               .logicOnPin = GPIO_HIGH};
    5cde:	ef 81       	ldd	r30, Y+7	; 0x07
    5ce0:	f8 85       	ldd	r31, Y+8	; 0x08
    5ce2:	91 81       	ldd	r25, Z+1	; 0x01
    5ce4:	ef 81       	ldd	r30, Y+7	; 0x07
    5ce6:	f8 85       	ldd	r31, Y+8	; 0x08
    5ce8:	80 81       	ld	r24, Z
    5cea:	9b 83       	std	Y+3, r25	; 0x03
    5cec:	8c 83       	std	Y+4, r24	; 0x04
    5cee:	1d 82       	std	Y+5, r1	; 0x05
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	8e 83       	std	Y+6, r24	; 0x06

    gpioRet = GPIO_initPin(&dipPinCfg);
    5cf4:	ce 01       	movw	r24, r28
    5cf6:	03 96       	adiw	r24, 0x03	; 3
    5cf8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    5cfc:	89 83       	std	Y+1, r24	; 0x01

    if (gpioRet == GPIO_OK) {
    5cfe:	89 81       	ldd	r24, Y+1	; 0x01
    5d00:	88 23       	and	r24, r24
    5d02:	11 f4       	brne	.+4      	; 0x5d08 <EDIP_init+0x52>
      dipRet = EDIP_OK;
    5d04:	1a 82       	std	Y+2, r1	; 0x02
    5d06:	05 c0       	rjmp	.+10     	; 0x5d12 <EDIP_init+0x5c>
    } else {
      dipRet = EDIP_NOK;
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	8a 83       	std	Y+2, r24	; 0x02
    5d0c:	02 c0       	rjmp	.+4      	; 0x5d12 <EDIP_init+0x5c>
    }
  } else {
    dipRet = EDIP_PTR_NULL;
    5d0e:	82 e0       	ldi	r24, 0x02	; 2
    5d10:	8a 83       	std	Y+2, r24	; 0x02
  }
  return dipRet;
    5d12:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5d14:	28 96       	adiw	r28, 0x08	; 8
    5d16:	0f b6       	in	r0, 0x3f	; 63
    5d18:	f8 94       	cli
    5d1a:	de bf       	out	0x3e, r29	; 62
    5d1c:	0f be       	out	0x3f, r0	; 63
    5d1e:	cd bf       	out	0x3d, r28	; 61
    5d20:	cf 91       	pop	r28
    5d22:	df 91       	pop	r29
    5d24:	08 95       	ret

00005d26 <EDIP_readStates>:

EN_EDIP_systemState_t
EDIP_readStates(ST_EDIP_cfg_t const *ST_ptrEdipCfgInstance,
                EN_EDIP_logicStatus_t *retOfEdipStatus) {
    5d26:	df 93       	push	r29
    5d28:	cf 93       	push	r28
    5d2a:	cd b7       	in	r28, 0x3d	; 61
    5d2c:	de b7       	in	r29, 0x3e	; 62
    5d2e:	2b 97       	sbiw	r28, 0x0b	; 11
    5d30:	0f b6       	in	r0, 0x3f	; 63
    5d32:	f8 94       	cli
    5d34:	de bf       	out	0x3e, r29	; 62
    5d36:	0f be       	out	0x3f, r0	; 63
    5d38:	cd bf       	out	0x3d, r28	; 61
    5d3a:	99 87       	std	Y+9, r25	; 0x09
    5d3c:	88 87       	std	Y+8, r24	; 0x08
    5d3e:	7b 87       	std	Y+11, r23	; 0x0b
    5d40:	6a 87       	std	Y+10, r22	; 0x0a

  EN_EDIP_systemState_t dipRet = EDIP_NOK;
    5d42:	81 e0       	ldi	r24, 0x01	; 1
    5d44:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    5d46:	81 e0       	ldi	r24, 0x01	; 1
    5d48:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrEdipCfgInstance) {
    5d4a:	88 85       	ldd	r24, Y+8	; 0x08
    5d4c:	99 85       	ldd	r25, Y+9	; 0x09
    5d4e:	00 97       	sbiw	r24, 0x00	; 0
    5d50:	79 f1       	breq	.+94     	; 0x5db0 <EDIP_readStates+0x8a>
    ST_GPIO_cfg_t dipPinCfg = {.pinDirection = GPIO_INPUT,
                               .pinNumber = ST_ptrEdipCfgInstance->dipPin,
                               .portName = ST_ptrEdipCfgInstance->dipPort};
    5d52:	e8 85       	ldd	r30, Y+8	; 0x08
    5d54:	f9 85       	ldd	r31, Y+9	; 0x09
    5d56:	91 81       	ldd	r25, Z+1	; 0x01
    5d58:	e8 85       	ldd	r30, Y+8	; 0x08
    5d5a:	f9 85       	ldd	r31, Y+9	; 0x09
    5d5c:	80 81       	ld	r24, Z
    5d5e:	1b 82       	std	Y+3, r1	; 0x03
    5d60:	1c 82       	std	Y+4, r1	; 0x04
    5d62:	1d 82       	std	Y+5, r1	; 0x05
    5d64:	1e 82       	std	Y+6, r1	; 0x06
    5d66:	9b 83       	std	Y+3, r25	; 0x03
    5d68:	8c 83       	std	Y+4, r24	; 0x04

    EN_GPIO_pinLogic_t currentSwitchStatus;
    gpioRet = GPIO_readPinLogic(&dipPinCfg, &currentSwitchStatus);
    5d6a:	ce 01       	movw	r24, r28
    5d6c:	03 96       	adiw	r24, 0x03	; 3
    5d6e:	9e 01       	movw	r18, r28
    5d70:	29 5f       	subi	r18, 0xF9	; 249
    5d72:	3f 4f       	sbci	r19, 0xFF	; 255
    5d74:	b9 01       	movw	r22, r18
    5d76:	0e 94 da 06 	call	0xdb4	; 0xdb4 <GPIO_readPinLogic>
    5d7a:	89 83       	std	Y+1, r24	; 0x01
    if (gpioRet == GPIO_OK) {
    5d7c:	89 81       	ldd	r24, Y+1	; 0x01
    5d7e:	88 23       	and	r24, r24
    5d80:	a1 f4       	brne	.+40     	; 0x5daa <EDIP_readStates+0x84>
      if (currentSwitchStatus == GPIO_LOW) {
    5d82:	8f 81       	ldd	r24, Y+7	; 0x07
    5d84:	88 23       	and	r24, r24
    5d86:	31 f4       	brne	.+12     	; 0x5d94 <EDIP_readStates+0x6e>
        *retOfEdipStatus = EDIP_IS_ON;
    5d88:	ea 85       	ldd	r30, Y+10	; 0x0a
    5d8a:	fb 85       	ldd	r31, Y+11	; 0x0b
    5d8c:	81 e0       	ldi	r24, 0x01	; 1
    5d8e:	80 83       	st	Z, r24
        dipRet = EDIP_OK;
    5d90:	1a 82       	std	Y+2, r1	; 0x02
    5d92:	10 c0       	rjmp	.+32     	; 0x5db4 <EDIP_readStates+0x8e>
      } else if (currentSwitchStatus == GPIO_HIGH) {
    5d94:	8f 81       	ldd	r24, Y+7	; 0x07
    5d96:	81 30       	cpi	r24, 0x01	; 1
    5d98:	29 f4       	brne	.+10     	; 0x5da4 <EDIP_readStates+0x7e>
        *retOfEdipStatus = EDIP_IS_OFF;
    5d9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    5d9c:	fb 85       	ldd	r31, Y+11	; 0x0b
    5d9e:	10 82       	st	Z, r1
        dipRet = EDIP_OK;
    5da0:	1a 82       	std	Y+2, r1	; 0x02
    5da2:	08 c0       	rjmp	.+16     	; 0x5db4 <EDIP_readStates+0x8e>
      } else {
        dipRet = EDIP_NOK;
    5da4:	81 e0       	ldi	r24, 0x01	; 1
    5da6:	8a 83       	std	Y+2, r24	; 0x02
    5da8:	05 c0       	rjmp	.+10     	; 0x5db4 <EDIP_readStates+0x8e>
      }
    } else {
      dipRet = EDIP_NOK;
    5daa:	81 e0       	ldi	r24, 0x01	; 1
    5dac:	8a 83       	std	Y+2, r24	; 0x02
    5dae:	02 c0       	rjmp	.+4      	; 0x5db4 <EDIP_readStates+0x8e>
    }
  } else {
    dipRet = EDIP_PTR_NULL;
    5db0:	82 e0       	ldi	r24, 0x02	; 2
    5db2:	8a 83       	std	Y+2, r24	; 0x02
  }
  return dipRet;
    5db4:	8a 81       	ldd	r24, Y+2	; 0x02
    5db6:	2b 96       	adiw	r28, 0x0b	; 11
    5db8:	0f b6       	in	r0, 0x3f	; 63
    5dba:	f8 94       	cli
    5dbc:	de bf       	out	0x3e, r29	; 62
    5dbe:	0f be       	out	0x3f, r0	; 63
    5dc0:	cd bf       	out	0x3d, r28	; 61
    5dc2:	cf 91       	pop	r28
    5dc4:	df 91       	pop	r29
    5dc6:	08 95       	ret

00005dc8 <actionOfExti0>:
		.PbPin = GPIO_PIN2,
		.PbInternalResistor = HPB_PULL_DOWN
};

void actionOfExti0(void)
{
    5dc8:	df 93       	push	r29
    5dca:	cf 93       	push	r28
    5dcc:	cd b7       	in	r28, 0x3d	; 61
    5dce:	de b7       	in	r29, 0x3e	; 62
	LED_toggle(&led);
    5dd0:	8a e2       	ldi	r24, 0x2A	; 42
    5dd2:	91 e0       	ldi	r25, 0x01	; 1
    5dd4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <LED_toggle>
}
    5dd8:	cf 91       	pop	r28
    5dda:	df 91       	pop	r29
    5ddc:	08 95       	ret

00005dde <appInit>:

void appInit(void)
{
    5dde:	df 93       	push	r29
    5de0:	cf 93       	push	r28
    5de2:	cd b7       	in	r28, 0x3d	; 61
    5de4:	de b7       	in	r29, 0x3e	; 62
	MGI_vGIE();
    5de6:	0e 94 34 09 	call	0x1268	; 0x1268 <MGI_vGIE>
	LED_init(&led);
    5dea:	8a e2       	ldi	r24, 0x2A	; 42
    5dec:	91 e0       	ldi	r25, 0x01	; 1
    5dee:	0e 94 4f 14 	call	0x289e	; 0x289e <LED_init>
	HPB_init(&pbone);
    5df2:	80 e2       	ldi	r24, 0x20	; 32
    5df4:	91 e0       	ldi	r25, 0x01	; 1
    5df6:	0e 94 98 13 	call	0x2730	; 0x2730 <HPB_init>
	MEXTI_initExti(&exti0);
    5dfa:	8c e1       	ldi	r24, 0x1C	; 28
    5dfc:	91 e0       	ldi	r25, 0x01	; 1
    5dfe:	0e 94 ad 09 	call	0x135a	; 0x135a <MEXTI_initExti>
	MEXTI_enableExti(&exti0);
    5e02:	8c e1       	ldi	r24, 0x1C	; 28
    5e04:	91 e0       	ldi	r25, 0x01	; 1
    5e06:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <MEXTI_enableExti>
}
    5e0a:	cf 91       	pop	r28
    5e0c:	df 91       	pop	r29
    5e0e:	08 95       	ret

00005e10 <appMain>:

void appMain(void)
{
    5e10:	df 93       	push	r29
    5e12:	cf 93       	push	r28
    5e14:	cd b7       	in	r28, 0x3d	; 61
    5e16:	de b7       	in	r29, 0x3e	; 62
    5e18:	ff cf       	rjmp	.-2      	; 0x5e18 <appMain+0x8>

00005e1a <main>:

#include "APPLICATION/app.h"


void main(void)
{
    5e1a:	df 93       	push	r29
    5e1c:	cf 93       	push	r28
    5e1e:	cd b7       	in	r28, 0x3d	; 61
    5e20:	de b7       	in	r29, 0x3e	; 62
	appInit();
    5e22:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <appInit>
	appMain();
    5e26:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <appMain>
}
    5e2a:	cf 91       	pop	r28
    5e2c:	df 91       	pop	r29
    5e2e:	08 95       	ret

00005e30 <__udivmodsi4>:
    5e30:	a1 e2       	ldi	r26, 0x21	; 33
    5e32:	1a 2e       	mov	r1, r26
    5e34:	aa 1b       	sub	r26, r26
    5e36:	bb 1b       	sub	r27, r27
    5e38:	fd 01       	movw	r30, r26
    5e3a:	0d c0       	rjmp	.+26     	; 0x5e56 <__udivmodsi4_ep>

00005e3c <__udivmodsi4_loop>:
    5e3c:	aa 1f       	adc	r26, r26
    5e3e:	bb 1f       	adc	r27, r27
    5e40:	ee 1f       	adc	r30, r30
    5e42:	ff 1f       	adc	r31, r31
    5e44:	a2 17       	cp	r26, r18
    5e46:	b3 07       	cpc	r27, r19
    5e48:	e4 07       	cpc	r30, r20
    5e4a:	f5 07       	cpc	r31, r21
    5e4c:	20 f0       	brcs	.+8      	; 0x5e56 <__udivmodsi4_ep>
    5e4e:	a2 1b       	sub	r26, r18
    5e50:	b3 0b       	sbc	r27, r19
    5e52:	e4 0b       	sbc	r30, r20
    5e54:	f5 0b       	sbc	r31, r21

00005e56 <__udivmodsi4_ep>:
    5e56:	66 1f       	adc	r22, r22
    5e58:	77 1f       	adc	r23, r23
    5e5a:	88 1f       	adc	r24, r24
    5e5c:	99 1f       	adc	r25, r25
    5e5e:	1a 94       	dec	r1
    5e60:	69 f7       	brne	.-38     	; 0x5e3c <__udivmodsi4_loop>
    5e62:	60 95       	com	r22
    5e64:	70 95       	com	r23
    5e66:	80 95       	com	r24
    5e68:	90 95       	com	r25
    5e6a:	9b 01       	movw	r18, r22
    5e6c:	ac 01       	movw	r20, r24
    5e6e:	bd 01       	movw	r22, r26
    5e70:	cf 01       	movw	r24, r30
    5e72:	08 95       	ret

00005e74 <__prologue_saves__>:
    5e74:	2f 92       	push	r2
    5e76:	3f 92       	push	r3
    5e78:	4f 92       	push	r4
    5e7a:	5f 92       	push	r5
    5e7c:	6f 92       	push	r6
    5e7e:	7f 92       	push	r7
    5e80:	8f 92       	push	r8
    5e82:	9f 92       	push	r9
    5e84:	af 92       	push	r10
    5e86:	bf 92       	push	r11
    5e88:	cf 92       	push	r12
    5e8a:	df 92       	push	r13
    5e8c:	ef 92       	push	r14
    5e8e:	ff 92       	push	r15
    5e90:	0f 93       	push	r16
    5e92:	1f 93       	push	r17
    5e94:	cf 93       	push	r28
    5e96:	df 93       	push	r29
    5e98:	cd b7       	in	r28, 0x3d	; 61
    5e9a:	de b7       	in	r29, 0x3e	; 62
    5e9c:	ca 1b       	sub	r28, r26
    5e9e:	db 0b       	sbc	r29, r27
    5ea0:	0f b6       	in	r0, 0x3f	; 63
    5ea2:	f8 94       	cli
    5ea4:	de bf       	out	0x3e, r29	; 62
    5ea6:	0f be       	out	0x3f, r0	; 63
    5ea8:	cd bf       	out	0x3d, r28	; 61
    5eaa:	09 94       	ijmp

00005eac <__epilogue_restores__>:
    5eac:	2a 88       	ldd	r2, Y+18	; 0x12
    5eae:	39 88       	ldd	r3, Y+17	; 0x11
    5eb0:	48 88       	ldd	r4, Y+16	; 0x10
    5eb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    5eb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    5eb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    5eb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    5eba:	9b 84       	ldd	r9, Y+11	; 0x0b
    5ebc:	aa 84       	ldd	r10, Y+10	; 0x0a
    5ebe:	b9 84       	ldd	r11, Y+9	; 0x09
    5ec0:	c8 84       	ldd	r12, Y+8	; 0x08
    5ec2:	df 80       	ldd	r13, Y+7	; 0x07
    5ec4:	ee 80       	ldd	r14, Y+6	; 0x06
    5ec6:	fd 80       	ldd	r15, Y+5	; 0x05
    5ec8:	0c 81       	ldd	r16, Y+4	; 0x04
    5eca:	1b 81       	ldd	r17, Y+3	; 0x03
    5ecc:	aa 81       	ldd	r26, Y+2	; 0x02
    5ece:	b9 81       	ldd	r27, Y+1	; 0x01
    5ed0:	ce 0f       	add	r28, r30
    5ed2:	d1 1d       	adc	r29, r1
    5ed4:	0f b6       	in	r0, 0x3f	; 63
    5ed6:	f8 94       	cli
    5ed8:	de bf       	out	0x3e, r29	; 62
    5eda:	0f be       	out	0x3f, r0	; 63
    5edc:	cd bf       	out	0x3d, r28	; 61
    5ede:	ed 01       	movw	r28, r26
    5ee0:	08 95       	ret

00005ee2 <_exit>:
    5ee2:	f8 94       	cli

00005ee4 <__stop_program>:
    5ee4:	ff cf       	rjmp	.-2      	; 0x5ee4 <__stop_program>
